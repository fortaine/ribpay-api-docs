{
  "openapi": "3.0.0",
  "info": {
    "title": "Linxo Connect Payments API",
    "version": "1.3.1",
    "description": "# Presentation\n\n## Introduction\n\nLinxo Connect Payments API provides you an easy way to initiate a payment from\npayer PSU account to any beneficiary account. Payment initiation can be\nsubdivided in three major steps:\n1. Create an authentication using [POST /token](oxlin-payments-api.html#operation/postToken).\n2. Create `order` using [POST /orders](oxlin-payments-api.html#operation/postOrder).\n3. Redirect the payer to the URL in [orders.auth_url](oxlin-payments-api.html#operation/getAuthorize).\n4. At the end of the consent flow, payer is redirect to\n`orders.redirect_url`, you will get the payment result using\n[GET /running/orders](oxlin-payments-api.html#operation/getRunningOrder)\nto get `orders.order_status` and\n`orders.instructions.payments.status`.\n\nHere it is, if clear enough, we will deep into payment technical integration\nworkflow.\n\n> `orders` is the central object you will manipulate during the entire\n> payment lifecycle. It represent the unique consent the payer gave to\n> its bank to initiate one or multiple payments, recurring or not to\n> one or multiple beneficiaries.\n\n## How to test using Sandbox Mode\n\nIn order to simplify your evaluation and your integration of Linxo Connect Payments,\nwe provide a `Sandbox Mode` giving you a way to emulate payment. To use it,\nyou only have to use `Sandbox Mode` credentials. Only credentials\n(identifier and password) are different between `Sandbox Mode` and\n`Production Mode`, all URL and objects are unchanged.\n\n> When receiving your `client identifier` and `client password` from Oxlin,\n> be sure to remember if they are the one used for `Sandbox Mode` or\n> for `Production Mode`.\n\nTo emulate a payment using sandbox mode credentials, simply:\n- Use IBAN `FR8530003000307599775722N09` as `beneficiary.iban`.\n- Use any name as `beneficiary.name`.\n- Choose any bank from bank selection screen, it will redirect you to a\nbank emulation page.\n- From bank emulation page, you can also emulate the case where the\nredirection to your `redirect_url` doesn't works.\n\n> For payment using `Sandbox Mode`, you have to use\n> `FR8530003000307599775722N09` as `beneficiary.iban` and any value\n> as `beneficiary.name`. When bank will be chosen, bank emulation page\n> will give you following choices:\n> - `AUTHORIZED` will emulate an order authorised but not yet executed by the\n> bank (order AUTHORIZED and payment SUBMITTED).\n> - `EXECUTED` will emulate a payment immediately executed by the bank\n> (order CLOSED and payment EXECUTED).\n> - `REJECTED` will emulate a payment with order refused by the bank\n> (order REJECTED and no payment).\n> - `FAILED` will emulate a payment with order in technical error\n> (order FAILED and no payment).\n> - `EXPIRED` will emulate a payment with order expired\n> (order EXPIRED  and no payment).\n> - `AUTHORIZED` then `EXECUTED` (with delay) will emulate a real payment flow\n> where the bank authorise it in a first time and execute it with a\n> 2 minutes delay in a second time.\n> (order AUTHORIZED and payment SUBMITTED → order CLOSED and payment EXECUTED).\n> - `AUTHORIZED and REJECTED (with delay)` will emulate a real payment flow\n> where the bank authorise it in a first time and reject it with a\n> 2 minutes delay in a second time\n> (order AUTHORIZED and payment SUBMITTED → order REJECTED and payment REJECTED).\n\nTo emulate a payment with known payer using sandbox mode, you need to use\none of folowing value for `payer.iban`:\n- `FR9530003000708915516426B35` will : result in an authorized payment\n(order AUTHORIZED and payment SUBMITTED).\n- `FR2130003000302667332151D75` will result in a rejected payment\n(order REJECTED and no payment).\n- `FR5830003000304588896864Y78` will result in a failed payment\n(order FAILED and no payment).\n- `FR4730003000505378875264Q21` will result in a expired payment\n(order EXPIRED  and no payment).\n- `FR4830003000303864238885L38` will result in an executed payment\n(order CLOSED and payment EXECUTED).\n- `FR1030003000505644812371I38` will result in an authorized payment during\na 2 minutes delay and then after this delay the payment become executed\n(order AUTHORIZED and payment SUBMITTED → order CLOSED and payment EXECUTED).\n- `FR9030003000304347365769U57` will result in an authorized payment during\na 2 minutes delay and then after this delay the payment become rejected\n(order AUTHORIZED and payment SUBMITTED → order REJECTED and payment REJECTED).\n\n## Technical integration workflow\n\nAt a technical point of view, initiating a payment will affect four actors:\n- `Customer`: is the payer who have to consent the payment initiation.\n- `Integrator`: it is you as a technical actor who have a commercial relationship\nwith the `Customer`.\n- `Oxlin`: Linxo Connect Payments API provider is the regulated TPP (Third Party Payment\nService Providers) under PSD2 (Revised Payment Services Directive) that is in\ncharge of initiating a payment for your `Customer`.\n- `Bank`: payer bank that is in charge under PSD2 (Revised Payment Services\nDirective) to authenticate the payer in order to confirm the payment initiation\nrequest.\n\nFor all type of payments (single or multiple, recurring or not, to one or multiple\nbeneficiaries) you have to follow `order` creation flow:\n\n<center><img src=\"../images/linxo_connect_payments_integration.png\" alt=\"Payment flow\" title=\"Payment flow\" width=\"500px\" /></center>\n\n> **iFrame integration**: even if Linxo Connect Payments page can be integrated in an iFrame on your side,\nbanks authentication page prevent iFrame integration. It is why, even if you integrate\nLinxo Connect Payments in an iFrame, starting bank authentication flow will redirect you to the\nbank side replacing current web context to the bank context. At the end of the authentication\nflow, we will go back to the `redirect_url` in charge opening back your application context.\n\n## Order and Payment lifecycle\n\n<center><img src=\"../images/order-status.png\" alt=\"Order status\" title=\"Order status\" width=\"400px\" /></center>\n\n`order` represent payer consent and define two main categories of states:\n1. Intermediary states:\n  * `NEW`: initial state, order was created but payer wasn't asked to\n  give its consent. In that state, you have to redirect payer to `order.auth_url`\n  in order to request it's consent.\n  * `AUTHORIZED`: payer was redirect to `order.auth_url` and successfully\n  authenticate to its bank. When `AUTHORIZED`, the `order` can define payments,\n  depending on payments `start_date`. `order` will remain in `AUTHORIZED`\n  until there is not any pending payments for it.\n2. Final states:\n  * `CLOSED`: as soon as all instructed payments of an order are in a final state,\n  its status change to `CLOSED` indicating `order` was successfully authenticated,\n  payments were realized (successfully or not) and it doesn't remain any possible\n  action for concerned `order`.\n  * `REJECTED`: payer authentication was refused, `order` wasn't authorized and is in\n  a final state without instructing any payment.\n  * `FAILED`: payer authentication failed due to technical considerations, `order`\n  wasn't authorized and is in a final state without instructing any payment.\n  * `EXPIRED`: an `order` in status `NEW` expires automaticaly after 30 days.\n\n<center><img src=\"../images/payment-status.png\" alt=\"Payment status\" title=\"Payment status\" width=\"500px\" /></center>\n\nFrom its status `AUTHORIZED`, `order` instructions can produce payments whose\nstatus are divided in the same two categories:\n1. Intermediary states:\n  * `SUBMITTED`: payment was transmitted and confirmed to the bank. Execution is in\n  progress on the bank side.\n2. Final states:\n  * `EXECUTED`: `SUBMITTED` payment was executed from the bank side and funds are\n  available for the beneficiary. Please note there exist cases such instant\n  payment execution where a payment will appear directly in `EXECUTED` without\n  transition from `SUBMITTED` one.\n  * `CANCELLED`: when you close an `AUTHORIZED` order before all instructed payments\n  were `EXECUTED`, pending payments are moved to `CANCELLED` state.\n  * `REJECTED`: `SUBMITTED` payment that was rejected either by payer bank, either\n  by beneficiary bank.\n\n### STATUS:\nThe Order is in the `NEW` state when the `order` is created.\n\nAfter the bank returns, the `ORDER` changes to `AUTHORIZED` status if the authentication \nis accepted by the bank (which means that the payer has been successfully redirected \nto his bank and has validated the transfer request).\nAt this moment, the payment change to `SUBMITTED` status – (intermediate status) - The\npayment is still being processed by the bank, so there is still a small probability \nat this moment that it will finally be declined by the bank.\n\nThen when the payment is finalized by the bank, the `ORDER` changes to `CLOSED` status \nand the payment to `EXECUTED` status, (Final status ) - the payment has been executed \non the bank's side and the funds are available to the beneficiary.\n\nOnly from this status the payment is irrevocable.\n\nYou can base your decision on the intermediate statuses (`AUTHORIZED` and `SUBMITTED`) which\nvalidate that the client has validated the transfer, but this status should not yet be considered\nas a guarantee of irrevocability of the payment.\n\n### Concerning the delay between the statuses of the `order`:\nFrom the `NEW` status to the `AUTHORIZED` status, the delay corresponds as soon as the customer \nreturns his authentication to his bank.\n\nNote that when you create a payment `order`, it is valid for 30 days\nFrom the moment your customer has clicked on the link and is redirected to his bank, he has 15 minutes\nto authenticate himself, otherwise it goes to the state EXPIRED.\n\n# Technicals considerations\n\n## Errors\n\nThe API uses conventional HTTP response codes to indicate the success or\nfailure of an API request. In general, codes in the 2xx range indicate\nsuccess, codes in the 4xx range indicate an error that fails given the\ninformation provided (e.g., a required parameter was omitted), and codes in\nthe 5xx range indicate an error with our services.\n\nHowever, not all errors map cleanly onto HTTP response codes. When a request\nis valid but does not complete successfully (e.g., an asynchronous\noperation), we return a 402 error code.\n\nAll of the error responses contain the same structure in the body:\n\n| Attribute name      | Description                                        |\n|---------------------|----------------------------------------------------|\n| `error`             | Error code (can be used to manage error on the client). |\n| `error_description` | Human readable english text that describes the error (can be used in logs). |\n| `id`                | Identifies the resource (when applicable). |\n\nExample:\n```\n{\n  \"error\": \"PARAMETER_MISSING\",\n  \"error_description\": \"Missing request header 'X-FWD-Request-ID' for method parameter of type String\",\n  \"id\": \"/v1/accounts\"\n}\n```\n\n## Pagination\n\nWhen the API return a list of elements, the results are paginated.\nBy default the lists is limited to return a result limit of 100 elements\nand are explored on page 1. Calling `GET /xxx` or\n`GET /xxx?page=1&limit=100` will return the same results.\n\nTo help you navigate through the results contained in the JSON responses, we\nprovide `_links` and `_page`properties that let you know where you are in\nthe pagination according following elements:\n- **self** : <https://domain/Resources?page=X&limit=Y>\n- first page : <https://domain/Resources?page=X&limit=Y>\n- last page : <https://domain/Resources?page=X&limit=Y>\n- next page : <https://domain/Resources?page=X&limit=Y>\n- previous page : <https://domain/Resources?page=X&limit=Y>\n- size: <number of elements in the current page>\n- total_elements: <total number of elements>\n- total_pages: <total number of pages>\n- number: <current page number>\n\n`self`, `size`, `total_elements`, `total_pages` and `number` properties are\nmandatories and returned in both paginated and not paginated results. Other\nproperties are only returned on paginated result.\n\nAs an example, you have 1215 `orders`. You call `GET /v1/running/orders` without\npagination parameters, we return 100 and there are still 1115 to explore.\nWe therefore send the following elements in the answer body:\n\n```\n{\n\"_links\": {\n  \"self\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=1&limit=100\"\n  },\n  \"first\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=1&limit=100\"\n  },\n  \"last\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=13&limit=100\"\n  },\n  \"next\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=2&limit=100\"\n  },\n\"_page\": {\n  \"size\": 100,\n  \"total_elements\": 1215,\n  \"total_pages\": 13,\n  \"number\": 1\n  }\n}\n```\n\nAnd if you call the page number 7 `GET /v1/running/orders`:\n\n```\n{\n\"_links\": {\n  \"self\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=7&limit=100\"\n  },\n  \"first\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=1&limit=100\"\n  },\n  \"last\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=13&limit=100\"\n  },\n  \"next\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=8&limit=100\"\n  },\n  \"prev\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=6&limit=100\"\n  },\n\"_page\": {\n  \"size\": 100,\n  \"total_elements\": 1215,\n  \"total_pages\": 13,\n  \"number\": 7\n  }\n}\n```\n\n## Versioning\n\nThe API is following the semantic versioning (major.minor). The version is\nlocated in the URL, patches on the same version endpoint are\nbackward-compatible.\n\nA minor release can add new resources, parameters or properties. A good\npractice for a client implementation is to design the implementation to\nsupport minor changes.\n\nThe patch releases are not visible to the clients since they are not\nchanging the contract.\n\n## Versions history\n\n1.3.1:\n- Deprecate `providers_header` following Linxo Connect rebranding.\n- Deprecate `terms_footer` following Linxo Connect rebranding.\n- Update `button_radius` default value to `5` following Linxo Connect rebranding.\n- Correct order request and response to have `complementary_name` for every account types.\n- Update default value for `button_alignment` and `button_size`\n- Remove versions history older than 1.2.0\n\n1.3.0:\n- Add method `POST /v1/authorized_accounts`.\n- Add method `GET /v1/authorized_accounts/{authorized_account_id}`.\n- Add method `DELETE /v1/authorized_accounts/{authorized_account_id}`.\n- Add method `GET /v1/authorized_accounts`.\n\n1.2.2:\n- Add `InstantPaymentText` and `SinglePaymentText`.\n- Deprecate `InstantPaymentFooter` following Linxo Connect rebranding\n\n1.2.1:\n- Update documentation on sandbox mode.\n- Update documentation on `favorite_providers`.\n\n1.2.0:\n- Add `instant_payment_header`, `instant_payment_footer`,\n`providers_header` and `providers_search_hint` options on\n`GET /v1/authorize/{order_id}`.\n"
  },
  "servers": [
    {
      "url": "https://pay.oxlin.io/",
      "description": "Linxo Connect Payments server"
    }
  ],
  "security": [
    {
      "ClientCredentials": []
    }
  ],
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Get an OAuth2 authorization bearer.\n",
        "operationId": "postToken",
        "security": [
          {
            "BasicAuth": []
          }
        ],
        "description": "API access is protected using OAuth2 client credential flow. As a consequence, to use the API\nyou need to:\n1. Request an authorization bearer using that `/token` method,\n2. Get `access_token` value in the response body and pass it in the `Authorization`\nheader of the protected methods you need to access to.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/BasicAuthorization"
          }
        ],
        "requestBody": {
          "description": "Token creation description.\n",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Created token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenItem"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/v1/orders": {
      "post": {
        "tags": [
          "Payment orders"
        ],
        "summary": "Create an order.\n",
        "operationId": "postOrder",
        "description": "Create an order representing one or more payments, today or in the\nfuture to a unique beneficiary or multiples beneficiaries. An order\nis associated to a unique payment initiation, as a consequence it\nis associated to a unique authentication from the PSU bank.\n\nNote the order is valid during a 30 days period. After that delay,\nit will expire automatically and you can't use it anymore.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          }
        ],
        "requestBody": {
          "description": "Description of the order to create. Based on transmitted parameters,\nyou will be able to create a single payment (instant or not),\na standing order or a batch payment.\n\n> In order to simplify the `orders` creation, it exist two different\n> format:\n> - Format `SingleInstructionOrder` is a simplified way to create\n> payments of type `SINGLE_PAYMENT`, `SINGLE_INSTANT_PAYMENT` or\n> `STANDING_ORDERS`. Refer to sample `Single payment`.\n> - In addition, `MultiplesInstructionsOrder` format also\n> support payment of type BATCH_PAYMENTS. Refer to sample `Single\n> payment (alternate)`.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SingleInstructionOrder"
                  },
                  {
                    "$ref": "#/components/schemas/MultiplesInstructionsOrder"
                  }
                ]
              },
              "examples": {
                "Single payment": {
                  "value": {
                    "redirect_url": "https://my_redirect_url/",
                    "amount": "23.45",
                    "currency": "EUR",
                    "beneficiary": {
                      "schema": "SEPA",
                      "iban": "FR8530003000307599775722N09",
                      "name": "Jean Dupond"
                    },
                    "label": "Payment from John Dupont to Jean Dupond"
                  }
                },
                "Single payment (alternate)": {
                  "value": {
                    "redirect_url": "https://my_redirect_url/",
                    "instructions": [
                      {
                        "amount": "23.45",
                        "currency": "EUR",
                        "beneficiary": {
                          "schema": "SEPA",
                          "iban": "FR8530003000307599775722N09",
                          "name": "Jean Dupond"
                        },
                        "label": "Payment from John Dupont to Jean Dupond"
                      }
                    ]
                  }
                },
                "Pending order": {
                  "value": {
                    "redirect_url": "https://my_redirect_url/",
                    "amount": "33.33",
                    "currency": "EUR",
                    "start_date": "2020-01-01T00:00:00+01:00",
                    "frequency": "WEEKLY",
                    "beneficiary": {
                      "schema": "SEPA",
                      "iban": "FR7612345987650123456789014",
                      "name": "Jean Dupond"
                    },
                    "label": "Recurring payment from John Dupont to Jean Dupond"
                  }
                },
                "Pending order (alternate)": {
                  "value": {
                    "redirect_url": "https://my_redirect_url/",
                    "start_date": "2020-01-01T00:00:00+01:00",
                    "frequency": "WEEKLY",
                    "instructions": [
                      {
                        "amount": "33.33",
                        "currency": "EUR",
                        "beneficiary": {
                          "schema": "SEPA",
                          "iban": "FR7612345987650123456789014",
                          "name": "Jean Dupond"
                        },
                        "label": "Recurring payment from John Dupont to Jean Dupond"
                      }
                    ]
                  }
                },
                "Batch payment": {
                  "value": {
                    "redirect_url": "https://my_redirect_url/",
                    "instructions": [
                      {
                        "amount": "45.65",
                        "currency": "EUR",
                        "beneficiary": {
                          "schema": "SEPA",
                          "iban": "FR7612345987650123456789014",
                          "name": "Jean Dupond"
                        },
                        "label": "Payment from John Dupont to Jean Dupond"
                      },
                      {
                        "amount": "23.43",
                        "currency": "EUR",
                        "beneficiary": {
                          "schema": "SEPA",
                          "iban": "FR7912345987650123456789014",
                          "name": "Jean Doe"
                        },
                        "label": "Payment from John Dupont to Jean Doe"
                      },
                      {
                        "amount": "345",
                        "currency": "EUR",
                        "beneficiary": {
                          "schema": "SEPA",
                          "iban": "FR8312345987650123456789014",
                          "name": "John Jean"
                        },
                        "label": "Payment from John Dupont to John Jean"
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created order.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                },
                "examples": {
                  "Single payment": {
                    "value": {
                      "id": "299e1bf6-a95e-11ea-bb37-0242ac130002",
                      "order_status": "NEW",
                      "creation_date": "2020-01-24T08:42:32+01:00",
                      "auth_url": "https://oxlin.com/auth_payment/12/",
                      "redirect_url": "https://my_redirect_url/",
                      "start_date": "2020-01-24T08:42:32+01:00",
                      "instructions": [
                        {
                          "amount": "23.45",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR8530003000307599775722N09",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond"
                        }
                      ]
                    }
                  },
                  "Pending order": {
                    "value": {
                      "id": "39d490ea-a95e-11ea-bb37-0242ac130002",
                      "order_status": "NEW",
                      "creation_date": "2019-12-24T09:34:23+01:00",
                      "auth_url": "https://oxlin.com/auth_payment/15/",
                      "redirect_url": "https://my_redirect_url/",
                      "start_date": "2020-01-01T00:00:00+01:00",
                      "frequency": "WEEKLY",
                      "instructions": [
                        {
                          "amount": "33.33",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Recurring payment from John Dupont to Jean Dupond"
                        }
                      ]
                    }
                  },
                  "Batch payment": {
                    "value": {
                      "id": "3cf58fea-a95e-11ea-bb37-0242ac130002",
                      "order_status": "NEW",
                      "creation_date": "2020-01-24T09:40:23+01:00",
                      "auth_url": "https://oxlin.com/auth_payment/15/",
                      "redirect_url": "https://my_redirect_url/",
                      "start_date": "2020-01-24T09:40:23+01:00",
                      "instructions": [
                        {
                          "amount": "45.65",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond"
                        },
                        {
                          "amount": "23.43",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7912345987650123456789014",
                            "name": "Jean Doe"
                          },
                          "label": "Payment from John Dupont to Jean Doe"
                        },
                        {
                          "amount": "345",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR8312345987650123456789014",
                            "name": "John Jean"
                          },
                          "label": "Payment from John Dupont to John Jean"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "links": {
              "GetOrderByOrderId": {
                "operationId": "getOrder",
                "parameters": {
                  "order_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `order_id` parameter in `GET /v1/reporting/orders/{order_id}`\n"
              },
              "GetRunningOrderByOrderId": {
                "operationId": "getRunningOrder",
                "parameters": {
                  "order_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `order_id` parameter in `GET /v1/running/orders/{order_id}`\n"
              },
              "GetAuthorizeByOrderId": {
                "operationId": "getAuthorize",
                "parameters": {
                  "order_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `order_id` parameter in `GET /v1/authorize/{order_id}`\n"
              },
              "PutOrderByOrderId": {
                "operationId": "putOrder",
                "parameters": {
                  "order_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `order_id` parameter in `PUT /v1/orders/{order_id}`\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/authorize/{order_id}": {
      "get": {
        "tags": [
          "Payment orders"
        ],
        "summary": "Start authorisation flow for an order.\n",
        "security": [],
        "operationId": "getAuthorize",
        "description": "Open the HTML page use to manage the order authorisation flow. Depending on order\ncontext, page will provides a way to:\n- Manage terms and conditions\n- Get payer email address\n- Select payer bank\n- Select payer account\n- Redirect to the bank authorisation page\n\nThe page will automatically select the best language to use according\nclient browser configuration. It is possible to override browser language\ndetection using `lng` parameter. Language detection priority is following:\n1. `lng` parameter\n2. browser configuration\n3. `en_EN` value\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/OrderIdParam"
          },
          {
            "$ref": "#/components/parameters/ClientIdParam"
          },
          {
            "$ref": "#/components/parameters/Language"
          },
          {
            "$ref": "#/components/parameters/LanguageDeprecated"
          },
          {
            "$ref": "#/components/parameters/Countries"
          },
          {
            "$ref": "#/components/parameters/FavoriteProviders"
          },
          {
            "$ref": "#/components/parameters/Title"
          },
          {
            "$ref": "#/components/parameters/TermsHeader"
          },
          {
            "$ref": "#/components/parameters/TermsFooter"
          },
          {
            "$ref": "#/components/parameters/TermsBody"
          },
          {
            "$ref": "#/components/parameters/InstantPaymentHeader"
          },
          {
            "$ref": "#/components/parameters/InstantPaymentText"
          },
          {
            "$ref": "#/components/parameters/SinglePaymentText"
          },
          {
            "$ref": "#/components/parameters/InstantPaymentFooterDeprecated"
          },
          {
            "$ref": "#/components/parameters/ProvidersHeader"
          },
          {
            "$ref": "#/components/parameters/ProvidersSearchHint"
          },
          {
            "$ref": "#/components/parameters/Font"
          },
          {
            "$ref": "#/components/parameters/FontColor"
          },
          {
            "$ref": "#/components/parameters/FontSecondaryColor"
          },
          {
            "$ref": "#/components/parameters/BackgroundColor"
          },
          {
            "$ref": "#/components/parameters/ElementsFont"
          },
          {
            "$ref": "#/components/parameters/ElementsColor"
          },
          {
            "$ref": "#/components/parameters/ForegroundColorDeprecated"
          },
          {
            "$ref": "#/components/parameters/ElementsFontColor"
          },
          {
            "$ref": "#/components/parameters/SecondaryElementsColor"
          },
          {
            "$ref": "#/components/parameters/SecondaryElementsFontColor"
          },
          {
            "$ref": "#/components/parameters/DisplayBorder"
          },
          {
            "$ref": "#/components/parameters/Light"
          },
          {
            "$ref": "#/components/parameters/ButtonRadius"
          },
          {
            "$ref": "#/components/parameters/CancelURL"
          },
          {
            "$ref": "#/components/parameters/AskForAlias"
          },
          {
            "$ref": "#/components/parameters/AskForIBAN"
          },
          {
            "$ref": "#/components/parameters/DisplayQRCode"
          },
          {
            "$ref": "#/components/parameters/DisplayHeader"
          },
          {
            "$ref": "#/components/parameters/ItemBorderColor"
          },
          {
            "$ref": "#/components/parameters/ItemBorderRadius"
          },
          {
            "$ref": "#/components/parameters/ItemArrowColor"
          },
          {
            "$ref": "#/components/parameters/ButtonArrowColor"
          },
          {
            "$ref": "#/components/parameters/ButtonSize"
          },
          {
            "$ref": "#/components/parameters/ButtonAlignment"
          }
        ],
        "responses": {
          "200": {
            "description": "HTML page used to authorize the order.\n",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>HTML Content</html>"
                }
              }
            }
          },
          "302": {
            "description": "Only if not using Oxlin agreement, return header `Location` with\nURL to browse to in order to start authorisation flow at the bank side.\n\n> Note the `302` redirection only appends if `orders` is fully filled\nwith all information required to select the payer bank. If not,\nwe will return a `200` response with a bank selection page.\n",
            "headers": {
              "Location": {
                "$ref": "#/components/headers/Location"
              }
            }
          },
          "400": {
            "description": "HTML page describing an HTTP 400 error code.\n",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>HTML Content</html>"
                }
              }
            }
          },
          "404": {
            "description": "HTML page describing an HTTP 404 error code.\n",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>HTML Content</html>"
                }
              }
            }
          },
          "405": {
            "description": "HTML page describing an HTTP 405 error code.\n",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>HTML Content</html>"
                }
              }
            }
          },
          "500": {
            "description": "HTML page describing an HTTP 500 error code.\n",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string",
                  "example": "<html>HTML Content</html>"
                }
              }
            }
          }
        }
      }
    },
    "/v1/running/orders/{order_id}": {
      "get": {
        "tags": [
          "Payment orders"
        ],
        "summary": "Get a specific order for realtime access.\n",
        "operationId": "getRunningOrder",
        "description": "Retrieve a specific order based on its unique identifier for realtime access.\nAs a consequence, **can only be used to get an `orders` during the realtime flow**\nmeans **while order is in its initial state `NEW` and during the next 10 minutes\nafter it was updated to another status**. The method have to be only used for\nhigh availability services, if it doesn't return any `orders`, you are probably\nusing the wrong method and have to deep into using `GET v1/reporting/orders/XXX`.\n\nEach order represent one or more payments,\ntoday or in the future, to a unique beneficiary or multiples\nbeneficiaries. An order is associated to one or more instructions but to a\nunique payment initiation at the bank side, as a consequence it is associated\nto a unique authentication from the PSU bank.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/OrderIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested order definition.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                },
                "examples": {
                  "Unauthorized single payment": {
                    "value": {
                      "id": "299e1bf6-a95e-11ea-bb37-0242ac130002",
                      "order_status": "NEW",
                      "creation_date": "2020-01-24T08:42:32+01:00",
                      "auth_url": "https://oxlin.com/auth_payment/12/",
                      "redirect_url": "https://my_redirect_url/",
                      "start_date": "2020-01-24T08:42:32+01:00",
                      "instructions": [
                        {
                          "amount": "23.45",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR8530003000307599775722N09",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond"
                        }
                      ]
                    }
                  },
                  "Authorized single payment": {
                    "value": {
                      "id": "2f4563b6-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "AUTHORIZED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2020-01-24T09:34:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "SINGLE_PAYMENT",
                      "start_date": "2020-01-24T09:34:23+01:00",
                      "instructions": [
                        {
                          "amount": "123.45",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "SUBMITTED",
                              "amount": "123.45",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:38:12+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Closed single payment": {
                    "value": {
                      "id": "363e04a2-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "CLOSED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2020-01-24T09:38:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "SINGLE_PAYMENT",
                      "start_date": "2020-01-24T09:38:23+01:00",
                      "instructions": [
                        {
                          "amount": "12",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "12",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:40:34+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Authorized pending order": {
                    "value": {
                      "id": "39d490ea-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "AUTHORIZED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2019-12-24T09:34:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "STANDING_ORDERS",
                      "start_date": "2020-01-01T00:00:00+01:00",
                      "frequency": "WEEKLY",
                      "instructions": [
                        {
                          "amount": "33.33",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Recurring payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "33.33",
                              "currency": "EUR",
                              "execution_date": "2020-01-01T00:00:00+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            },
                            {
                              "payment_status": "EXECUTED",
                              "amount": "33.33",
                              "currency": "EUR",
                              "execution_date": "2020-01-08T00:00:00+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            },
                            {
                              "payment_status": "EXECUTED",
                              "amount": "33.33",
                              "currency": "EUR",
                              "execution_date": "2020-01-15T00:00:00+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Closed batch payment": {
                    "value": {
                      "id": "3cf58fea-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "CLOSED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2020-01-24T09:40:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "BATCH_PAYMENTS",
                      "start_date": "2020-01-24T09:40:23+01:00",
                      "instructions": [
                        {
                          "amount": "45.65",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "45.65",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:43:25+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        },
                        {
                          "amount": "23.43",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7912345987650123456789014",
                            "name": "Jean Doe"
                          },
                          "label": "Payment from John Dupont to Jean Doe",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "23.43",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:43:25+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        },
                        {
                          "amount": "345",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR8312345987650123456789014",
                            "name": "John Jean"
                          },
                          "label": "Payment from John Dupont to John Jean",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "345",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:43:25+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "Payment orders"
        ],
        "summary": "Update a specific order.\n",
        "operationId": "putOrder",
        "description": "Update a specific order based on its unique identifier. It is possible\nto update:\n  - `order_status`: an order in status `NEW` or `AUTHORIZED` can be\n  changed to status `CLOSED`. In such case, order won't create any\n  new payments after status change, however existing payments status\n  won't change and are kept in current state.\n  - `bic`: you can change payer bank identification for an order in\n  status `NEW` with `order.bic` **undefined**.\n  - `email`: you can change payer email for an order in\n  status `NEW` with `orders.email` **undefined**.\n  - `selected_capability`: you can change payment used capability for an order in\n  status `NEW` with `orders.instructions.payments` **undefined**.\n  - `payer`: you can change payer account for an order in\n  status `NEW` with `order.payer` **undefined**.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/OrderIdParam"
          }
        ],
        "requestBody": {
          "description": "Updates to realize on `order`.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderItemUpdate"
              },
              "examples": {
                "Cancel an order": {
                  "value": {
                    "order_status": "CLOSED"
                  }
                },
                "Define payer bank": {
                  "value": {
                    "bic": "AXABFRPP"
                  }
                },
                "Define payer email": {
                  "value": {
                    "email": "payer.email@domain.com"
                  }
                },
                "Define selected capability": {
                  "value": {
                    "selected_capability": "SINGLE_PAYMENT"
                  }
                },
                "Define payer": {
                  "value": {
                    "payer": {
                      "schema": "SEPA",
                      "iban": "FR8530003000307599775722N09"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Order successfully updated.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/reporting/orders/{order_id}": {
      "get": {
        "tags": [
          "Payment orders"
        ],
        "summary": "Get a specific order.\n",
        "operationId": "getOrder",
        "description": "Retrieve a specific order based on its unique identifier.\nEach order represent one or more payments,\ntoday or in the future, to a unique beneficiary or multiples\nbeneficiaries. An order is associated to a unique payment initiation,\nas a consequence it is associated to a unique authentication from the\nPSU bank.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/OrderIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested order definition.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderItem"
                },
                "examples": {
                  "Unauthorized single payment": {
                    "value": {
                      "id": "299e1bf6-a95e-11ea-bb37-0242ac130002",
                      "order_status": "NEW",
                      "creation_date": "2020-01-24T08:42:32+01:00",
                      "auth_url": "https://oxlin.com/auth_payment/12/",
                      "redirect_url": "https://my_redirect_url/",
                      "start_date": "2020-01-24T08:42:32+01:00",
                      "instructions": [
                        {
                          "amount": "23.45",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR8530003000307599775722N09",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond"
                        }
                      ]
                    }
                  },
                  "Authorized single payment": {
                    "value": {
                      "id": "2f4563b6-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "AUTHORIZED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2020-01-24T09:34:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "SINGLE_PAYMENT",
                      "start_date": "2020-01-24T09:34:23+01:00",
                      "instructions": [
                        {
                          "amount": "123.45",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "SUBMITTED",
                              "amount": "123.45",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:38:12+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Closed single payment": {
                    "value": {
                      "id": "363e04a2-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "CLOSED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2020-01-24T09:38:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "SINGLE_PAYMENT",
                      "start_date": "2020-01-24T09:38:23+01:00",
                      "instructions": [
                        {
                          "amount": "12",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "12",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:40:34+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Authorized pending order": {
                    "value": {
                      "id": "39d490ea-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "AUTHORIZED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2019-12-24T09:34:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "STANDING_ORDERS",
                      "start_date": "2020-01-01T00:00:00+01:00",
                      "frequency": "WEEKLY",
                      "instructions": [
                        {
                          "amount": "33.33",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Recurring payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "33.33",
                              "currency": "EUR",
                              "execution_date": "2020-01-01T00:00:00+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            },
                            {
                              "payment_status": "EXECUTED",
                              "amount": "33.33",
                              "currency": "EUR",
                              "execution_date": "2020-01-08T00:00:00+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            },
                            {
                              "payment_status": "EXECUTED",
                              "amount": "33.33",
                              "currency": "EUR",
                              "execution_date": "2020-01-15T00:00:00+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "Closed batch payment": {
                    "value": {
                      "id": "3cf58fea-a95e-11ea-bb37-0242ac130002",
                      "bic": "AXABFRPP",
                      "order_status": "CLOSED",
                      "payer": {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      },
                      "creation_date": "2020-01-24T09:40:23+01:00",
                      "redirect_url": "https://my_redirect_url/",
                      "selected_capability": "BATCH_PAYMENTS",
                      "start_date": "2020-01-24T09:40:23+01:00",
                      "instructions": [
                        {
                          "amount": "45.65",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014",
                            "name": "Jean Dupond"
                          },
                          "label": "Payment from John Dupont to Jean Dupond",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "45.65",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:43:25+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        },
                        {
                          "amount": "23.43",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR7912345987650123456789014",
                            "name": "Jean Doe"
                          },
                          "label": "Payment from John Dupont to Jean Doe",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "23.43",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:43:25+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        },
                        {
                          "amount": "345",
                          "currency": "EUR",
                          "beneficiary": {
                            "schema": "SEPA",
                            "iban": "FR8312345987650123456789014",
                            "name": "John Jean"
                          },
                          "label": "Payment from John Dupont to John Jean",
                          "payments": [
                            {
                              "payment_status": "EXECUTED",
                              "amount": "345",
                              "currency": "EUR",
                              "execution_date": "2020-01-24T09:43:25+01:00",
                              "creation_date": "2020-01-27T12:23:12+01:00"
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/reporting/orders/": {
      "get": {
        "tags": [
          "Payment orders"
        ],
        "summary": "Returns a list of orders.\n",
        "description": "Get the list of `orders`. Each order represents one or more payments,\ntoday or in the future, to a unique beneficiary or multiple\nbeneficiaries. An order is associated to a unique payment initiation,\nas a consequence it is associated to a unique authentication from the\nPSU bank.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/FromCreationDateParam"
          },
          {
            "$ref": "#/components/parameters/ToCreationDateParam"
          },
          {
            "$ref": "#/components/parameters/FromExecutionDateParam"
          },
          {
            "$ref": "#/components/parameters/OrderStatusParam"
          },
          {
            "$ref": "#/components/parameters/UserReferenceParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of orders.",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Orders response.\n",
                  "type": "object",
                  "properties": {
                    "orders": {
                      "description": "List of orders.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderItem"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "first": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "last": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "next": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "prev": {
                          "$ref": "#/components/schemas/GenericLink"
                        }
                      },
                      "required": [
                        "self"
                      ]
                    },
                    "_page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "orders",
                    "_links",
                    "_page"
                  ],
                  "example": {
                    "orders": [
                      {
                        "id": "299e1bf6-a95e-11ea-bb37-0242ac130002",
                        "order_status": "NEW",
                        "creation_date": "2020-01-24T08:42:32+01:00",
                        "auth_url": "https://oxlin.com/auth_payment/12/",
                        "redirect_url": "https://my_redirect_url/",
                        "start_date": "2020-01-24T08:42:32+01:00",
                        "instructions": [
                          {
                            "amount": "23.45",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR8530003000307599775722N09",
                              "name": "Jean Dupond"
                            },
                            "label": "Payment from John Dupont to Jean Dupond"
                          }
                        ]
                      },
                      {
                        "id": "2f4563b6-a95e-11ea-bb37-0242ac130002",
                        "bic": "AXABFRPP",
                        "order_status": "AUTHORIZED",
                        "payer": {
                          "schema": "SEPA",
                          "iban": "FR7612345987650123456789014"
                        },
                        "creation_date": "2020-01-24T09:34:23+01:00",
                        "redirect_url": "https://my_redirect_url/",
                        "selected_capability": "SINGLE_PAYMENT",
                        "start_date": "2020-01-24T09:34:23+01:00",
                        "instructions": [
                          {
                            "amount": "123.45",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR7612345987650123456789014",
                              "name": "Jean Dupond"
                            },
                            "label": "Payment from John Dupont to Jean Dupond",
                            "payments": [
                              {
                                "payment_status": "SUBMITTED",
                                "amount": "123.45",
                                "currency": "EUR",
                                "execution_date": "2020-01-24T09:38:12+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "363e04a2-a95e-11ea-bb37-0242ac130002",
                        "bic": "AXABFRPP",
                        "order_status": "CLOSED",
                        "payer": {
                          "schema": "SEPA",
                          "iban": "FR7612345987650123456789014"
                        },
                        "creation_date": "2020-01-24T09:38:23+01:00",
                        "redirect_url": "https://my_redirect_url/",
                        "selected_capability": "SINGLE_PAYMENT",
                        "start_date": "2020-01-24T09:38:23+01:00",
                        "instructions": [
                          {
                            "amount": "12",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR7612345987650123456789014",
                              "name": "Jean Dupond"
                            },
                            "label": "Payment from John Dupont to Jean Dupond",
                            "payments": [
                              {
                                "payment_status": "EXECUTED",
                                "amount": "12",
                                "currency": "EUR",
                                "execution_date": "2020-01-24T09:40:34+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "39d490ea-a95e-11ea-bb37-0242ac130002",
                        "bic": "AXABFRPP",
                        "order_status": "AUTHORIZED",
                        "payer": {
                          "schema": "SEPA",
                          "iban": "FR7612345987650123456789014"
                        },
                        "creation_date": "2019-12-24T09:34:23+01:00",
                        "redirect_url": "https://my_redirect_url/",
                        "selected_capability": "STANDING_ORDERS",
                        "start_date": "2020-01-01T00:00:00+01:00",
                        "frequency": "WEEKLY",
                        "instructions": [
                          {
                            "amount": "33.33",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR7612345987650123456789014",
                              "name": "Jean Dupond"
                            },
                            "label": "Recurring payment from John Dupont to Jean Dupond",
                            "payments": [
                              {
                                "payment_status": "EXECUTED",
                                "amount": "33.33",
                                "currency": "EUR",
                                "execution_date": "2020-01-01T00:00:00+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              },
                              {
                                "payment_status": "EXECUTED",
                                "amount": "33.33",
                                "currency": "EUR",
                                "execution_date": "2020-01-08T00:00:00+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              },
                              {
                                "payment_status": "EXECUTED",
                                "amount": "33.33",
                                "currency": "EUR",
                                "execution_date": "2020-01-15T00:00:00+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "id": "3cf58fea-a95e-11ea-bb37-0242ac130002",
                        "bic": "AXABFRPP",
                        "order_status": "CLOSED",
                        "payer": {
                          "schema": "SEPA",
                          "iban": "FR7612345987650123456789014"
                        },
                        "creation_date": "2020-01-24T09:40:23+01:00",
                        "redirect_url": "https://my_redirect_url/",
                        "selected_capability": "BATCH_PAYMENTS",
                        "start_date": "2020-01-24T09:40:23+01:00",
                        "instructions": [
                          {
                            "amount": "45.65",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR7612345987650123456789014",
                              "name": "Jean Dupond"
                            },
                            "label": "Payment from John Dupont to Jean Dupond",
                            "payments": [
                              {
                                "payment_status": "EXECUTED",
                                "amount": "45.65",
                                "currency": "EUR",
                                "execution_date": "2020-01-24T09:43:25+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              }
                            ]
                          },
                          {
                            "amount": "23.43",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR7912345987650123456789014",
                              "name": "Jean Doe"
                            },
                            "label": "Payment from John Dupont to Jean Doe",
                            "payments": [
                              {
                                "payment_status": "EXECUTED",
                                "amount": "23.43",
                                "currency": "EUR",
                                "execution_date": "2020-01-24T09:43:25+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              }
                            ]
                          },
                          {
                            "amount": "345",
                            "currency": "EUR",
                            "beneficiary": {
                              "schema": "SEPA",
                              "iban": "FR8312345987650123456789014",
                              "name": "John Jean"
                            },
                            "label": "Payment from John Dupont to John Jean",
                            "payments": [
                              {
                                "payment_status": "EXECUTED",
                                "amount": "345",
                                "currency": "EUR",
                                "execution_date": "2020-01-24T09:43:25+01:00",
                                "creation_date": "2020-01-27T12:23:12+01:00"
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "_links": [
                      {
                        "self": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                      },
                      {
                        "first": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                      },
                      {
                        "last": "https://pay.oxlin.io/v1/reporting/orders?page=10"
                      },
                      {
                        "next": "https://pay.oxlin.io/v1/reporting/orders?page=2"
                      }
                    ],
                    "_page": {
                      "size": "5",
                      "total_elements": "50",
                      "total_pages": "10",
                      "number": "1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/alias": {
      "post": {
        "tags": [
          "Account alias"
        ],
        "summary": "Create an alias.\n",
        "operationId": "postAlias",
        "description": "Create an account alias used to store account identification\nin order to be reused for future payments.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          }
        ],
        "requestBody": {
          "description": "Description of the account alias to create.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasItemCreate"
              },
              "example": {
                "user_reference": "current_user_reference",
                "label": "My prefered account",
                "account": {
                  "schema": "SEPA",
                  "iban": "FR8530003000307599775722N09"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created alias.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasItem"
                },
                "example": {
                  "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                  "user_reference": "current_user_reference",
                  "label": "My prefered account",
                  "account": {
                    "schema": "SEPA",
                    "iban": "FR8530003000307599775722N09"
                  }
                }
              }
            },
            "links": {
              "GetAliasByAliasId": {
                "operationId": "getAlias",
                "parameters": {
                  "alias_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `alias_id` parameter in `GET /v1/alias/{alias_id}`\n"
              },
              "PutAliasByAliasId": {
                "operationId": "putAlias",
                "parameters": {
                  "alias_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `alias_id` parameter in `PUT /v1/alias/{alias_id}`\n"
              },
              "DeleteAliasByAliasId": {
                "operationId": "deleteAlias",
                "parameters": {
                  "alias_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `alias_id` parameter in `DELETE /v1/alias/{alias_id}`\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/alias/{alias_id}": {
      "get": {
        "tags": [
          "Account alias"
        ],
        "summary": "Get a specific account alias.\n",
        "operationId": "getAlias",
        "description": "Retrieve a specific account alias based on its unique identifier.\nAn account alias is used to store accounts identification\nin order to be reused for future payments.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/AliasIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested alias definition.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AliasItem"
                },
                "example": {
                  "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                  "user_reference": "current_user_reference",
                  "label": "My prefered account",
                  "account": {
                    "schema": "SEPA",
                    "iban": "FR8530003000307599775722N09"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "put": {
        "tags": [
          "Account alias"
        ],
        "summary": "Update a specific alias.\n",
        "operationId": "putAlias",
        "description": "Update a specific account alias based on its unique identifier.\nIt is possible to update:\n  - `label`: the alias label.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/AliasIdParam"
          }
        ],
        "requestBody": {
          "description": "Updates to realize on alias.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AliasItemUpdate"
              },
              "example": {
                "label": "My new prefered account"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Alias successfully updated.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Account alias"
        ],
        "summary": "Delete a specific alias.\n",
        "operationId": "deleteAlias",
        "description": "Delete a specific alias based on its unique identifier.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/AliasIdParam"
          }
        ],
        "responses": {
          "204": {
            "description": "Alias successfully deleted.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/alias/": {
      "get": {
        "tags": [
          "Account alias"
        ],
        "summary": "Returns a list of alias.\n",
        "description": "Get the list of alias based on search criteria.\nAn account alias is used to store accounts identification\nin order to be reused for future payments.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          },
          {
            "$ref": "#/components/parameters/UserReferenceRequiredParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of alias.",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Alias response.\n",
                  "type": "object",
                  "properties": {
                    "aliases": {
                      "description": "List of alias.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AliasItem"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "first": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "last": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "next": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "prev": {
                          "$ref": "#/components/schemas/GenericLink"
                        }
                      },
                      "required": [
                        "self"
                      ]
                    },
                    "_page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "orders",
                    "_links",
                    "_page"
                  ],
                  "example": {
                    "aliases": [
                      {
                        "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                        "user_reference": "current_user_reference",
                        "label": "My prefered account",
                        "account": {
                          "schema": "SEPA",
                          "iban": "FR8530003000307599775722N09"
                        }
                      },
                      {
                        "id": "a4936e95-918b-4301-a907-e5040814fec1",
                        "user_reference": "current_user_reference",
                        "label": "My secondary account",
                        "account": {
                          "schema": "SEPA",
                          "iban": "FR8530003000307599775722N09"
                        }
                      }
                    ],
                    "_links": [
                      {
                        "self": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                      },
                      {
                        "first": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                      },
                      {
                        "last": "https://pay.oxlin.io/v1/reporting/orders?page=10"
                      },
                      {
                        "next": "https://pay.oxlin.io/v1/reporting/orders?page=2"
                      }
                    ],
                    "_page": {
                      "size": "2",
                      "total_elements": "20",
                      "total_pages": "10",
                      "number": "1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/providers": {
      "get": {
        "tags": [
          "Providers"
        ],
        "summary": "Return a list of providers.\n",
        "description": "Get the list of `providers` that can be used to initiate payments.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/PaymentCapabilitiesParam"
          },
          {
            "$ref": "#/components/parameters/AppToAppSupportParam"
          },
          {
            "$ref": "#/components/parameters/CountryCodeParam"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of providers.",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Providers response.\n",
                  "type": "object",
                  "properties": {
                    "providers": {
                      "description": "List of providers.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProviderItemInternal"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "first": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "last": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "next": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "prev": {
                          "$ref": "#/components/schemas/GenericLink"
                        }
                      },
                      "required": [
                        "self"
                      ]
                    },
                    "_page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "providers",
                    "_links",
                    "_page"
                  ],
                  "example": {
                    "providers": [
                      {
                        "bic": "BICTEST1",
                        "name": "Test Bank 1",
                        "country_codes": [
                          "FR"
                        ],
                        "base_url": "https://www.testbank1.com",
                        "payment_capabilities": [
                          "SINGLE_PAYMENT",
                          "SINGLE_INSTANT_PAYMENT"
                        ],
                        "logo_url": "https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png"
                      },
                      {
                        "bic": "BICTEST2",
                        "name": "Test Bank 2",
                        "country_codes": [
                          "FR"
                        ],
                        "base_url": "https://www.testbank2.com",
                        "payment_capabilities": [
                          "SINGLE_INSTANT_PAYMENT"
                        ],
                        "logo_url": "https://static.oxlin.io/common/pictures/providers_logos/BICTEST2.png"
                      }
                    ],
                    "_links": [
                      {
                        "self": "https://pay.oxlin.io/v1/providers?page=1"
                      },
                      {
                        "first": "https://pay.oxlin.io/v1/providers?page=1"
                      },
                      {
                        "last": "https://pay.oxlin.io/v1/providers?page=10"
                      },
                      {
                        "next": "https://pay.oxlin.io/v1/providers?page=2"
                      }
                    ],
                    "_page": {
                      "size": "2",
                      "total_elements": "50",
                      "total_pages": "10",
                      "number": "1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/providers/search/": {
      "post": {
        "tags": [
          "Providers"
        ],
        "summary": "Returns a list of providers from search criterion.\n",
        "description": "Returns  `providers` based on search criterion such as\nInternational Bank Account Number (IBAN). Only 'providers' returned\nwith `payment_capabilities` can be used to initiate payments. If\n`payment_capabilities` is undefined,  Linxo Connect Payments doesn't support\nit as `payer` provider.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          }
        ],
        "requestBody": {
          "description": "Search criterion for 'providers' search.\n",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProviderSearchQueryItem"
                }
              },
              "examples": {
                "Supported provider": {
                  "value": {
                    "payer": [
                      {
                        "schema": "SEPA",
                        "iban": "FR7612345987650123456789014"
                      }
                    ]
                  }
                },
                "Unsupported provider": {
                  "value": {
                    "payer": {
                      "schema": "SEPA",
                      "iban": "FR9212345987650123456789056"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Requested providers definitions.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Search result.\n",
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProviderSearchResultItem"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "first": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "last": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "next": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "prev": {
                          "$ref": "#/components/schemas/GenericLink"
                        }
                      },
                      "required": [
                        "self"
                      ]
                    },
                    "_page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "result",
                    "_links",
                    "_page"
                  ]
                },
                "examples": {
                  "Supported provider": {
                    "value": {
                      "result": [
                        {
                          "payer": {
                            "schema": "SEPA",
                            "iban": "FR7612345987650123456789014"
                          },
                          "providers": [
                            {
                              "bic": "BICTEST1",
                              "name": "Test Bank 1",
                              "country_codes": [
                                "FR"
                              ],
                              "base_url": "https://www.testbank1.com",
                              "payment_capabilities": [
                                "SINGLE_PAYMENT",
                                "SINGLE_INSTANT_PAYMENT"
                              ],
                              "logo_url": "https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png"
                            }
                          ]
                        }
                      ],
                      "_links": [
                        {
                          "self": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                        },
                        {
                          "first": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                        },
                        {
                          "last": "https://pay.oxlin.io/v1/reporting/orders?page=10"
                        },
                        {
                          "next": "https://pay.oxlin.io/v1/reporting/orders?page=2"
                        }
                      ],
                      "_page": {
                        "size": "1",
                        "total_elements": "1",
                        "total_pages": "1",
                        "number": "1"
                      }
                    }
                  },
                  "Unsupported provider": {
                    "value": {
                      "result": [
                        {
                          "payer": {
                            "schema": "SEPA",
                            "iban": "FR9212345987650123456789056"
                          },
                          "providers": [
                            {
                              "bic": "AGRIFRPP882",
                              "name": "CRCAM DE PARIS ET D ILE DE FRANCE",
                              "country_code": [
                                "FR"
                              ],
                              "logo_url": "https://static.oxlin.io/common/pictures/providers_logos/country.png"
                            }
                          ]
                        }
                      ],
                      "_links": [
                        {
                          "self": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                        },
                        {
                          "first": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                        },
                        {
                          "last": "https://pay.oxlin.io/v1/reporting/orders?page=10"
                        },
                        {
                          "next": "https://pay.oxlin.io/v1/reporting/orders?page=2"
                        }
                      ],
                      "_page": {
                        "size": "1",
                        "total_elements": "1",
                        "total_pages": "1",
                        "number": "1"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/subscribe": {
      "post": {
        "tags": [
          "Callback webhooks"
        ],
        "summary": "Register webhook callback URL.\n",
        "description": "Register your system webhook callback URL we will call each time a resource\nwill be updated. When registered, callback URL will be called as\n`GET https://your.callback.url?resource_type=YYYYYY&resource_id=XXXXXX`\nwith `YYYYYY` the type of updated resource and `XXXXXX` its reference.\nTo know changes on the resource, you need to call the resource specific\nmethod. For instance if the resource is an order, you will call\n`GET v1/running/orders/XXXXXX`in order to get the updated object and\nmanage actions on your system accordingly.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          }
        ],
        "requestBody": {
          "description": "Definition of webhook callback to register.\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "callback_url": {
                    "$ref": "#/components/schemas/CallbackURL"
                  }
                },
                "required": [
                  "callback_url"
                ],
                "example": {
                  "callback_url": "https://domain/callback"
                }
              }
            }
          }
        },
        "callbacks": {
          "order_updated": {
            "{$request.body#/callback_url}": {
              "get": {
                "summary": "URL called on your system each time a resource such as an\n`order` will be updated.\n",
                "description": "Each time we will update a resource we will call your registered\n`callback_url` with parameters to identify\nupdated resource and no content. With that reference, you\nhave to retrieve resource to get more details about updates.\nWebhook calls are acknowledged when a response is given with\na 2XX status code. If a call times out or the status code is not 2XX,\nwe will try to notify you again using an exponential backoff policy\nwith jitter that will increase the resend interval for each failure.\nThe first attemps occurs after 10 seconds and the delay can increase\nup to 6 hours. After 3 days of failure on calling your webhook,\nnotifications attemps will stop.\n",
                "parameters": [
                  {
                    "$ref": "#/components/parameters/ResourceTypeParam"
                  },
                  {
                    "$ref": "#/components/parameters/ResourceIdParam"
                  }
                ],
                "responses": {
                  "200": {
                    "description": "As a response, when we call your server, you need to return an HTTP 2xx\nresult code with no content. Based on that answer, we will consider\nthe notification successful. If not, we will retry to invoke\nyour server during a limited period.\n"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Webhook callback successfully registered.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/unsubscribe": {
      "post": {
        "tags": [
          "Callback webhooks"
        ],
        "summary": "Unregister the webhook callback URL.\n",
        "description": "Unregister your system webhook callback URL that will be not called anymore.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/authorized_accounts": {
      "post": {
        "tags": [
          "Authorized Accounts"
        ],
        "summary": "Create an Authorized account.\n",
        "operationId": "PostAuthorizedAccounts",
        "description": "Create an Authorized account.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          }
        ],
        "requestBody": {
          "description": "Description of the Authorized account to create. Based on transmitted parameters,\nyou will be able to create a SEPA account or a FPS account with identification for a company or for a natural person\n",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthorizedAccountsItem"
              },
              "examples": {
                "SEPA account identification for a company": {
                  "value": {
                    "identification": {
                      "schema": "SEPA",
                      "iban": "FR8530003000307599775722N09",
                      "name": "MY COMPANY RIB NAME"
                    },
                    "entity": {
                      "type": "COMPANY",
                      "company_name": "MY COMPANY",
                      "national_identification": "52918756900023"
                    }
                  }
                },
                "FPS account identification for a natural person": {
                  "value": {
                    "identification": {
                      "schema": "FPS",
                      "name": "Graham Greene",
                      "sort_code": "456789",
                      "account_number": "52637826"
                    },
                    "entity": {
                      "type": "NATURAL_PERSON",
                      "firstname": "Robert",
                      "surname": "Durand",
                      "birth_date": "1978/09/13",
                      "birth_city": "Paris",
                      "birth_country": "fr"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created Authorized account.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizedAccountsItemCreate"
                },
                "examples": {
                  "SEPA account identification for a company": {
                    "value": {
                      "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                      "service_level": "FULL",
                      "identification": {
                        "schema": "SEPA",
                        "iban": "FR8530003000307599775722N09",
                        "name": "MY COMPANY RIB NAME"
                      },
                      "entity": {
                        "type": "COMPANY",
                        "company_name": "MY COMPANY",
                        "national_identification": "52918756900023"
                      }
                    }
                  },
                  "FPS account identification for a natural person": {
                    "value": {
                      "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                      "service_level": "FULL",
                      "identification": {
                        "schema": "FPS",
                        "name": "Graham Greene",
                        "sort_code": "456789",
                        "account_number": "52637826"
                      },
                      "entity": {
                        "type": "NATURAL_PERSON",
                        "firstname": "Robert",
                        "surname": "Durand",
                        "birth_date": "1978/09/13",
                        "birth_city": "Paris",
                        "birth_country": "fr"
                      }
                    }
                  }
                }
              }
            },
            "links": {
              "GetAuthorizedAccountsItemByAuthorizedAccountsItemId": {
                "operationId": "getAuthorizedAccountsItem",
                "parameters": {
                  "authorized_account_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `authorized_account_id` parameter in `GET /v1/authorized_accounts/{authorized_account_id}`\n"
              },
              "DeleteAuthorizedAccountsId": {
                "operationId": "deleteAuthorizedAccounts",
                "parameters": {
                  "authorized_account_id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as\nthe `authorized_account_id` parameter in `DELETE /v1/authorized_accounts/{authorized_account_id}`\n"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "422": {
            "$ref": "#/components/responses/422"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/v1/authorized_accounts/{authorized_account_id}": {
      "get": {
        "tags": [
          "Authorized Accounts"
        ],
        "summary": "Get a specific Authorized Account.\n",
        "operationId": "getAuthorizedAccounts",
        "description": "Retrieve a specific Authorized Account based on its unique identifier.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/AuthorizedAccountIdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "Requested Authorized account definition.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorizedAccountsItemCreate"
                },
                "examples": {
                  "SEPA account identification for a company": {
                    "value": {
                      "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                      "service_level": "FULL",
                      "identification": {
                        "schema": "SEPA",
                        "iban": "FR8530003000307599775722N09",
                        "name": "MY COMPANY RIB NAME"
                      },
                      "entity": {
                        "type": "COMPANY",
                        "company_name": "MY COMPANY",
                        "national_identification": "52918756900023"
                      }
                    }
                  },
                  "FPS account identification for a natural person": {
                    "value": {
                      "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                      "service_level": "FULL",
                      "identification": {
                        "schema": "FPS",
                        "name": "Graham Greene",
                        "sort_code": "456789",
                        "account_number": "52637826"
                      },
                      "entity": {
                        "type": "NATURAL_PERSON",
                        "firstname": "Robert",
                        "surname": "Durand",
                        "birth_date": "1978/09/13",
                        "birth_city": "Paris",
                        "birth_country": "fr"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Authorized Accounts"
        ],
        "summary": "Delete a specific Authorized account.\n",
        "operationId": "deleteAuthorizedAccounts",
        "description": "Delete a specific Authorized account based on its unique identifier.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/AuthorizedAccountIdParam"
          }
        ],
        "responses": {
          "204": {
            "description": "Authorized account successfully deleted.\n",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "415": {
            "$ref": "#/components/responses/415"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/v1/authorized_accounts/": {
      "get": {
        "tags": [
          "Authorized Accounts"
        ],
        "summary": "Returns a list of Authorized accounts.\n",
        "description": "Return a list of Authorized accounts.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-FWD-Request-ID"
          },
          {
            "$ref": "#/components/parameters/BearerAuthorization"
          },
          {
            "$ref": "#/components/parameters/PageParam"
          },
          {
            "$ref": "#/components/parameters/LimitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON array of Authorized accounts.",
            "headers": {
              "X-FWD-Request-ID": {
                "$ref": "#/components/headers/X-FWD-Request-ID"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "description": "Authorized accounts response.\n",
                  "type": "object",
                  "properties": {
                    "authorizedAccounts": {
                      "description": "List of Authorized accounts.\n",
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuthorizedAccountsItemCreate"
                      }
                    },
                    "_links": {
                      "type": "object",
                      "properties": {
                        "self": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "first": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "last": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "next": {
                          "$ref": "#/components/schemas/GenericLink"
                        },
                        "prev": {
                          "$ref": "#/components/schemas/GenericLink"
                        }
                      },
                      "required": [
                        "self"
                      ]
                    },
                    "_page": {
                      "$ref": "#/components/schemas/Page"
                    }
                  },
                  "required": [
                    "_links",
                    "_page"
                  ],
                  "example": {
                    "authorizedAccounts": [
                      {
                        "id": "054b7b60-0d85-4b91-841b-f70163cff8d4",
                        "service_level": "FULL",
                        "identification": {
                          "schema": "SEPA",
                          "iban": "FR8530003000307599775722N09",
                          "name": "MY COMPANY RIB NAME"
                        },
                        "entity": {
                          "type": "COMPANY",
                          "company_name": "MY COMPANY",
                          "national_identification": "52918756900023"
                        }
                      },
                      {
                        "id": "a4936e95-918b-4301-a907-e5040814fec1",
                        "service_level": "FULL",
                        "identification": {
                          "schema": "FPS",
                          "name": "Graham Greene",
                          "sort_code": "456789",
                          "account_number": "52637826"
                        },
                        "entity": {
                          "type": "NATURAL_PERSON",
                          "firstname": "Robert",
                          "surname": "Durand",
                          "birth_date": "1978/09/13",
                          "birth_city": "Paris",
                          "birth_country": "fr"
                        }
                      }
                    ],
                    "_links": [
                      {
                        "self": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                      },
                      {
                        "first": "https://pay.oxlin.io/v1/reporting/orders?page=1"
                      },
                      {
                        "last": "https://pay.oxlin.io/v1/reporting/orders?page=10"
                      },
                      {
                        "next": "https://pay.oxlin.io/v1/reporting/orders?page=2"
                      }
                    ],
                    "_page": {
                      "size": "2",
                      "total_elements": "20",
                      "total_pages": "10",
                      "number": "1"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "ClientCredentials": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/token",
            "refreshUrl": "/token",
            "scopes": {}
          }
        }
      }
    },
    "parameters": {
      "BasicAuthorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Basic HTTP authorization composed by `Basic` and followed after a space by `credentials`, where\n`credentials` is the Base64 encoding of client_id and client_password joined by a single colon.\n",
        "required": true,
        "example": "Basic lifiGPGOIGpiufOIUGPIGpiuGOIgoiJHPOIGihIUGOPIHoig",
        "schema": {
          "type": "string"
        }
      },
      "X-FWD-Request-ID": {
        "name": "X-FWD-Request-ID",
        "in": "header",
        "description": "ID of the request, unique to the call, as determined by the initiating\nparty and transmitted to the ASPSP.\n",
        "required": true,
        "example": "99391c7e-ad88-49ec-a2ad-99ddcb1f7721",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "BearerAuthorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Client credential OAuth2 authorization bearer. Composed by `Bearer` followed after\na space by the access token retrieved using `/token` endpoint.\n",
        "required": true,
        "example": "Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI3OTI4ZDExZGIxYTc4Nzg0NDFiOSIsImlzcyI6Imh0dHBzOi8vc2FuZGJveC1hdXRoLm94bGluLmlvIiwic3ViIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiYXVkIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiZXhwIjoxNTk0MTk3ODE0LCJpYXQiOjE1OTQxOTQyMTQsInNjb3BlIjoidXNlcnNfY3JlYXRlIHByb2ZpbGUgb3BlbmlkIn0.QFhD4VxSV1kzoBmjbRK5gi1r1Mf5hP6XbuTA8jsE7EQ8tdihTYAmpjyCDat2l8gyssinXMFlUOEaT0pnE_D1svDQWj-AGjOqj3_fmGJw1FAMaHfGvXCKBh3CTmNpCsd0fiQr6ocjI12DFYxVyK1fSFic-ix24kcEE_e7Z8AADI0jz_1z3Ls1rEMsqxvGk9pyZLJvum5xMWS9ZEWUBhjEZjSDlta_d9H8C5rF3GCW5NnDDyUDP0PZ1oQmR6ZIBY6rlASpq6n_VaRXR96koK00BZTLlwDwt8VUOQqDktIUc6h8MxRv4UFQmHYkOyIHZREsECwqPIlmU1hRzXH6qHqNtTIwJG0u9ccdioBTQzgnbYoLSGbCFgP1OUS95f2BbiQ633t89PfPV9Eioah5AaisuV4vudAsoUYAVnb04LAMpagI6Ym8bbp-b2_SuPBedtvtjBCxgZI7fnkw1JFGT5Io3ZNMn93AhAMXVdqxSqPR3lswB_2I3EK7fasLLFnJYcTZdgAqXvOEDUlI25cRmPIE4kik8c2Qz2V_oYsdFCWdW9acQ40Rq56JD2fJWPm0jYlncBmPJ2gSrinA-j--jyatnYoy7kBcGxfr_SG3vAwS03L7z-Aiowbdl9Bjvn3UXPqZFDc8tGSOLhBLD7JQxtIswlXo43huDTCya86tBgNfHm4",
        "schema": {
          "type": "string"
        }
      },
      "OrderIdParam": {
        "name": "order_id",
        "in": "path",
        "description": "Unique identifier of an order.\n",
        "required": true,
        "example": "14d51b74-175a-11eb-adc1-0242ac120002",
        "schema": {
          "$ref": "#/components/schemas/OrderId"
        }
      },
      "ClientIdParam": {
        "name": "client_id",
        "in": "query",
        "description": "Client identifier of the owner of referenced `orders`.\n",
        "required": true,
        "example": "c93a95fc-602c-4a63-8df5-06e1c2a06253",
        "schema": {
          "type": "string"
        }
      },
      "Language": {
        "name": "locale",
        "in": "query",
        "description": "Browser language to use in form:\n- language-code_language-variant\n- language-code\nBrowser language to use with ISO-639 two letters language code optional\nfollowed by _ and the two letters ISO-3166 country code (override\nbrowser language detection):\n- language-code_country_code\n- language-code\nValid values samples:\n- `en`\n- `en_EN`, `en_GB`, `en_US`\n- `fr`\n- `fr_FR`\n",
        "required": false,
        "example": "en_EN",
        "schema": {
          "type": "string"
        }
      },
      "LanguageDeprecated": {
        "deprecated": true,
        "name": "lng",
        "in": "query",
        "description": "Replaced by `locale`. Browser language to use in form:\n- language-code_language-variant\n- language-code\n\nValid values samples:\n- `en`\n- `en_EN`, `en_GB`, `en_US`\n- `fr`\n- `fr_FR`\n",
        "required": false,
        "example": "en_EN",
        "schema": {
          "type": "string"
        }
      },
      "Countries": {
        "name": "countries",
        "in": "query",
        "description": "Restricted list of bank countries the user is asked to connect to. Filter\nis composed by a list of ISO-3166 Alpha-2 countries descriptor.\nIf undefined, all available banks will be available.\n",
        "required": false,
        "example": "fr, pt",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CountryCode"
          }
        }
      },
      "FavoriteProviders": {
        "name": "favorite_providers",
        "in": "query",
        "description": "Define a list of favorites providers that will be displayed by default\non the bank list screen.\n- If `favorite_providers` is undefined, we display the list of most used banks\nwith a “See all banks” button used to display the\nentire bank list.\n- If `favorite_providers` is defined with valid BIC list, we display banks\nwithin the list with a “See all banks” button used to display\nthe entire bank list.\n- If `favorite_providers` is defined with <EMPTY> value or only invalid\nBIC list, we display the entire bank list without any “See all banks” button.\n",
        "required": false,
        "example": "AGRIFRP1ACF,SIBLFRPP,CMCIFRPA",
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PayerBic"
          }
        }
      },
      "Title": {
        "name": "title",
        "in": "query",
        "description": "Override widget displayed title.\n",
        "required": false,
        "example": "New title",
        "schema": {
          "type": "string"
        }
      },
      "TermsHeader": {
        "name": "terms_header",
        "in": "query",
        "description": "Terms and conditions page header customized value. Use `%MAIL%` text\nif you need to integrate user mail.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Vous serez redirigé vers votre banque en ligne pour vous authentifier\net valider votre paiement. Une fois le paiement réalisé vous recevrez\nune confirmation par email à l'adresse %MAIL%\n",
        "schema": {
          "type": "string",
          "maxLength": 128
        }
      },
      "TermsFooter": {
        "deprecated": true,
        "name": "terms_footer",
        "in": "query",
        "description": "Terms and conditions page footer customized value.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Oxlin établissement de paiement agréé par l’ACPR - Banque de France\nsous le numéro 16928.\n",
        "schema": {
          "type": "string",
          "maxLength": 128
        }
      },
      "TermsBody": {
        "name": "terms_body",
        "in": "query",
        "description": "Terms and conditions page body customized value using markdown syntax.\nTo link static terms and conditions page, use\n`[link description](https://link.destination)`.\n> Customization not available if you are using Oxlin agreement.\n\n> When using your agreement, if not set we won't display terms page. As\n> a consequence, you won't have access to folowing capabilities:\n> - Ask user to register IBAN.\n> - Display a QR Code on non mobile device if AppToApp flow is\n> supported by the bank.\n",
        "required": false,
        "example": "Ce service est opéré par Linxo Connect, établissement de paiement agrée par l'ACPR.  En continuant vous acceptez les conditions générales de Linxo Connect Payments et  la politique de confidentialité Linxo Connect\n",
        "schema": {
          "type": "string",
          "maxLength": 512
        }
      },
      "InstantPaymentHeader": {
        "name": "instant_payment_header",
        "in": "query",
        "description": "Instant payment feature page header customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Choisissez le type de virement\n",
        "schema": {
          "type": "string",
          "maxLength": 512
        }
      },
      "InstantPaymentText": {
        "name": "instant_payment_text",
        "in": "query",
        "description": "Instant payment feature page header customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "En choisissant de réaliser un virement instantané...\n",
        "schema": {
          "type": "string",
          "maxLength": 128
        }
      },
      "SinglePaymentText": {
        "name": "single_payment_text",
        "in": "query",
        "description": "Instant payment feature page header customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Réaliser un virement standard...\n",
        "schema": {
          "type": "string",
          "maxLength": 128
        }
      },
      "InstantPaymentFooterDeprecated": {
        "deprecated": true,
        "name": "instant_payment_footer",
        "in": "query",
        "description": "Instant payment feature page footer customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Le virement instantané peut vous être facturé par votre banque.\n",
        "schema": {
          "type": "string",
          "maxLength": 512
        }
      },
      "ProvidersHeader": {
        "deprecated": true,
        "name": "providers_header",
        "in": "query",
        "description": "Provider search page header customized value.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Rechercher votre banque :\n",
        "schema": {
          "type": "string",
          "maxLength": 64
        }
      },
      "ProvidersSearchHint": {
        "name": "providers_search_hint",
        "in": "query",
        "description": "Provider search page input placeholder customized value.\n> Customization not available if you are using Oxlin agreement.\n",
        "required": false,
        "example": "Rechercher…\n",
        "schema": {
          "type": "string",
          "maxLength": 64
        }
      },
      "Font": {
        "name": "font",
        "in": "query",
        "description": "Font to use in page (CSS representation).\n",
        "required": false,
        "example": "italic small-caps bold 12px/30px Georgia, serif",
        "schema": {
          "type": "string"
        }
      },
      "FontColor": {
        "name": "font_color",
        "in": "query",
        "description": "Font color to use in page (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "FontSecondaryColor": {
        "name": "font_secondary_color",
        "in": "query",
        "description": "Font secondary color to use in page for buttons (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "BackgroundColor": {
        "name": "background_color",
        "in": "query",
        "description": "Background color (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "ElementsFont": {
        "name": "elements_font",
        "in": "query",
        "description": "Font to use for primary elements (CSS representation).\n",
        "required": false,
        "example": "italic small-caps bold 12px/30px Georgia, serif",
        "schema": {
          "type": "string"
        }
      },
      "ElementsColor": {
        "name": "elements_color",
        "in": "query",
        "description": "Primary elements color to use (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "ForegroundColorDeprecated": {
        "deprecated": true,
        "name": "foreground_color",
        "in": "query",
        "description": "Replaced by `elements_color`. Foreground color (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "ElementsFontColor": {
        "name": "elements_font_color",
        "in": "query",
        "description": "Font color to use for primary elements (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "SecondaryElementsColor": {
        "name": "secondary_elements_color",
        "in": "query",
        "description": "Secondary elements color to use (CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "SecondaryElementsFontColor": {
        "name": "secondary_elements_font_color",
        "in": "query",
        "description": "Font color to use for secondary elements(CSS representation).\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "DisplayBorder": {
        "name": "display_border",
        "in": "query",
        "description": "When false, page is rendered without any border.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "Light": {
        "name": "light",
        "in": "query",
        "description": "Depending on regulation status and constraints, when true, we will hide\npayment summary.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "ButtonRadius": {
        "name": "button_radius",
        "in": "query",
        "description": "Buttons radius value in `px`.\n",
        "required": false,
        "schema": {
          "type": "number",
          "default": 5
        }
      },
      "CancelURL": {
        "name": "cancel_url",
        "in": "query",
        "description": "When set, widget will display a cancel link redirecting to that URL.\n",
        "required": false,
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/URL"
            }
          ]
        }
      },
      "AskForAlias": {
        "name": "ask_for_alias",
        "in": "query",
        "description": "When set to true in association with a valid value for\n`orders.user_reference`, payer is asked to register is\naccount just before redirecting him to his bank\nauthentication flow.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "AskForIBAN": {
        "name": "ask_for_iban",
        "in": "query",
        "description": "When set to true, payer can directly type its payment account IBAN.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "DisplayQRCode": {
        "name": "display_qr_code",
        "in": "query",
        "description": "When set to true, if the bank support app to app flow and if the payment page is\nnot displayed using a mobile phone, we will display a QR code giving a way to optimize\npayment flow opening the bank application.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "DisplayHeader": {
        "name": "display_header",
        "in": "query",
        "description": "When false, page is rendered without header including back arrow.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "ItemBorderColor": {
        "name": "item_border_color",
        "in": "query",
        "description": "Items border color using (CSS representation), no border if undefined.\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "ItemBorderRadius": {
        "name": "item_border_radius",
        "in": "query",
        "description": "Item border radius value in `px`.\n",
        "required": false,
        "schema": {
          "type": "number",
          "default": 0
        }
      },
      "ItemArrowColor": {
        "name": "item_arrow_color",
        "in": "query",
        "description": "Items arrow color using (CSS representation), no arrow if undefined.\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "ButtonArrowColor": {
        "name": "button_arrow_color",
        "in": "query",
        "description": "Button arrow color using (CSS representation), no arrow if undefined.\n",
        "required": false,
        "example": "Blue",
        "schema": {
          "type": "string"
        }
      },
      "ButtonSize": {
        "name": "button_size",
        "in": "query",
        "description": "Button size:\n- `SMALL`: Button size is small.\n- `LARGE`: Button size is large.\n",
        "required": false,
        "example": "LARGE",
        "schema": {
          "type": "string",
          "enum": [
            "SMALL",
            "LARGE"
          ],
          "default": "SMALL"
        }
      },
      "ButtonAlignment": {
        "name": "button_alignment",
        "in": "query",
        "description": "Button size:\n- `LEFT_TOP`: horizontal alignment left, vertical alignement top.\n- `CENTER_TOP`: horizontal alignment center, vertical alignement top.\n- `RIGHT_TOP`: horizontal alignment right, vertical alignement top.\n- `LEFT_BOTTOM`: horizontal alignment left, vertical alignement bottom.\n- `CENTER_BOTTOM`: horizontal alignment center, vertical alignement bottom.\n- `RIGHT_BOTTOM`: horizontal alignment right, vertical alignement bottom.\n",
        "required": false,
        "example": "CENTER_BOTTOM",
        "schema": {
          "type": "string",
          "enum": [
            "LEFT_TOP",
            "CENTER_TOP",
            "RIGHT_TOP",
            "LEFT_BOTTOM",
            "CENTER_BOTTOM",
            "RIGHT_BOTTOM"
          ],
          "default": "LEFT_BOTTOM"
        }
      },
      "PageParam": {
        "name": "page",
        "in": "query",
        "description": "Page number in the pagination.\n",
        "required": false,
        "example": "7",
        "schema": {
          "type": "number",
          "x-constraint": {
            "positive": true
          }
        }
      },
      "LimitParam": {
        "name": "limit",
        "in": "query",
        "description": "Max number of items to retrieve (limited to 500).\n",
        "required": false,
        "example": "20",
        "schema": {
          "type": "number",
          "default": 100,
          "maximum": 500,
          "x-constraint": {
            "positive": true
          }
        }
      },
      "FromCreationDateParam": {
        "name": "date_from",
        "in": "query",
        "description": "Inclusive minimal creation date.\nISO 8601 format is used. Default value when not set will be\nthe value giving maximum history size.\n",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-12T13:34:45+01:00"
        }
      },
      "ToCreationDateParam": {
        "name": "date_to",
        "in": "query",
        "description": "Inclusive maximal creation date.\nISO 8601 format is used. Default value when not set will be\ncurrent date-time.\n",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-12T13:34:45+01:00"
        }
      },
      "FromExecutionDateParam": {
        "name": "execution_date_from",
        "in": "query",
        "description": "Inclusive minimal execution date of a payment instruction.\nISO 8601 format is used. Default value when not set will be\nthe value giving maximum history size.\n",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time",
          "example": "2019-12-12T13:34:45+01:00"
        }
      },
      "OrderStatusParam": {
        "name": "order_status",
        "in": "query",
        "description": "Orders status list.\n",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/OrderStatus"
          }
        }
      },
      "UserReferenceParam": {
        "name": "user_reference",
        "in": "query",
        "description": "Unique identifier of a user.\n",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/UserReference"
        }
      },
      "AliasIdParam": {
        "name": "alias_id",
        "in": "path",
        "description": "Unique identifier of an alias.\n",
        "required": true,
        "example": "a58390d9-4672-46d1-8cca-d6fc4ebc652e",
        "schema": {
          "$ref": "#/components/schemas/AliasId"
        }
      },
      "UserReferenceRequiredParam": {
        "name": "user_reference",
        "in": "query",
        "description": "Unique identifier of a user.\n",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UserReference"
        }
      },
      "PaymentCapabilitiesParam": {
        "name": "payment_capabilities",
        "in": "query",
        "description": "Payment capabilities list. OR condition is used when multiple values are set.\n",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/PaymentCapability"
          }
        }
      },
      "AppToAppSupportParam": {
        "name": "app_to_app_support",
        "in": "query",
        "description": "AppToApp support list. AND condition is used when multiple values are set.\n",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AppToAppSupport"
          }
        }
      },
      "CountryCodeParam": {
        "name": "country_codes",
        "in": "query",
        "description": "Provider countries market supported.\n",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/CountryCode"
          }
        }
      },
      "ResourceTypeParam": {
        "name": "resource_type",
        "in": "path",
        "description": "Type of a resource.\n",
        "required": true,
        "example": "ORDERS",
        "schema": {
          "$ref": "#/components/schemas/ResourceType"
        }
      },
      "ResourceIdParam": {
        "name": "resource_id",
        "in": "path",
        "description": "Unique identifier of a resource.\n",
        "required": true,
        "example": "34b4b62a-1363-11eb-adc1-0242ac120002",
        "schema": {
          "$ref": "#/components/schemas/ResourceId"
        }
      },
      "AuthorizedAccountIdParam": {
        "name": "authorized_account_id",
        "in": "path",
        "description": "AuthorizedAccounts Unique identifier .\n",
        "required": true,
        "example": "c93a95fc-602c-4a63-8df5-06e1c2a06254",
        "schema": {
          "$ref": "#/components/schemas/AuthorizedAccountId"
        }
      }
    },
    "schemas": {
      "TokenCreate": {
        "description": "Token creation characteristics.\n",
        "type": "object",
        "properties": {
          "grant_type": {
            "description": "Describe type of requested grant:\n  - `client_credentials`: client credential grant type is the only supported value.\n",
            "type": "string",
            "enum": [
              "client_credentials"
            ]
          }
        }
      },
      "TokenItem": {
        "description": "Describe the authorisation token.\n",
        "type": "object",
        "properties": {
          "access_token": {
            "description": "Access token to use as authorisation bearer.\n",
            "type": "string"
          },
          "scope": {
            "description": "Access token scope.\n",
            "type": "string"
          },
          "token_type": {
            "description": "Define access token type:\n- `Bearer`: Client credential bearer.\n",
            "type": "string",
            "enum": [
              "Bearer"
            ]
          },
          "expires_in": {
            "description": "Token will expires after the number of seconds defined by the field.\n",
            "type": "integer"
          }
        },
        "required": [
          "access_token",
          "scope",
          "token_type",
          "expires_in"
        ],
        "example": {
          "access_token": "eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJjYjYwY2E3Y2Q2NjNmMTMxOTdiZiIsImlzcyI6Imh0dHBzOi8vc2FuZGJveC1hdXRoLm94bGluLmlvIiwic3ViIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiYXVkIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiZXhwIjoxNTk0MjIxMjQ5LCJpYXQiOjE1OTQyMTc2NDksInNjb3BlIjoidXNlcnNfY3JlYXRlIHByb2ZpbGUgb3BlbmlkIn0.CzwmfvHa46M0RHHtYqlNFBSovbrKOv8ezZM5sroJzyUU0aPHHW2aoFO6zwx5vMW1Sox7MqD-Jhs7R7pff_-qr1DBDsxvvCO-DQZw7SjW5DmDjQVyaQlpUiwASOYJyZIyd3K71kROkU6TeL9i2OR7yLDtpj_56fTZWxg9Y1vGv-bUoPhXx2JgzvqyrzfDoadJ6s7_dOxoQFpsYM5lqIWVuWx82uXWL6cWB4usynKJcGe6k6EGLxwzJ0OqmBd1WnPSvywMqzMI5QCTZ7DkFJw2AGnPy-C8keZBL2BwJIzgiaH6j_80P8NdisxxcQlRHz7VTrvwF1rqxgT2adU8Jtt_RCKlvZ44jxCN7fDk28sot2LEAMC1VC3A0BWrhY6EX84hUW_ZJIFJG6753xCDzZ9bZcYVjC5yW0DCcT8CP3xXeOkIAdo6ZpfbMgntpNGk0ZPyiTUhCwr9s17t5DuDyCCwJ5O4eZhHqYRhRspExvuFtbldIsCYDARvBZe-EQ3jjkuFnCHmd-whZ5qcd6sEiRferthzC05NfufFitGoVLYrBYSHeaUE8mNeSgAeadoBrBxDTjOq_B2NdoiGo3UbVD2oi7As7WfohF8SSNXHqRJId3vcQBx4yxzilU2QfoFnfhJtbDcR2xElg36rJGLWLZQLpd7qQkuw_ADPddsJVxSqND4",
          "token_type": "Bearer",
          "expires_in": "3600"
        }
      },
      "ErrorModel": {
        "description": "Generic error report structure.\n",
        "type": "object",
        "properties": {
          "error": {
            "description": "Error code (can be used to manage error on the client).\n",
            "type": "string",
            "enum": [
              "BANK_ERROR",
              "FORMAT_ERROR",
              "BAD_PARAMETER",
              "INTERNAL_ERROR",
              "RESOURCE_UNKNOWN",
              "NO",
              "invalid_request",
              "invalid_client"
            ]
          },
          "error_description": {
            "description": "Human readable english text that describes the error (can be used in\nlogs).\n",
            "type": "string",
            "maxLength": 512
          },
          "id": {
            "description": "Identifies the resource (when applicable).\n",
            "type": "string",
            "maxLength": 140
          }
        },
        "required": [
          "error",
          "error_description"
        ],
        "example": {
          "error": "PARAMETER_MISSING",
          "error_description": "Missing request header 'X-FWD-Request-ID' for method parameter of type String",
          "id": "/v3/order/1234567/"
        }
      },
      "UserReference": {
        "description": "Unique user reference.\n",
        "type": "string",
        "maxLength": 36,
        "example": "User567498s"
      },
      "InputPayerBic": {
        "description": "Payer bank identifier code allocated to a financial institution by the ISO 9362 Registration\nAuthority as described in ISO 9362 \"Banking - Banking telecommunication\nmessages - Business identification code (BIC)\". If no value is transmitted, if transmitted\nvalue is invalid or referenced bank not supported, order creation will fail.\n",
        "type": "string",
        "pattern": "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$",
        "example": "AXABFRPP"
      },
      "InstantPaymentType": {
        "description": "Define expectation according instant payment:\n- `EXPECTED`: only instant payment can be offered to initialize a payment.\n- `USER_CHOICE`: debtor user can choose in the case the bank support instant payment.\n- `NO`: only non instant payment can be offered to initialize a payment.\n",
        "type": "string",
        "enum": [
          "EXPECTED",
          "USER_CHOICE",
          "NO"
        ],
        "default": "NO",
        "example": "EXPECTED"
      },
      "SensitiveData": {
        "description": "Define if Linxo Connect Payments API return sensitive data:\n- `ALL`: all available data are returned with customer agreement.\n- `NONE`: no sensitive data are returned, payer and beneficiary IBAN are masked.\n",
        "type": "string",
        "enum": [
          "ALL",
          "NONE"
        ],
        "default": "ALL",
        "example": "ALL"
      },
      "PayerEMail": {
        "description": "Payer email used to send payment notifications.\n> A valid email is required when using Oxlin agreement. Because parameter\n> is not mandatory, in such case user will be asked to type his email\n> during payment flow.\n",
        "type": "string",
        "format": "email",
        "example": "payer@email.com"
      },
      "StartDate": {
        "description": "For single or multiples payments, instruction date, for a standing order,\nstart date:\n- now if undefined,\n- will be requalified to now if the payer bank doesn't support instruction date,\n- will be changed to the oldest possible date supported by payer bank if transmitted\ndate exceed maximum bank value.\nAs a consequence, when using that field you have to check how it have be updated or not after\npayment was authorized.\nISO 8601 extended format is used.\n",
        "type": "string",
        "format": "date-time"
      },
      "DateUpdateDirection": {
        "description": "Define how to update the date when the bank limit it for instance refusing\na Target 2 calendar date :\n- `NONE`: don’t update the date (reject the date if it is not supported by the bank).\n- `BOTH`: find a new date before or after the given date (keep closest).\n",
        "type": "string",
        "enum": [
          "NONE",
          "BOTH"
        ],
        "default": "BOTH",
        "example": "NONE"
      },
      "Frequency": {
        "description": "Standing orders frequency:\n- `DAILY`: Daily.\n- `WEEKLY`: Weekly.\n- `EVERY_TWO_WEEKS`: Every two weeks.\n- `MONTHLY`: Monthly.\n- `EVERY_TWO_MONTHS`: Every two months.\n- `QUARTERLY`: Quarterly.\n- `SEMI_ANNUAL`: Semi annual.\n- `YEAR`: Annual.\n",
        "type": "string",
        "enum": [
          "DAILY",
          "WEEKLY",
          "EVERY_TWO_WEEKS",
          "MONTHLY",
          "EVERY_TWO_MONTHS",
          "QUATERLY",
          "SEMI_ANNUAL",
          "YEAR"
        ],
        "example": "DAILY"
      },
      "EndDate": {
        "description": "End date for standing order, infinite if undefined. ISO 8601 extended\nformat is used.\n",
        "type": "string",
        "format": "date-time"
      },
      "PaymentSchema": {
        "description": "Define payment schema:\n- `SEPA`: SEPA payment.\n- `FPS`: Faster Payment, UK instant payment schema.\n- `ALIAS`: An alias representing registered account .\n\n> `ALIAS` value is only available in a context you can use an `ALIAS`,\n> as a consequence  it can't be valid when defining an `ALIAS`.\n",
        "type": "string",
        "enum": [
          "SEPA",
          "FPS",
          "ALIAS"
        ],
        "example": "SEPA"
      },
      "IBANPayer": {
        "description": "International Bank Account Number (IBAN) - identification used\ninternationally by financial institutions to uniquely identify the\naccount of a customer.\n\n> Using Oxlin agreements, only declared beneficiaries or payer IBAN can\n> be used depending on the contract you've subscribed. If your payer\n> is rejected, check if you've declared when opening your Linxo Connect Payments\n> contract. Contact Oxlin support otherwise.\n",
        "type": "string",
        "pattern": "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$",
        "example": "FR7612345987650123456789014"
      },
      "SEPAPayerAccountItemCreate": {
        "description": "Represent a SEPA payer account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "iban": {
                "$ref": "#/components/schemas/IBANPayer"
              }
            },
            "required": [
              "schema",
              "iban"
            ],
            "example": {
              "schema": "SEPA",
              "iban": "FR7612345987650123456789014"
            }
          }
        ]
      },
      "FPSPayerAccountItemCreate": {
        "description": "Represent a Faster Payment payer or beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "name": {
                "description": "Name of account holder.\n",
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code of payer account: six digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "account_number": {
                "description": "Number of account: eight digits only, no whitespace or punctuation\n",
                "type": "string"
              }
            },
            "required": [
              "schema",
              "name",
              "sort_code",
              "account_number"
            ],
            "example": {
              "schema": "FPS",
              "name": "John Dupont",
              "sort_code": "102030",
              "account_number": "88881234"
            }
          }
        ]
      },
      "AliasId": {
        "description": "Universally Unique IDentifier for `Alias`.\n",
        "type": "string",
        "maxLength": 36,
        "example": "c4311507-13a3-407c-82c8-b965a0967f5c"
      },
      "AliasPayerItemCreate": {
        "description": "Reference an account alias.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "alias_id": {
                "$ref": "#/components/schemas/AliasId"
              }
            },
            "required": [
              "schema",
              "alias_id"
            ]
          }
        ]
      },
      "PayerCreate": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SEPAPayerAccountItemCreate"
          },
          {
            "$ref": "#/components/schemas/FPSPayerAccountItemCreate"
          },
          {
            "$ref": "#/components/schemas/AliasPayerItemCreate"
          }
        ],
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "SEPA": "#/components/schemas/SEPAPayerAccountItemCreate",
            "FPS": "#/components/schemas/FPSPayerAccountItemCreate",
            "ALIAS": "#/components/schemas/AliasPayerItemCreate"
          }
        },
        "required": [
          "schema"
        ]
      },
      "URL": {
        "type": "string",
        "maxLength": 512
      },
      "RedirectURL": {
        "description": "The URL where the user should be redirected after authorising the\npayment. We will append the order_id parameter to the URL when\nredirecting the user to: `GET https://your.redirect.url?order_id=XXXXXX`\nwith `XXXXXX` the reference of the concerned `order`. To know status\nof the order, to get the up to date object and manage actions on your\nsystem you need to either call:\n- `GET /v1/running/orders/XXXXXX`: during the realtime\nauthentication flow with the payer when you need to take a live\ndecision. That method will work during a limited time after\nauthentication was done.\n- `GET /v1/reporting/orders/XXXXXX`: in all other cases when status\ninformation have no impact on realtime decision.\n\nNote the URL is not limited to `http` or `https` scheme name. If requested,\nyou can use any scheme name such as a mobile application specific scheme name.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "AmountValue": {
        "description": "The amount given with fractional digits, where fractions must be\ncompliant to the currency definition. Up to 14 significant figures.\nNegative amounts are signed by minus. The decimal separator is a dot.\n\nValid representations for amount with up to two decimals are:\n  - 1056\n  - 5768.2\n  - -1.50\n  - 5877.78\n",
        "type": "string",
        "pattern": "^-?[0-9]{1,14}(\\.[0-9]{1,3})?$",
        "example": "5877.78"
      },
      "CurrencyCode": {
        "description": "Specifies the currency of the amount.\n\nA code allocated to a currency by a Maintenance Agency under\nan international identification scheme, as described in the\nlatest edition of the international standard ISO 4217 \"Codes\nfor the representation of currencies and funds\".\n",
        "type": "string",
        "pattern": "^[A-Z]{3,3}$",
        "example": "EUR"
      },
      "IBANBeneficiary": {
        "description": "International Bank Account Number (IBAN) - identification used\ninternationally by financial institutions to uniquely identify the\naccount of a customer.\n\n> For payment using `Sandbox Mode`, you have to use\n> `FR8530003000307599775722N09` as `beneficiary.iban` and any value\n> as `beneficiary.name`. When bank will be chosen, bank emulation page\n> will give you following choices:\n> - `SUBMITTED` will emulate a payment authorised but not yet executed by the bank.\n> - `REJECTED` will emulate a payment refused by the bank.\n> - `EXECUTED` will emulate a payment immediately executed by the bank.\n> - `SUBMITTED and EXECUTED (with delay)` will emulate a real payment flow\n> where the bank authorise it in a first time and execute it with a\n> 2 minutes delay in a second time.\n\n> Using Oxlin agreements, only declared beneficiaries or payer IBAN can\n> be used depending on the contract you've subscribed. If your beneficiary\n> is rejected, check if you've declared it when opening your Linxo Connect Payments\n> contract. Contact Oxlin support otherwise.\n",
        "type": "string",
        "pattern": "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$",
        "example": "FR7612345987650123456789014"
      },
      "BeneficiaryBic": {
        "deprecated": true,
        "description": "Field not used anymore. Will be removed in a future version.\nBeneficiary bank identifier code allocated to a financial institution by the ISO 9362\nRegistration Authority as described in ISO 9362 \"Banking - Banking telecommunication\nmessages - Business identification code (BIC)\". Value is required or not depending on\nthe payment context.\n",
        "type": "string",
        "pattern": "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$",
        "example": "AXABFRPP"
      },
      "ComplementaryName": {
        "description": "Free beneficiary complementary name you can use to enrich beneficiary name.\nThat value will be displayed in addition to the name but won't be transmitted to the payer bank.\n",
        "type": "string",
        "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
      },
      "SEPABeneficiaryAccountItemCreate": {
        "description": "Represent a SEPA beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "iban": {
                "$ref": "#/components/schemas/IBANBeneficiary"
              },
              "name": {
                "description": "Name identifying beneficiary.\n",
                "type": "string",
                "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
              },
              "bic": {
                "$ref": "#/components/schemas/BeneficiaryBic"
              },
              "complementary_name": {
                "$ref": "#/components/schemas/ComplementaryName"
              }
            },
            "required": [
              "schema",
              "iban",
              "name"
            ],
            "example": {
              "schema": "SEPA",
              "iban": "FR7612345987650123456789014",
              "name": "Jean Dupond"
            }
          }
        ]
      },
      "FPSBeneficiaryAccountItemCreate": {
        "description": "Represent a Faster Payment payer or beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "name": {
                "description": "Name of account holder.\n",
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code of payer account: six digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "account_number": {
                "description": "Number of account: eight digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "complementary_name": {
                "$ref": "#/components/schemas/ComplementaryName"
              }
            },
            "required": [
              "schema",
              "name",
              "sort_code",
              "account_number"
            ],
            "example": {
              "schema": "FPS",
              "name": "John Dupont",
              "sort_code": "102030",
              "account_number": "88881234"
            }
          }
        ]
      },
      "AliasBeneficiaryItemCreate": {
        "description": "Reference an account alias.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "alias_id": {
                "$ref": "#/components/schemas/AliasId"
              },
              "complementary_name": {
                "$ref": "#/components/schemas/ComplementaryName"
              }
            },
            "required": [
              "schema",
              "alias_id"
            ]
          }
        ]
      },
      "BeneficiaryCreate": {
        "description": "Beneficiary account for instructed payments.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SEPABeneficiaryAccountItemCreate"
          },
          {
            "$ref": "#/components/schemas/FPSBeneficiaryAccountItemCreate"
          },
          {
            "$ref": "#/components/schemas/AliasBeneficiaryItemCreate"
          }
        ],
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "SEPA": "#/components/schemas/SEPABeneficiaryAccountItemCreate",
            "FPS": "#/components/schemas/FPSBeneficiaryAccountItemCreate",
            "ALIAS": "#/components/schemas/AliasBeneficiaryItemCreate"
          }
        },
        "required": [
          "schema"
        ]
      },
      "Label": {
        "description": "Text transmitted to beneficiary bank.\n",
        "type": "string",
        "pattern": "^[a-zA-Z0-9\\- ?:().,+]{1,50}$",
        "example": "Payment initiation label"
      },
      "InstructionItemCreate": {
        "description": "Represent a single or standing order payment instruction. Resulting\ninstructed payment transmitted to payer bank will be represented through\n`payments` content.\n",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountValue"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/BeneficiaryCreate"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          }
        },
        "required": [
          "amount",
          "currency",
          "beneficiary",
          "label"
        ]
      },
      "SingleInstructionOrder": {
        "description": "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n",
        "type": "object",
        "properties": {
          "user_reference": {
            "$ref": "#/components/schemas/UserReference"
          },
          "bic": {
            "$ref": "#/components/schemas/InputPayerBic"
          },
          "instant_payment": {
            "$ref": "#/components/schemas/InstantPaymentType"
          },
          "sensitive_data": {
            "$ref": "#/components/schemas/SensitiveData"
          },
          "email": {
            "$ref": "#/components/schemas/PayerEMail"
          },
          "start_date": {
            "$ref": "#/components/schemas/StartDate"
          },
          "start_date_processing_direction": {
            "$ref": "#/components/schemas/DateUpdateDirection"
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "end_date": {
            "$ref": "#/components/schemas/EndDate"
          },
          "payer": {
            "$ref": "#/components/schemas/PayerCreate"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/RedirectURL"
          },
          "allof": {
            "$ref": "#/components/schemas/InstructionItemCreate"
          }
        },
        "required": [
          "redirect_url"
        ]
      },
      "MultiplesInstructionsOrder": {
        "description": "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n",
        "type": "object",
        "properties": {
          "user_reference": {
            "$ref": "#/components/schemas/UserReference"
          },
          "bic": {
            "$ref": "#/components/schemas/InputPayerBic"
          },
          "instant_payment": {
            "$ref": "#/components/schemas/InstantPaymentType"
          },
          "sensitive_data": {
            "$ref": "#/components/schemas/SensitiveData"
          },
          "email": {
            "$ref": "#/components/schemas/PayerEMail"
          },
          "start_date": {
            "$ref": "#/components/schemas/StartDate"
          },
          "start_date_processing_direction": {
            "$ref": "#/components/schemas/DateUpdateDirection"
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "end_date": {
            "$ref": "#/components/schemas/EndDate"
          },
          "payer": {
            "$ref": "#/components/schemas/PayerCreate"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/RedirectURL"
          },
          "instructions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstructionItemCreate"
            }
          }
        },
        "required": [
          "instructions",
          "redirect_url"
        ]
      },
      "OrderId": {
        "description": "Universally Unique IDentifier for `Order`.\n",
        "type": "string",
        "maxLength": 36,
        "example": "53fd4a76-a95d-11ea-bb37-0242ac130002"
      },
      "PayerBic": {
        "description": "Bank identifier code allocated to a financial institution by the ISO 9362 Registration\nAuthority as described in ISO 9362 \"Banking - Banking telecommunication\nmessages - Business identification code (BIC)\".\n",
        "type": "string",
        "pattern": "^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$",
        "example": "AXABFRPP"
      },
      "OrderStatus": {
        "description": "Define order status:\n- `NEW`: Initial state, order initialized, PSU consent not done.\n- `AUTHORIZED`: Intermediary state, PSU consent was granted, payment is being processed: at least one payment is not in a final state.\n- `FAILED`: Final state, order initialisation failed.\n- `REJECTED`: Final state, PSU consent was refused, no payment will be processed.\n- `CLOSED`: Final state, PSU consent was grant, all payments were processed.\n- `EXPIRED`: Final state, an `order` in status `NEW` expires automatically after 30 days.\n",
        "type": "string",
        "enum": [
          "NEW",
          "AUTHORIZED",
          "FAILED",
          "REJECTED",
          "CLOSED",
          "EXPIRED"
        ],
        "example": "AUTHORIZED"
      },
      "SEPAPayerAccountItem": {
        "description": "Represent a SEPA payer account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "iban": {
                "$ref": "#/components/schemas/IBANPayer"
              }
            },
            "required": [
              "schema",
              "iban"
            ],
            "example": {
              "schema": "SEPA",
              "iban": "FR7612345987650123456789014",
              "name": "Jean Dupont"
            }
          }
        ]
      },
      "FPSPayerAccountItem": {
        "description": "Represent a Faster Payment payer or beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "name": {
                "description": "Name of account holder.\n",
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code of payer account: six digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "account_number": {
                "description": "Number of account: eight digits only, no whitespace or punctuation\n",
                "type": "string"
              }
            },
            "required": [
              "schema",
              "name",
              "sort_code",
              "account_number"
            ],
            "example": {
              "schema": "FPS",
              "name": "John Dupont",
              "sort_code": "102030",
              "account_number": "88881234"
            }
          }
        ]
      },
      "AliasPayerItem": {
        "description": "Reference an account alias.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "alias_id": {
                "$ref": "#/components/schemas/AliasId"
              }
            },
            "required": [
              "schema",
              "alias_id"
            ]
          }
        ]
      },
      "Payer": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SEPAPayerAccountItem"
          },
          {
            "$ref": "#/components/schemas/FPSPayerAccountItem"
          },
          {
            "$ref": "#/components/schemas/AliasPayerItem"
          }
        ],
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "SEPA": "#/components/schemas/SEPAPayerAccountItem",
            "FPS": "#/components/schemas/FPSPayerAccountItem",
            "ALIAS": "#/components/schemas/AliasPayerItem"
          }
        },
        "required": [
          "schema"
        ]
      },
      "CreationDate": {
        "description": "Object creation date and time. ISO 8601 format is used.\n",
        "type": "string",
        "format": "date-time",
        "example": "2019-12-12T13:34:45+01:00"
      },
      "AuthURL": {
        "description": "The URL your user have to open in order to realize authorisation for\nthe order. Refer to `GET /authorize/{order_id}` for details about how to\nto override language or personalise screens.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "PaymentCapability": {
        "description": "Describe type of payment.\n  - `SINGLE_PAYMENT`: Single unique payment.\n  - `SINGLE_INSTANT_PAYMENT`: Single immediate payment.\n  - `STANDING_ORDERS`: Standing orders is a recurring payment with an immutable\n  recurring amount.\n  - `BATCH_PAYMENTS`: Batch payment is a payment from a unique payer to multiple\n  beneficiaries.\n",
        "type": "string",
        "enum": [
          "SINGLE_PAYMENT",
          "SINGLE_INSTANT_PAYMENT",
          "STANDING_ORDERS",
          "BATCH_PAYMENTS"
        ]
      },
      "SEPABeneficiaryAccountItem": {
        "description": "Represent a SEPA beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "iban": {
                "$ref": "#/components/schemas/IBANBeneficiary"
              },
              "name": {
                "description": "Name identifying beneficiary.\n",
                "type": "string",
                "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
              },
              "bic": {
                "$ref": "#/components/schemas/BeneficiaryBic"
              },
              "complementary_name": {
                "$ref": "#/components/schemas/ComplementaryName"
              }
            },
            "required": [
              "schema",
              "iban",
              "name"
            ],
            "example": {
              "schema": "SEPA",
              "iban": "FR7612345987650123456789014",
              "name": "Jean Dupond"
            }
          }
        ]
      },
      "FPSBeneficiaryAccountItem": {
        "description": "Represent a Faster Payment payer or beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "name": {
                "description": "Name of account holder.\n",
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code of payer account: six digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "account_number": {
                "description": "Number of account: eight digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "complementary_name": {
                "$ref": "#/components/schemas/ComplementaryName"
              }
            },
            "required": [
              "schema",
              "name",
              "sort_code",
              "account_number"
            ],
            "example": {
              "schema": "FPS",
              "name": "John Dupont",
              "sort_code": "102030",
              "account_number": "88881234"
            }
          }
        ]
      },
      "AliasBeneficiaryItem": {
        "description": "Reference an account alias.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "alias_id": {
                "$ref": "#/components/schemas/AliasId"
              },
              "complementary_name": {
                "$ref": "#/components/schemas/ComplementaryName"
              }
            },
            "required": [
              "schema",
              "alias_id"
            ],
            "example": {
              "schema": "FPS",
              "alias_id": "054b7b60-0d85-4b91-841b-f70163cff8d4"
            }
          }
        ]
      },
      "Beneficiary": {
        "description": "Beneficiary account for instructed payments.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/SEPABeneficiaryAccountItem"
          },
          {
            "$ref": "#/components/schemas/FPSBeneficiaryAccountItem"
          },
          {
            "$ref": "#/components/schemas/AliasBeneficiaryItem"
          }
        ],
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "SEPA": "#/components/schemas/SEPABeneficiaryAccountItem",
            "FPS": "#/components/schemas/FPSBeneficiaryAccountItem",
            "ALIAS": "#/components/schemas/AliasBeneficiaryItem"
          }
        },
        "required": [
          "schema"
        ]
      },
      "PaymentStatus": {
        "description": "Define instructed payment status:\n- `SUBMITTED`: Intermediary state, payment was transmitted to the bank\nbut not yet executed.\n- `EXECUTED`: Final state, payment was executed.\n- `CANCELLED`: Final state, payment was cancelled.\n- `REJECTED`: Final state, payment was rejected.\n",
        "type": "string",
        "enum": [
          "SUBMITTED",
          "EXECUTED",
          "CANCELLED",
          "REJECTED"
        ],
        "example": "SUBMITTED"
      },
      "PaymentItem": {
        "description": "A payment represent a money transfer from a payer account to a\nbeneficiary account. Payment is created when instruction was\ntransmitted to the payer bank.\n",
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountValue"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "execution_date": {
            "description": "Payment instruction date shared with payer bank.\n",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-28T00:00:00+01:00"
          },
          "creation_date": {
            "$ref": "#/components/schemas/CreationDate"
          }
        },
        "required": [
          "status",
          "amount",
          "currency",
          "execution_date",
          "creation_date"
        ],
        "example": {
          "payment_status": "SUBMITTED",
          "amount": "123.45",
          "currency": "EUR",
          "execution_date": "2020-01-28T00:00:00+01:00",
          "creation_date": "2020-01-27T12:23:12+01:00"
        }
      },
      "InstructionItem": {
        "description": "Represent a single or standing order payment instruction. Resulting\ninstructed payment transmitted to payer bank will be represented through\n`payments` content.\n",
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/AmountValue"
          },
          "currency": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "beneficiary": {
            "$ref": "#/components/schemas/Beneficiary"
          },
          "label": {
            "$ref": "#/components/schemas/Label"
          },
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentItem"
            }
          }
        },
        "required": [
          "amount",
          "currency",
          "beneficiary",
          "label"
        ],
        "example": {
          "amount": "123.45",
          "currency": "EUR",
          "start_date": "2020-01-24T08:46:34+01:00",
          "beneficiary": {
            "schema": "SEPA",
            "iban": "FR7612345987650123456789014",
            "name": "Jean Dupond"
          },
          "label": "Payment from John Dupont to Jean Dupond",
          "payments": [
            {
              "payment_status": "SUBMITTED",
              "amount": "123.45",
              "currency": "EUR",
              "execution_date": "2020-01-28T00:00:00+01:00",
              "creation_date": "2020-01-27T12:23:12+01:00"
            }
          ]
        }
      },
      "ChangeDate": {
        "description": "Object change date and time. ISO 8601 format is used.\n",
        "type": "string",
        "format": "date-time",
        "example": "2019-12-12T13:34:45+01:00"
      },
      "OrderHistoryItem": {
        "description": "Order events.\n",
        "type": "object",
        "properties": {
          "order_status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "change_date": {
            "$ref": "#/components/schemas/ChangeDate"
          }
        },
        "required": [
          "order_status",
          "change_date"
        ]
      },
      "OrderItem": {
        "description": "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/OrderId"
          },
          "user_reference": {
            "$ref": "#/components/schemas/UserReference"
          },
          "bic": {
            "$ref": "#/components/schemas/PayerBic"
          },
          "instant_payment": {
            "$ref": "#/components/schemas/InstantPaymentType"
          },
          "sensitive_data": {
            "$ref": "#/components/schemas/SensitiveData"
          },
          "email": {
            "$ref": "#/components/schemas/PayerEMail"
          },
          "start_date": {
            "$ref": "#/components/schemas/StartDate"
          },
          "start_date_processing_direction": {
            "$ref": "#/components/schemas/DateUpdateDirection"
          },
          "frequency": {
            "$ref": "#/components/schemas/Frequency"
          },
          "end_date": {
            "$ref": "#/components/schemas/EndDate"
          },
          "order_status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "creation_date": {
            "$ref": "#/components/schemas/CreationDate"
          },
          "auth_url": {
            "$ref": "#/components/schemas/AuthURL"
          },
          "redirect_url": {
            "$ref": "#/components/schemas/RedirectURL"
          },
          "selected_capability": {
            "$ref": "#/components/schemas/PaymentCapability"
          },
          "instructions": {
            "description": "List of order instructed payments.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstructionItem"
            }
          },
          "history": {
            "description": "Describe the history of the order with an entry per order event. No information returned when order have no history.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderHistoryItem"
            }
          }
        },
        "required": [
          "id",
          "order_status",
          "payments",
          "redirect_url"
        ],
        "example": {
          "id": "987123",
          "bic": "AXABFRPP",
          "order_status": "AUTHORIZED",
          "payer": {
            "schema": "SEPA",
            "iban": "FR7612345987650123456789014"
          },
          "creation_date": "2020-01-24T08:42:32+01:00",
          "redirect_url": "https://domain/context/resource",
          "start_date": "2020-01-24T08:46:34+01:00",
          "instructions": [
            {
              "amount": "123.45",
              "currency": "EUR",
              "beneficiary": {
                "schema": "SEPA",
                "iban": "FR7612345987650123456789014",
                "name": "Jean Dupond"
              },
              "label": "Payment from John Dupont to Jean Dupond",
              "payments": [
                {
                  "payment_status": "SUBMITTED",
                  "amount": "123.45",
                  "currency": "EUR",
                  "execution_date": "2020-01-28T00:00:00+01:00",
                  "creation_date": "2020-01-27T12:23:12+01:00"
                }
              ]
            }
          ]
        }
      },
      "CountryCode": {
        "description": "Bank supported market ISO-3166 Alpha-2 country code.\n",
        "type": "string"
      },
      "OrderItemUpdate": {
        "description": "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n",
        "type": "object",
        "properties": {
          "order_status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "bic": {
            "$ref": "#/components/schemas/PayerBic"
          },
          "email": {
            "$ref": "#/components/schemas/PayerEMail"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "selected_capability": {
            "$ref": "#/components/schemas/PaymentCapability"
          }
        }
      },
      "GenericLink": {
        "description": "Hypertext reference.\n",
        "type": "object",
        "properties": {
          "href": {
            "allOf": [
              {
                "$ref": "#/components/schemas/URL"
              }
            ]
          }
        },
        "required": [
          "href"
        ],
        "example": [
          {
            "href": "https://domain/context/resource"
          }
        ]
      },
      "Page": {
        "description": "Pagination status when applicable.\n",
        "type": "object",
        "properties": {
          "size": {
            "description": "Number of elements described in the page.\n",
            "type": "number"
          },
          "total_elements": {
            "description": "Total number of elements described in all pages.\n",
            "type": "number"
          },
          "total_pages": {
            "description": "Total number of pages.\n",
            "type": "number"
          },
          "number": {
            "description": "Index of current page.\n",
            "type": "number"
          }
        },
        "required": [
          "size",
          "total_elements",
          "total_pages",
          "number"
        ],
        "example": {
          "size": "100",
          "total_elements": "1215",
          "total_pages": "13",
          "number": "7"
        }
      },
      "IBAN": {
        "description": "International Bank Account Number (IBAN) - identification used\ninternationally by financial institutions to uniquely identify the\naccount of a customer.\n",
        "type": "string",
        "pattern": "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$",
        "example": "FR7612345987650123456789014"
      },
      "SEPAAliasAccountItem": {
        "description": "Represent a SEPA beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "iban": {
                "$ref": "#/components/schemas/IBAN"
              }
            },
            "required": [
              "schema",
              "iban"
            ],
            "example": {
              "schema": "SEPA",
              "iban": "FR7612345987650123456789014"
            }
          }
        ]
      },
      "FPSAliasAccountItem": {
        "description": "Represent a Faster Payment payer or beneficiary account.\n",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "schema": {
                "$ref": "#/components/schemas/PaymentSchema"
              },
              "name": {
                "description": "Name of account holder.\n",
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code of payer account: six digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "account_number": {
                "description": "Number of account: eight digits only, no whitespace or punctuation\n",
                "type": "string"
              }
            },
            "required": [
              "schema",
              "name",
              "sort_code",
              "account_number"
            ],
            "example": {
              "schema": "FPS",
              "name": "John Dupont",
              "sort_code": "102030",
              "account_number": "88881234"
            }
          }
        ]
      },
      "AliasAccount": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SEPAAliasAccountItem"
          },
          {
            "$ref": "#/components/schemas/FPSAliasAccountItem"
          }
        ],
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "SEPA": "#/components/schemas/SEPAAliasAccountItem",
            "FPS": "#/components/schemas/FPSAliasAccountItem"
          }
        },
        "required": [
          "schema"
        ]
      },
      "AliasItemCreate": {
        "description": "An alias represent a stored account identification.\n",
        "type": "object",
        "properties": {
          "user_reference": {
            "$ref": "#/components/schemas/UserReference"
          },
          "label": {
            "description": "Name identifying the account.\n",
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
          },
          "account": {
            "$ref": "#/components/schemas/AliasAccount"
          },
          "bic": {
            "$ref": "#/components/schemas/PayerBic"
          }
        },
        "required": [
          "user_reference",
          "account"
        ]
      },
      "AliasItem": {
        "description": "An alias represent a stored account identification.\n",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AliasId"
          },
          "user_reference": {
            "$ref": "#/components/schemas/UserReference"
          },
          "label": {
            "description": "Name identifying the account.\n",
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
          },
          "account": {
            "$ref": "#/components/schemas/AliasAccount"
          },
          "bic": {
            "$ref": "#/components/schemas/PayerBic"
          }
        },
        "required": [
          "id",
          "user_reference",
          "label",
          "account"
        ]
      },
      "AliasItemUpdate": {
        "description": "An alias represent a stored account identification.\n",
        "type": "object",
        "properties": {
          "label": {
            "description": "New name identifying the account.\n",
            "type": "string",
            "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
          }
        },
        "required": [
          "label"
        ]
      },
      "AppToAppSupport": {
        "description": "Operating system type supporting application to application authentication flow.\n  - `ANDROID`: App to App flow is supported on Android devices.\n  - `IOS`: App to App flow is supported on iOS devices.\n",
        "type": "string",
        "enum": [
          "ANDROID",
          "IOS"
        ]
      },
      "ProviderItemCommon": {
        "description": "A provider represent a bank.\n",
        "type": "object",
        "properties": {
          "bic": {
            "$ref": "#/components/schemas/PayerBic"
          },
          "name": {
            "description": "Name of the provider.\n",
            "type": "string",
            "example": "Provider name"
          },
          "branch_name": {
            "type": "string",
            "description": "Name of the provider branch (regional bank of a national group for\ninstance).\n"
          },
          "country_codes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountryCode"
            }
          },
          "logo_url": {
            "type": "string",
            "description": "The logo URL for the provider.\n"
          }
        },
        "required": [
          "bic",
          "name",
          "country_codes",
          "logo_url"
        ]
      },
      "ProviderItemInternal": {
        "description": "A provider we can initiate a payment from.\n",
        "type": "object",
        "properties": {
          "allof": {
            "$ref": "#/components/schemas/ProviderItemCommon"
          },
          "payment_capabilities": {
            "description": "List of supported capabilities.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentCapability"
            }
          },
          "app_to_app_support": {
            "description": "List of operating systems supporting App to App authentication flow.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppToAppSupport"
            }
          },
          "base_url": {
            "description": "Base URL of the provider, will be mandatory returned for any\nsupported providers.\n",
            "type": "string",
            "format": "url",
            "example": "https://www.provider.com"
          },
          "max_start_date_delay": {
            "description": "Maximal delay in days from `now` supported on parameter `start_date`.\n",
            "type": "number"
          }
        },
        "required": [
          "payment_capabilities"
        ]
      },
      "ProviderSearchQueryItem": {
        "description": "Description of the search criterion to look for 'providers'.\n",
        "type": "object",
        "properties": {
          "payer": {
            "$ref": "#/components/schemas/Payer"
          }
        }
      },
      "ProviderItemInternalOrExternal": {
        "description": "A provider we can initiate a payment from when 'payment_capabilities'\nis returned or were we can't initiate a payment from in other cases.\n",
        "type": "object",
        "properties": {
          "allof": {
            "$ref": "#/components/schemas/ProviderItemCommon"
          },
          "payment_capabilities": {
            "description": "List of supported capabilities.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentCapability"
            }
          },
          "app_to_app_support": {
            "description": "List of operating systems supporting App to App authentication flow.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppToAppSupport"
            }
          },
          "base_url": {
            "description": "Base URL of the provider, only returned for supported providers.\n",
            "type": "string",
            "format": "url",
            "example": "https://www.provider.com"
          },
          "max_start_date_delay": {
            "description": "Maximal delay in days from `now` supported on parameter `start_date`.\n",
            "type": "number"
          }
        }
      },
      "ProviderSearchResultItem": {
        "description": "Description of the search criterion to look for 'providers'.\n",
        "type": "object",
        "properties": {
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "providers": {
            "description": "List of 'providers'.\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProviderItemInternalOrExternal"
            }
          }
        }
      },
      "CallbackURL": {
        "description": "The URL called to notify your system.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/URL"
          }
        ]
      },
      "ResourceType": {
        "description": "Define payment schema:\n- `ORDERS`: Order.\n",
        "type": "string",
        "enum": [
          "ORDERS"
        ],
        "example": "ORDERS"
      },
      "ResourceId": {
        "description": "Universally Unique IDentifier for a resource.\n",
        "type": "string",
        "maxLength": 36,
        "example": "c1a4866a-1362-11eb-adc1-0242ac120002"
      },
      "AuthorizedAccountItem": {
        "description": "Common structure fo all accounts identification item.\n",
        "type": "object",
        "properties": {
          "schema": {
            "$ref": "#/components/schemas/AuthorizedAccountPaymentSchema"
          }
        },
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "FPSAuthorizedAccountItem": "#/components/schemas/FPSAuthorizedAccountItem",
            "SEPAAuthorizedAccountItem": "#/components/schemas/SEPAAuthorizedAccountItem"
          }
        },
        "required": [
          "schema"
        ]
      },
      "FPSAuthorizedAccountItem": {
        "description": "Represent a Payment payer or beneficiary account.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizedAccountItem"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "description": "Name of account holder.\n",
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code of payer account: six digits only, no whitespace or punctuation\n",
                "type": "string"
              },
              "account_number": {
                "description": "Number of account: eight digits only, no whitespace or punctuation\n",
                "type": "string"
              }
            },
            "required": [
              "name",
              "sort_code",
              "account_number"
            ],
            "example": {
              "name": "John Dupont",
              "sort_code": "102030",
              "account_number": "88881234"
            }
          }
        ]
      },
      "SEPAAuthorizedAccountItem": {
        "description": "Represent a SEPA payer or beneficiary account.\n",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthorizedAccountItem"
          },
          {
            "type": "object",
            "properties": {
              "iban": {
                "$ref": "#/components/schemas/IBAN"
              },
              "name": {
                "description": "Name identifying account holder.\n",
                "type": "string",
                "pattern": "^[a-zA-Z0-9 ,-]{1,140}$"
              }
            },
            "required": [
              "iban",
              "name"
            ],
            "example": {
              "iban": "FR7612345987650123456789014",
              "name": "Jean Dupont"
            }
          }
        ]
      },
      "AuthorizedAccountPaymentSchema": {
        "description": "Define payment schema:\n- `SEPA`: SEPA payment.\n- `FPS`: Faster Payment, UK instant payment schema.\n",
        "type": "string",
        "enum": [
          "SEPA",
          "FPS"
        ],
        "example": "SEPA"
      },
      "AuthorizedAccountIdentification": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SEPAAuthorizedAccountItem"
          },
          {
            "$ref": "#/components/schemas/FPSAuthorizedAccountItem"
          }
        ],
        "discriminator": {
          "propertyName": "schema",
          "mapping": {
            "SEPA": "#/components/schemas/SEPAAuthorizedAccountItem",
            "FPS": "#/components/schemas/FPSAuthorizedAccountItem"
          }
        },
        "required": [
          "schema"
        ]
      },
      "NaturalPersonFirstname": {
        "description": "Name of person.\n",
        "type": "string",
        "example": "Guy"
      },
      "NaturalPersonSurname": {
        "description": "Surname of person.\n",
        "type": "string",
        "example": "Mauve"
      },
      "NaturalPersonBirthDate": {
        "description": "Person birth date.\n",
        "type": "string",
        "format": "date",
        "example": "1978-09-13"
      },
      "NaturalPersonBirthCity": {
        "description": "Person birth city.\n",
        "type": "string",
        "example": "Paris"
      },
      "AuthorizedAccountNaturalPerson": {
        "description": "describe a natural person.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "NATURAL_PERSON"
            ],
            "example": "NATURAL_PERSON"
          },
          "firstname": {
            "$ref": "#/components/schemas/NaturalPersonFirstname"
          },
          "surname": {
            "$ref": "#/components/schemas/NaturalPersonSurname"
          },
          "birth_date": {
            "$ref": "#/components/schemas/NaturalPersonBirthDate"
          },
          "birth_city": {
            "$ref": "#/components/schemas/NaturalPersonBirthCity"
          },
          "birth_country": {
            "$ref": "#/components/schemas/CountryCode"
          }
        },
        "required": [
          "type",
          "firstname",
          "surname",
          "birth_date",
          "birth_city",
          "birth_country"
        ]
      },
      "CompanyName": {
        "description": "Name of the company related to the national identification.\n",
        "type": "string",
        "example": "World Corp"
      },
      "CompanyNationalIdentification": {
        "description": "National identifier for the company emited by the host country (SIREN in France).\n",
        "type": "string",
        "example": "439826121"
      },
      "AuthorizedAccountCompany": {
        "description": "Describe a company.\n",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "COMPANY"
            ],
            "example": "COMPANY"
          },
          "company_name": {
            "$ref": "#/components/schemas/CompanyName"
          },
          "national_identification": {
            "$ref": "#/components/schemas/CompanyNationalIdentification"
          }
        },
        "required": [
          "type",
          "company_name",
          "national_identification"
        ]
      },
      "AuthorizedAccountEntity": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/AuthorizedAccountNaturalPerson"
          },
          {
            "$ref": "#/components/schemas/AuthorizedAccountCompany"
          }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "NATURAL_PERSON": "#/components/schemas/AuthorizedAccountNaturalPerson",
            "COMPANY": "#/components/schemas/AuthorizedAccountCompany"
          }
        },
        "required": [
          "type"
        ]
      },
      "AuthorizedAccountsItem": {
        "description": "An AuthorizedAccounts represent a beneficiary or a Payer.\n",
        "type": "object",
        "properties": {
          "identification": {
            "$ref": "#/components/schemas/AuthorizedAccountIdentification"
          },
          "entity": {
            "$ref": "#/components/schemas/AuthorizedAccountEntity"
          }
        },
        "required": [
          "identification",
          "entity"
        ]
      },
      "AuthorizedAccountId": {
        "description": "Universally Unique IDentifier for `Authorized Accounts`.\n",
        "type": "string",
        "maxLength": 36,
        "example": "c4311507-13a3-407c-82c8-b965a0967f5c"
      },
      "ServiceLevel": {
        "description": "Registration person type:\n- `FULL`: Full access to services capabilities.\n- `PARTIAL`: Service capabilities restricted (number of transactions, maximum amount...)\nbased on risk management policy.\n- `NONE`: No service available.\n",
        "type": "string",
        "enum": [
          "FULL",
          "PARTIAL",
          "NONE"
        ],
        "example": "FULL"
      },
      "AuthorizedAccountsItemCreate": {
        "description": "An AuthorizedAccounts represent a beneficiary or a Payer.\n",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/AuthorizedAccountId"
          },
          "service_level": {
            "$ref": "#/components/schemas/ServiceLevel"
          },
          "identification": {
            "$ref": "#/components/schemas/AuthorizedAccountIdentification"
          },
          "entity": {
            "$ref": "#/components/schemas/AuthorizedAccountEntity"
          }
        },
        "required": [
          "identification",
          "entity"
        ]
      }
    },
    "headers": {
      "X-FWD-Request-ID": {
        "description": "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n",
        "required": true,
        "example": "99391c7e-ad88-49ec-a2ad-99ddcb1f7721",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "Location": {
        "description": "Location where to browse the content.\n",
        "required": true,
        "example": "https://domain.com/context?param=value",
        "schema": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "responses": {
      "204": {
        "description": "No content.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "400": {
        "description": "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized, authentication failure.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden, authentication successful but access to resource is not\nallowed.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "404": {
        "description": "Not found, no request available.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "405": {
        "description": "Method Not Allowed.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "415": {
        "description": "Unsupported media type.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "422": {
        "description": "Unprocessable Entity.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "500": {
        "description": "Internal server error.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable.\n",
        "headers": {
          "X-FWD-Request-ID": {
            "$ref": "#/components/headers/X-FWD-Request-ID"
          }
        },
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          }
        }
      }
    }
  }
}