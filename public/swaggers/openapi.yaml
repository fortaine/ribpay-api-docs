openapi: 3.0.1
info:
  title: Linxo Connect Payments API
  description: "# Presentation\n\n## Introduction\n\nLinxo Connect Payments API provides you an easy way to initiate a payment from\npayer PSU account to any beneficiary account. Payment initiation can be\nsubdivided in three major steps:\n1. Create an authentication using [POST /token](oxlin-payments-api.html#operation/postToken).\n2. Create `order` using [POST /orders](oxlin-payments-api.html#operation/postOrder).\n3. Redirect the payer to the URL in [orders.auth_url](oxlin-payments-api.html#operation/getAuthorize).\n4. At the end of the consent flow, payer is redirect to\n`orders.redirect_url`, you will get the payment result using\n[GET /running/orders](oxlin-payments-api.html#operation/getRunningOrder)\nto get `orders.order_status` and\n`orders.instructions.payments.status`.\n\nHere it is, if clear enough, we will deep into payment technical integration\nworkflow.\n\n> `orders` is the central object you will manipulate during the entire\n> payment lifecycle. It represent the unique consent the payer gave to\n> its bank to initiate one or multiple payments, recurring or not to\n> one or multiple beneficiaries.\n\n## How to test using Sandbox Mode\n\nIn order to simplify your evaluation and your integration of Linxo Connect Payments,\nwe provide a `Sandbox Mode` giving you a way to emulate payment. To use it,\nyou only have to use `Sandbox Mode` credentials. Only credentials\n(identifier and password) are different between `Sandbox Mode` and\n`Production Mode`, all URL and objects are unchanged.\n\n> When receiving your `client identifier` and `client password` from Oxlin,\n> be sure to remember if they are the one used for `Sandbox Mode` or\n> for `Production Mode`.\n\nTo emulate a payment using sandbox mode credentials, simply:\n- Use IBAN `FR8530003000307599775722N09` as `beneficiary.iban`.\n- Use any name as `beneficiary.name`.\n- Choose any bank from bank selection screen, it will redirect you to a\nbank emulation page.\n- From bank emulation page, you can also emulate the case where the\nredirection to your `redirect_url` doesn't works.\n\n> For payment using `Sandbox Mode`, you have to use\n> `FR8530003000307599775722N09` as `beneficiary.iban` and any value\n> as `beneficiary.name`. When bank will be chosen, bank emulation page\n> will give you following choices:\n> - `AUTHORIZED` will emulate an order authorised but not yet executed by the\n> bank (order AUTHORIZED and payment SUBMITTED).\n> - `EXECUTED` will emulate a payment immediately executed by the bank\n> (order CLOSED and payment EXECUTED).\n> - `REJECTED` will emulate a payment with order refused by the bank\n> (order REJECTED and no payment).\n> - `FAILED` will emulate a payment with order in technical error\n> (order FAILED and no payment).\n> - `EXPIRED` will emulate a payment with order expired\n> (order EXPIRED  and no payment).\n> - `AUTHORIZED` then `EXECUTED` (with delay) will emulate a real payment flow\n> where the bank authorise it in a first time and execute it with a\n> 2 minutes delay in a second time.\n> (order AUTHORIZED and payment SUBMITTED → order CLOSED and payment EXECUTED).\n> - `AUTHORIZED and REJECTED (with delay)` will emulate a real payment flow\n> where the bank authorise it in a first time and reject it with a\n> 2 minutes delay in a second time\n> (order AUTHORIZED and payment SUBMITTED → order REJECTED and payment REJECTED).\n\nTo emulate a payment with known payer using sandbox mode, you need to use\none of folowing value for `payer.iban`:\n- `FR9530003000708915516426B35` will : result in an authorized payment\n(order AUTHORIZED and payment SUBMITTED).\n- `FR2130003000302667332151D75` will result in a rejected payment\n(order REJECTED and no payment).\n- `FR5830003000304588896864Y78` will result in a failed payment\n(order FAILED and no payment).\n- `FR4730003000505378875264Q21` will result in a expired payment\n(order EXPIRED  and no payment).\n- `FR4830003000303864238885L38` will result in an executed payment\n(order CLOSED and payment EXECUTED).\n- `FR1030003000505644812371I38` will result in an authorized payment during\na 2 minutes delay and then after this delay the payment become executed\n(order AUTHORIZED and payment SUBMITTED → order CLOSED and payment EXECUTED).\n- `FR9030003000304347365769U57` will result in an authorized payment during\na 2 minutes delay and then after this delay the payment become rejected\n(order AUTHORIZED and payment SUBMITTED → order REJECTED and payment REJECTED).\n\n## Technical integration workflow\n\nAt a technical point of view, initiating a payment will affect four actors:\n- `Customer`: is the payer who have to consent the payment initiation.\n- `Integrator`: it is you as a technical actor who have a commercial relationship\nwith the `Customer`.\n- `Oxlin`: Linxo Connect Payments API provider is the regulated TPP (Third Party Payment\nService Providers) under PSD2 (Revised Payment Services Directive) that is in\ncharge of initiating a payment for your `Customer`.\n- `Bank`: payer bank that is in charge under PSD2 (Revised Payment Services\nDirective) to authenticate the payer in order to confirm the payment initiation\nrequest.\n\nFor all type of payments (single or multiple, recurring or not, to one or multiple\nbeneficiaries) you have to follow `order` creation flow:\n\n<center><img src=\"../images/linxo_connect_payments_integration.png\" alt=\"Payment flow\" title=\"Payment flow\" width=\"500px\" /></center>\n\n> **iFrame integration**: even if Linxo Connect Payments page can be integrated in an iFrame on your side,\nbanks authentication page prevent iFrame integration. It is why, even if you integrate\nLinxo Connect Payments in an iFrame, starting bank authentication flow will redirect you to the\nbank side replacing current web context to the bank context. At the end of the authentication\nflow, we will go back to the `redirect_url` in charge opening back your application context.\n\n## Order and Payment lifecycle\n\n<center><img src=\"../images/order-status.png\" alt=\"Order status\" title=\"Order status\" width=\"400px\" /></center>\n\n`order` represent payer consent and define two main categories of states:\n1. Intermediary states:\n  * `NEW`: initial state, order was created but payer wasn't asked to\n  give its consent. In that state, you have to redirect payer to `order.auth_url`\n  in order to request it's consent.\n  * `AUTHORIZED`: payer was redirect to `order.auth_url` and successfully\n  authenticate to its bank. When `AUTHORIZED`, the `order` can define payments,\n  depending on payments `start_date`. `order` will remain in `AUTHORIZED`\n  until there is not any pending payments for it.\n2. Final states:\n  * `CLOSED`: as soon as all instructed payments of an order are in a final state,\n  its status change to `CLOSED` indicating `order` was successfully authenticated,\n  payments were realized (successfully or not) and it doesn't remain any possible\n  action for concerned `order`.\n  * `REJECTED`: payer authentication was refused, `order` wasn't authorized and is in\n  a final state without instructing any payment.\n  * `FAILED`: payer authentication failed due to technical considerations, `order`\n  wasn't authorized and is in a final state without instructing any payment.\n  * `EXPIRED`: an `order` in status `NEW` expires automaticaly after 30 days.\n\n<center><img src=\"../images/payment-status.png\" alt=\"Payment status\" title=\"Payment status\" width=\"500px\" /></center>\n\nFrom its status `AUTHORIZED`, `order` instructions can produce payments whose\nstatus are divided in the same two categories:\n1. Intermediary states:\n  * `SUBMITTED`: payment was transmitted and confirmed to the bank. Execution is in\n  progress on the bank side.\n2. Final states:\n  * `EXECUTED`: `SUBMITTED` payment was executed from the bank side and funds are\n  available for the beneficiary. Please note there exist cases such instant\n  payment execution where a payment will appear directly in `EXECUTED` without\n  transition from `SUBMITTED` one.\n  * `CANCELLED`: when you close an `AUTHORIZED` order before all instructed payments\n  were `EXECUTED`, pending payments are moved to `CANCELLED` state.\n  * `REJECTED`: `SUBMITTED` payment that was rejected either by payer bank, either\n  by beneficiary bank.\n\n### STATUS:\nThe Order is in the `NEW` state when the `order` is created.\n\nAfter the bank returns, the `ORDER` changes to `AUTHORIZED` status if the authentication \nis accepted by the bank (which means that the payer has been successfully redirected \nto his bank and has validated the transfer request).\nAt this moment, the payment change to `SUBMITTED` status – (intermediate status) - The\npayment is still being processed by the bank, so there is still a small probability \nat this moment that it will finally be declined by the bank.\n\nThen when the payment is finalized by the bank, the `ORDER` changes to `CLOSED` status \nand the payment to `EXECUTED` status, (Final status ) - the payment has been executed \non the bank's side and the funds are available to the beneficiary.\n\nOnly from this status the payment is irrevocable.\n\nYou can base your decision on the intermediate statuses (`AUTHORIZED` and `SUBMITTED`) which\nvalidate that the client has validated the transfer, but this status should not yet be considered\nas a guarantee of irrevocability of the payment.\n\n### Concerning the delay between the statuses of the `order`:\nFrom the `NEW` status to the `AUTHORIZED` status, the delay corresponds as soon as the customer \nreturns his authentication to his bank.\n\nNote that when you create a payment `order`, it is valid for 30 days\nFrom the moment your customer has clicked on the link and is redirected to his bank, he has 1 hour\nto authenticate himself, otherwise it goes to the state EXPIRED.\n\n# Technicals considerations\n\n## Errors\n\nThe API uses conventional HTTP response codes to indicate the success or\nfailure of an API request. In general, codes in the 2xx range indicate\nsuccess, codes in the 4xx range indicate an error that fails given the\ninformation provided (e.g., a required parameter was omitted), and codes in\nthe 5xx range indicate an error with our services.\n\nHowever, not all errors map cleanly onto HTTP response codes. When a request\nis valid but does not complete successfully (e.g., an asynchronous\noperation), we return a 402 error code.\n\nAll of the error responses contain the same structure in the body:\n\n| Attribute name      | Description                                        |\n|---------------------|----------------------------------------------------|\n| `error`             | Error code (can be used to manage error on the client). |\n| `error_description` | Human readable english text that describes the error (can be used in logs). |\n| `id`                | Identifies the resource (when applicable). |\n\nExample:\n```\n{\n  \"error\": \"PARAMETER_MISSING\",\n  \"error_description\": \"Missing request header 'X-FWD-Request-ID' for method parameter of type String\",\n  \"id\": \"/v1/accounts\"\n}\n```\n\n## Pagination\n\nWhen the API return a list of elements, the results are paginated.\nBy default the lists is limited to return a result limit of 100 elements\nand are explored on page 1. Calling `GET /xxx` or\n`GET /xxx?page=1&limit=100` will return the same results.\n\nTo help you navigate through the results contained in the JSON responses, we\nprovide `_links` and `_page`properties that let you know where you are in\nthe pagination according following elements:\n- **self** : <https://domain/Resources?page=X&limit=Y>\n- first page : <https://domain/Resources?page=X&limit=Y>\n- last page : <https://domain/Resources?page=X&limit=Y>\n- next page : <https://domain/Resources?page=X&limit=Y>\n- previous page : <https://domain/Resources?page=X&limit=Y>\n- size: <number of elements in the current page>\n- total_elements: <total number of elements>\n- total_pages: <total number of pages>\n- number: <current page number>\n\n`self`, `size`, `total_elements`, `total_pages` and `number` properties are\nmandatories and returned in both paginated and not paginated results. Other\nproperties are only returned on paginated result.\n\nAs an example, you have 1215 `orders`. You call `GET /v1/running/orders` without\npagination parameters, we return 100 and there are still 1115 to explore.\nWe therefore send the following elements in the answer body:\n\n```\n{\n\"_links\": {\n  \"self\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=1&limit=100\"\n  },\n  \"first\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=1&limit=100\"\n  },\n  \"last\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=13&limit=100\"\n  },\n  \"next\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=2&limit=100\"\n  },\n\"_page\": {\n  \"size\": 100,\n  \"total_elements\": 1215,\n  \"total_pages\": 13,\n  \"number\": 1\n  }\n}\n```\n\nAnd if you call the page number 7 `GET /v1/running/orders`:\n\n```\n{\n\"_links\": {\n  \"self\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=7&limit=100\"\n  },\n  \"first\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=1&limit=100\"\n  },\n  \"last\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=13&limit=100\"\n  },\n  \"next\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=8&limit=100\"\n  },\n  \"prev\": {\n    \"href\": \"https://pay.oxlin.io/v1/orders?page=6&limit=100\"\n  },\n\"_page\": {\n  \"size\": 100,\n  \"total_elements\": 1215,\n  \"total_pages\": 13,\n  \"number\": 7\n  }\n}\n```\n\n## Versioning\n\nThe API is following the semantic versioning (major.minor). The version is\nlocated in the URL, patches on the same version endpoint are\nbackward-compatible.\n\nA minor release can add new resources, parameters or properties. A good\npractice for a client implementation is to design the implementation to\nsupport minor changes.\n\nThe patch releases are not visible to the clients since they are not\nchanging the contract.\n\n## Versions history\n\n1.3.6\n- Correct `payment_status` by `status` in the `Returns a list of orders` endpoint example\n- Update documentation to clarify that `frequency` field, `STANDING_ORDERS` and `BATCH_PAYMENTS` capabilities are currently **NOT SUPPORTED**\n\n1.3.5\n- Authorized accounts: National identification for France is SIRET.\n- Authorized accounts: Sandbox documentation\n\n1.3.4\n- Add method `GET /v1/reporting/orders/{order_id}/history`.\n- Add filters in method `GET /v1/reporting/orders/` (data for searching orders, amount from and to, currency).\n\n1.3.3\n- Add `sca.applied` in order response providing if a SCA exemption has been applied by the provider.\n- Add `channel` in order response providing the initiating channel for the order.\n- Add `country` in order response for payer and beneficiaries providing the accounts country.\n\n1.3.2\n- Add `name` in order response to return the name of the payer.\n- Add `payments.payment_status_raw_reason` in order response to return the provider rejected reason\n- Remove required attribute on `payments.execution_date` field\n- Remove `history` from orders\n\n1.3.1:\n- Deprecate `providers_header` following Linxo Connect rebranding.\n- Deprecate `terms_footer` following Linxo Connect rebranding.\n- Update `button_radius` default value to `5` following Linxo Connect rebranding.\n- Correct order request and response to have `complementary_name` for every account types.\n- Update default value for `button_alignment` and `button_size`\n- Remove versions history older than 1.2.0\n\n1.3.0:\n- Add method `POST /v1/authorized_accounts`.\n- Add method `GET /v1/authorized_accounts/{authorized_account_id}`.\n- Add method `DELETE /v1/authorized_accounts/{authorized_account_id}`.\n- Add method `GET /v1/authorized_accounts`.\n\n1.2.2:\n- Add `InstantPaymentText` and `SinglePaymentText`.\n- Deprecate `InstantPaymentFooter` following Linxo Connect rebranding\n\n1.2.1:\n- Update documentation on sandbox mode.\n- Update documentation on `favorite_providers`.\n\n1.2.0:\n- Add `instant_payment_header`, `instant_payment_footer`,\n`providers_header` and `providers_search_hint` options on\n`GET /v1/authorize/{order_id}`.\n"
  version: '1.0'
servers:
  - url: https://api.ribpay.app/pis
security:
  - AADToken:
    - https://api.ribpay.app/.default
paths:
  /v1/orders:
    post:
      tags:
        - Payment orders
      summary: "Create an order.\n"
      description: "Create an order representing one or more payments, today or in the\nfuture to a unique beneficiary or multiples beneficiaries. An order\nis associated to a unique payment initiation, as a consequence it\nis associated to a unique authentication from the PSU bank.\n\nNote the order is valid during a 30 days period. After that delay,\nit will expire automatically and you can't use it anymore.\n"
      operationId: PostOrders
      requestBody:
        description: "Description of the order to create. Based on transmitted parameters,\nyou will be able to create a single payment (instant or not),\na standing order or a batch payment.\n\n> In order to simplify the `orders` creation, it exist two different\n> format:\n> - Format `SingleInstructionOrder` is a simplified way to create\n> payments of type `SINGLE_PAYMENT`, `SINGLE_INSTANT_PAYMENT` or\n> `STANDING_ORDERS`. Refer to sample `Single payment`.\n> - In addition, `MultiplesInstructionsOrder` format also\n> support payment of type BATCH_PAYMENTS. Refer to sample `Single\n> payment (alternate)`.\n"
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SingleInstructionOrder'
                - $ref: '#/components/schemas/MultiplesInstructionsOrder'
            examples:
              Single payment:
                value:
                  redirect_url: https://my_redirect_url/
                  amount: '23.45'
                  currency: EUR
                  beneficiary:
                    schema: SEPA
                    iban: FR8530003000307599775722N09
                    name: Jean Dupond
                  label: Payment from John Dupont to Jean Dupond
              Single payment (alternate):
                value:
                  redirect_url: https://my_redirect_url/
                  instructions:
                    - amount: '23.45'
                      currency: EUR
                      beneficiary:
                        schema: SEPA
                        iban: FR8530003000307599775722N09
                        name: Jean Dupond
                      label: Payment from John Dupont to Jean Dupond
              Pending order:
                value:
                  redirect_url: https://my_redirect_url/
                  amount: '33.33'
                  currency: EUR
                  start_date: '2019-12-31T23:00:00.0000000+00:00'
                  frequency: WEEKLY
                  beneficiary:
                    schema: SEPA
                    iban: FR7612345987650123456789014
                    name: Jean Dupond
                  label: Recurring payment from John Dupont to Jean Dupond
              Pending order (alternate):
                value:
                  redirect_url: https://my_redirect_url/
                  start_date: '2019-12-31T23:00:00.0000000+00:00'
                  frequency: WEEKLY
                  instructions:
                    - amount: '33.33'
                      currency: EUR
                      beneficiary:
                        schema: SEPA
                        iban: FR7612345987650123456789014
                        name: Jean Dupond
                      label: Recurring payment from John Dupont to Jean Dupond
              Batch payment:
                value:
                  redirect_url: https://my_redirect_url/
                  instructions:
                    - amount: '45.65'
                      currency: EUR
                      beneficiary:
                        schema: SEPA
                        iban: FR7612345987650123456789014
                        name: Jean Dupond
                      label: Payment from John Dupont to Jean Dupond
                    - amount: '23.43'
                      currency: EUR
                      beneficiary:
                        schema: SEPA
                        iban: FR7912345987650123456789014
                        name: Jean Doe
                      label: Payment from John Dupont to Jean Doe
                    - amount: '345'
                      currency: EUR
                      beneficiary:
                        schema: SEPA
                        iban: FR8312345987650123456789014
                        name: John Jean
                      label: Payment from John Dupont to John Jean
      responses:
        '201':
          description: "Created order.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                Single payment:
                  value:
                    id: 299e1bf6-a95e-11ea-bb37-0242ac130002
                    order_status: NEW
                    creation_date: '2020-01-24T07:42:32.0000000+00:00'
                    auth_url: https://oxlin.com/auth_payment/12/
                    redirect_url: https://my_redirect_url/
                    start_date: '2020-01-24T07:42:32.0000000+00:00'
                    instructions:
                      - amount: '23.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8530003000307599775722N09
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                Pending order:
                  value:
                    id: 39d490ea-a95e-11ea-bb37-0242ac130002
                    order_status: NEW
                    creation_date: '2019-12-24T08:34:23.0000000+00:00'
                    auth_url: https://oxlin.com/auth_payment/15/
                    redirect_url: https://my_redirect_url/
                    start_date: '2019-12-31T23:00:00.0000000+00:00'
                    frequency: WEEKLY
                    instructions:
                      - amount: '33.33'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Recurring payment from John Dupont to Jean Dupond
                Batch payment:
                  value:
                    id: 3cf58fea-a95e-11ea-bb37-0242ac130002
                    order_status: NEW
                    creation_date: '2020-01-24T08:40:23.0000000+00:00'
                    auth_url: https://oxlin.com/auth_payment/15/
                    redirect_url: https://my_redirect_url/
                    start_date: '2020-01-24T08:40:23.0000000+00:00'
                    instructions:
                      - amount: '45.65'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                      - amount: '23.43'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7912345987650123456789014
                          name: Jean Doe
                        label: Payment from John Dupont to Jean Doe
                      - amount: '345'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8312345987650123456789014
                          name: John Jean
                        label: Payment from John Dupont to John Jean
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '405':
          description: "Method Not Allowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/authorize/{order_id}:
    get:
      tags:
        - Payment orders
      summary: "Start authorisation flow for an order.\n"
      description: "Open the HTML page use to manage the order authorisation flow. Depending on order\ncontext, page will provides a way to:\n- Manage terms and conditions\n- Get payer email address\n- Select payer bank\n- Select payer account\n- Redirect to the bank authorisation page\n\nThe page will automatically select the best language to use according\nclient browser configuration. It is possible to override browser language\ndetection using `lng` parameter. Language detection priority is following:\n1. `lng` parameter\n2. browser configuration\n3. `en_EN` value\n"
      operationId: GetAuthorizeOrderId
      parameters:
        - name: order_id
          in: path
          description: "Unique identifier of an order.\n"
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'
          example: 14d51b74-175a-11eb-adc1-0242ac120002
        - name: client_id
          in: query
          description: "Client identifier of the owner of referenced `orders`.\n"
          required: true
          schema:
            type: string
          example: c93a95fc-602c-4a63-8df5-06e1c2a06253
        - name: locale
          in: query
          description: "Browser language to use in form:\n- language-code_language-variant\n- language-code\nBrowser language to use with ISO-639 two letters language code optional\nfollowed by _ and the two letters ISO-3166 country code (override\nbrowser language detection):\n- language-code_country_code\n- language-code\nValid values samples:\n- `en`\n- `en_EN`, `en_GB`, `en_US`\n- `fr`\n- `fr_FR`\n"
          schema:
            type: string
          example: en_EN
        - name: lng
          in: query
          description: "Replaced by `locale`. Browser language to use in form:\n- language-code_language-variant\n- language-code\n\nValid values samples:\n- `en`\n- `en_EN`, `en_GB`, `en_US`\n- `fr`\n- `fr_FR`\n"
          schema:
            type: string
          example: en_EN
        - name: countries
          in: query
          description: "Restricted list of bank countries the user is asked to connect to. Filter\nis composed by a list of ISO-3166 Alpha-2 countries descriptor.\nIf undefined, all available banks will be available.\n"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CountryCode'
          example: 'fr, pt'
        - name: favorite_providers
          in: query
          description: "Define a list of favorites providers that will be displayed by default\non the bank list screen.\n- If `favorite_providers` is undefined, we display the list of most used banks\nwith a “See all banks” button used to display the\nentire bank list.\n- If `favorite_providers` is defined with valid BIC list, we display banks\nwithin the list with a “See all banks” button used to display\nthe entire bank list.\n- If `favorite_providers` is defined with <EMPTY> value or only invalid\nBIC list, we display the entire bank list without any “See all banks” button.\n"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PayerBic'
          example: 'AGRIFRP1ACF,SIBLFRPP,CMCIFRPA'
        - name: title
          in: query
          description: "Override widget displayed title.\n"
          schema:
            type: string
          example: New title
        - name: terms_header
          in: query
          description: "Terms and conditions page header customized value. Use `%MAIL%` text\nif you need to integrate user mail.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: Vous serez redirigé vers votre banque en ligne pour vous authentifier et valider votre paiement. Une fois le paiement réalisé vous recevrez une confirmation par email à l'adresse %MAIL%
        - name: terms_footer
          in: query
          description: "Terms and conditions page footer customized value.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: Oxlin établissement de paiement agréé par l’ACPR - Banque de France sous le numéro 16928.
        - name: terms_body
          in: query
          description: "Terms and conditions page body customized value using markdown syntax.\nTo link static terms and conditions page, use\n`[link description](https://link.destination)`.\n> Customization not available if you are using Oxlin agreement.\n\n> When using your agreement, if not set we won't display terms page. As\n> a consequence, you won't have access to folowing capabilities:\n> - Ask user to register IBAN.\n> - Display a QR Code on non mobile device if AppToApp flow is\n> supported by the bank.\n"
          schema:
            type: string
          example: 'Ce service est opéré par Linxo Connect, établissement de paiement agrée par l''ACPR.  En continuant vous acceptez les conditions générales de Linxo Connect Payments et  la politique de confidentialité Linxo Connect'
        - name: instant_payment_header
          in: query
          description: "Instant payment feature page header customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: Choisissez le type de virement
        - name: instant_payment_text
          in: query
          description: "Instant payment feature page header customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: En choisissant de réaliser un virement instantané...
        - name: single_payment_text
          in: query
          description: "Instant payment feature page header customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: Réaliser un virement standard...
        - name: instant_payment_footer
          in: query
          description: "Instant payment feature page footer customized value using markdown syntax.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: Le virement instantané peut vous être facturé par votre banque.
        - name: providers_header
          in: query
          description: "Provider search page header customized value.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example:
            Rechercher votre banque: ''
        - name: providers_search_hint
          in: query
          description: "Provider search page input placeholder customized value.\n> Customization not available if you are using Oxlin agreement.\n"
          schema:
            type: string
          example: Rechercher…
        - name: font
          in: query
          description: "Font to use in page (CSS representation).\n"
          schema:
            type: string
          example: 'italic small-caps bold 12px/30px Georgia, serif'
        - name: font_color
          in: query
          description: "Font color to use in page (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: font_secondary_color
          in: query
          description: "Font secondary color to use in page for buttons (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: background_color
          in: query
          description: "Background color (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: elements_font
          in: query
          description: "Font to use for primary elements (CSS representation).\n"
          schema:
            type: string
          example: 'italic small-caps bold 12px/30px Georgia, serif'
        - name: elements_color
          in: query
          description: "Primary elements color to use (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: foreground_color
          in: query
          description: "Replaced by `elements_color`. Foreground color (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: elements_font_color
          in: query
          description: "Font color to use for primary elements (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: secondary_elements_color
          in: query
          description: "Secondary elements color to use (CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: secondary_elements_font_color
          in: query
          description: "Font color to use for secondary elements(CSS representation).\n"
          schema:
            type: string
          example: Blue
        - name: display_border
          in: query
          description: "When false, page is rendered without any border.\n"
          schema:
            type: boolean
            default: true
        - name: light
          in: query
          description: "Depending on regulation status and constraints, when true, we will hide\npayment summary.\n"
          schema:
            type: boolean
            default: false
        - name: button_radius
          in: query
          description: "Buttons radius value in `px`.\n"
          schema:
            type: number
            default: 5
        - name: cancel_url
          in: query
          description: "When set, widget will display a cancel link redirecting to that URL.\n"
          schema:
            type: string
        - name: ask_for_alias
          in: query
          description: "When set to true in association with a valid value for\n`orders.user_reference`, payer is asked to register is\naccount just before redirecting him to his bank\nauthentication flow.\n"
          schema:
            type: boolean
            default: true
        - name: ask_for_iban
          in: query
          description: "When set to true, payer can directly type its payment account IBAN.\n"
          schema:
            type: boolean
            default: false
        - name: display_qr_code
          in: query
          description: "When set to true, if the bank support app to app flow and if the payment page is\nnot displayed using a mobile phone, we will display a QR code giving a way to optimize\npayment flow opening the bank application.\n"
          schema:
            type: boolean
            default: true
        - name: display_header
          in: query
          description: "When false, page is rendered without header including back arrow.\n"
          schema:
            type: boolean
            default: true
        - name: item_border_color
          in: query
          description: "Items border color using (CSS representation), no border if undefined.\n"
          schema:
            type: string
          example: Blue
        - name: item_border_radius
          in: query
          description: "Item border radius value in `px`.\n"
          schema:
            type: number
            default: 0
        - name: item_arrow_color
          in: query
          description: "Items arrow color using (CSS representation), no arrow if undefined.\n"
          schema:
            type: string
          example: Blue
        - name: button_arrow_color
          in: query
          description: "Button arrow color using (CSS representation), no arrow if undefined.\n"
          schema:
            type: string
          example: Blue
        - name: button_size
          in: query
          description: "Button size:\n- `SMALL`: Button size is small.\n- `LARGE`: Button size is large.\n"
          schema:
            enum:
              - SMALL
              - LARGE
            type: string
            default: SMALL
          example: LARGE
        - name: button_alignment
          in: query
          description: "Button size:\n- `LEFT_TOP`: horizontal alignment left, vertical alignement top.\n- `CENTER_TOP`: horizontal alignment center, vertical alignement top.\n- `RIGHT_TOP`: horizontal alignment right, vertical alignement top.\n- `LEFT_BOTTOM`: horizontal alignment left, vertical alignement bottom.\n- `CENTER_BOTTOM`: horizontal alignment center, vertical alignement bottom.\n- `RIGHT_BOTTOM`: horizontal alignment right, vertical alignement bottom.\n"
          schema:
            enum:
              - LEFT_TOP
              - CENTER_TOP
              - RIGHT_TOP
              - LEFT_BOTTOM
              - CENTER_BOTTOM
              - RIGHT_BOTTOM
            type: string
            default: LEFT_BOTTOM
          example: CENTER_BOTTOM
      responses:
        '200':
          description: "HTML page used to authorize the order.\n"
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
              example: <V1Authorize-order_id-Get200TextHtmlResponse>&lt;html&gt;HTML Content&lt;/html&gt;</V1Authorize-order_id-Get200TextHtmlResponse>
        '302':
          description: "Only if not using Oxlin agreement, return header `Location` with\nURL to browse to in order to start authorisation flow at the bank side.\n\n> Note the `302` redirection only appends if `orders` is fully filled\nwith all information required to select the payer bank. If not,\nwe will return a `200` response with a bank selection page.\n"
          headers:
            Location:
              description: "Location where to browse the content.\n"
              required: true
              schema:
                type: string
              example: https://domain.com/context?param=value
        '400':
          description: "HTML page describing an HTTP 400 error code.\n"
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
              example: <V1Authorize-order_id-Get400TextHtmlResponse>&lt;html&gt;HTML Content&lt;/html&gt;</V1Authorize-order_id-Get400TextHtmlResponse>
        '404':
          description: "HTML page describing an HTTP 404 error code.\n"
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
              example: <V1Authorize-order_id-Get404TextHtmlResponse>&lt;html&gt;HTML Content&lt;/html&gt;</V1Authorize-order_id-Get404TextHtmlResponse>
        '405':
          description: "HTML page describing an HTTP 405 error code.\n"
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
              example: <V1Authorize-order_id-Get405TextHtmlResponse>&lt;html&gt;HTML Content&lt;/html&gt;</V1Authorize-order_id-Get405TextHtmlResponse>
        '500':
          description: "HTML page describing an HTTP 500 error code.\n"
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
              example: <V1Authorize-order_id-Get500TextHtmlResponse>&lt;html&gt;HTML Content&lt;/html&gt;</V1Authorize-order_id-Get500TextHtmlResponse>
  /v1/running/orders/{order_id}:
    get:
      tags:
        - Payment orders
      summary: "Get a specific order for realtime access.\n"
      description: "Retrieve a specific order based on its unique identifier for realtime access.\nAs a consequence, **can only be used to get an `orders` during the realtime flow**\nmeans **while order is in its initial state `NEW` and during the next 10 minutes\nafter it was updated to another status**. The method have to be only used for\nhigh availability services, if it doesn't return any `orders`, you are probably\nusing the wrong method and have to deep into using `GET v1/reporting/orders/XXX`.\n\nEach order represent one or more payments,\ntoday or in the future, to a unique beneficiary or multiples\nbeneficiaries. An order is associated to one or more instructions but to a\nunique payment initiation at the bank side, as a consequence it is associated\nto a unique authentication from the PSU bank.\n"
      operationId: GetRunningOrdersOrderId
      parameters:
        - name: order_id
          in: path
          description: "Unique identifier of an order.\n"
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'
          example: 14d51b74-175a-11eb-adc1-0242ac120002
      responses:
        '200':
          description: "Requested order definition.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                Unauthorized single payment:
                  value:
                    id: 299e1bf6-a95e-11ea-bb37-0242ac130002
                    order_status: NEW
                    creation_date: '2020-01-24T07:42:32.0000000+00:00'
                    auth_url: https://oxlin.com/auth_payment/12/
                    redirect_url: https://my_redirect_url/
                    start_date: '2020-01-24T07:42:32.0000000+00:00'
                    instructions:
                      - amount: '23.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8530003000307599775722N09
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                Authorized single payment:
                  value:
                    id: 2f4563b6-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: AUTHORIZED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:34:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: SINGLE_PAYMENT
                    start_date: '2020-01-24T08:34:23.0000000+00:00'
                    instructions:
                      - amount: '123.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: SUBMITTED
                            amount: '123.45'
                            currency: EUR
                            execution_date: '2020-01-24T08:38:12.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                Closed single payment:
                  value:
                    id: 363e04a2-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: CLOSED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:38:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: SINGLE_PAYMENT
                    start_date: '2020-01-24T08:38:23.0000000+00:00'
                    instructions:
                      - amount: '12'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: EXECUTED
                            amount: '12'
                            currency: EUR
                            execution_date: '2020-01-24T08:40:34.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                Authorized pending order:
                  value:
                    id: 39d490ea-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: AUTHORIZED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2019-12-24T08:34:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: STANDING_ORDERS
                    start_date: '2019-12-31T23:00:00.0000000+00:00'
                    frequency: WEEKLY
                    instructions:
                      - amount: '33.33'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Recurring payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2019-12-31T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                          - payment_status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2020-01-07T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                          - payment_status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2020-01-14T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                Closed batch payment:
                  value:
                    id: 3cf58fea-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: CLOSED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:40:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: BATCH_PAYMENTS
                    start_date: '2020-01-24T08:40:23.0000000+00:00'
                    instructions:
                      - amount: '45.65'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: EXECUTED
                            amount: '45.65'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                      - amount: '23.43'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7912345987650123456789014
                          name: Jean Doe
                        label: Payment from John Dupont to Jean Doe
                        payments:
                          - payment_status: EXECUTED
                            amount: '23.43'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                      - amount: '345'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8312345987650123456789014
                          name: John Jean
                        label: Payment from John Dupont to John Jean
                        payments:
                          - payment_status: EXECUTED
                            amount: '345'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
    put:
      tags:
        - Payment orders
      summary: "Update a specific order.\n"
      description: "Update a specific order based on its unique identifier. It is possible\nto update:\n  - `order_status`: an order in status `NEW` or `AUTHORIZED` can be\n  changed to status `CLOSED`. In such case, order won't create any\n  new payments after status change, however existing payments status\n  won't change and are kept in current state.\n  - `bic`: you can change payer bank identification for an order in\n  status `NEW` with `order.bic` **undefined**.\n  - `email`: you can change payer email for an order in\n  status `NEW` with `orders.email` **undefined**.\n  - `selected_capability`: you can change payment used capability for an order in\n  status `NEW` with `orders.instructions.payments` **undefined**.\n  - `payer`: you can change payer account for an order in\n  status `NEW` with `order.payer` **undefined**.\n"
      operationId: PutRunningOrdersOrderId
      parameters:
        - name: order_id
          in: path
          description: "Unique identifier of an order.\n"
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'
          example: 14d51b74-175a-11eb-adc1-0242ac120002
      requestBody:
        description: "Updates to realize on `order`.\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemUpdate'
            examples:
              Cancel an order:
                value:
                  order_status: CLOSED
              Define payer bank:
                value:
                  bic: AXABFRPP
              Define payer email:
                value:
                  email: payer.email@domain.com
              Define selected capability:
                value:
                  selected_capability: SINGLE_PAYMENT
              Define payer:
                value:
                  payer:
                    schema: SEPA
                    iban: FR8530003000307599775722N09
      responses:
        '204':
          description: "Order successfully updated.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/reporting/orders/{order_id}:
    get:
      tags:
        - Payment orders
      summary: "Get a specific order.\n"
      description: "Retrieve a specific order based on its unique identifier.\nEach order represent one or more payments,\ntoday or in the future, to a unique beneficiary or multiples\nbeneficiaries. An order is associated to a unique payment initiation,\nas a consequence it is associated to a unique authentication from the\nPSU bank.\n"
      operationId: GetReportingOrdersOrderId
      parameters:
        - name: order_id
          in: path
          description: "Unique identifier of an order.\n"
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'
          example: 14d51b74-175a-11eb-adc1-0242ac120002
      responses:
        '200':
          description: "Requested order definition.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                Unauthorized single payment:
                  value:
                    id: 299e1bf6-a95e-11ea-bb37-0242ac130002
                    order_status: NEW
                    creation_date: '2020-01-24T07:42:32.0000000+00:00'
                    auth_url: https://oxlin.com/auth_payment/12/
                    redirect_url: https://my_redirect_url/
                    start_date: '2020-01-24T07:42:32.0000000+00:00'
                    instructions:
                      - amount: '23.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8530003000307599775722N09
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                Authorized single payment:
                  value:
                    id: 2f4563b6-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: AUTHORIZED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:34:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: SINGLE_PAYMENT
                    start_date: '2020-01-24T08:34:23.0000000+00:00'
                    instructions:
                      - amount: '123.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: SUBMITTED
                            amount: '123.45'
                            currency: EUR
                            execution_date: '2020-01-24T08:38:12.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                Closed single payment:
                  value:
                    id: 363e04a2-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: CLOSED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:38:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: SINGLE_PAYMENT
                    start_date: '2020-01-24T08:38:23.0000000+00:00'
                    instructions:
                      - amount: '12'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: EXECUTED
                            amount: '12'
                            currency: EUR
                            execution_date: '2020-01-24T08:40:34.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                Authorized pending order:
                  value:
                    id: 39d490ea-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: AUTHORIZED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2019-12-24T08:34:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: STANDING_ORDERS
                    start_date: '2019-12-31T23:00:00.0000000+00:00'
                    frequency: WEEKLY
                    instructions:
                      - amount: '33.33'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Recurring payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2019-12-31T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                          - payment_status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2020-01-07T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                          - payment_status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2020-01-14T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                Closed batch payment:
                  value:
                    id: 3cf58fea-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: CLOSED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:40:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: BATCH_PAYMENTS
                    start_date: '2020-01-24T08:40:23.0000000+00:00'
                    instructions:
                      - amount: '45.65'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - payment_status: EXECUTED
                            amount: '45.65'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                      - amount: '23.43'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7912345987650123456789014
                          name: Jean Doe
                        label: Payment from John Dupont to Jean Doe
                        payments:
                          - payment_status: EXECUTED
                            amount: '23.43'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                      - amount: '345'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8312345987650123456789014
                          name: John Jean
                        label: Payment from John Dupont to John Jean
                        payments:
                          - payment_status: EXECUTED
                            amount: '345'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/reporting/orders:
    get:
      tags:
        - Payment orders
      summary: "Returns a list of orders.\n"
      description: "Get the list of `orders`. Each order represents one or more payments,\ntoday or in the future, to a unique beneficiary or multiple\nbeneficiaries. An order is associated to a unique payment initiation,\nas a consequence it is associated to a unique authentication from the\nPSU bank.\n"
      operationId: GetReportingOrders
      parameters:
        - name: page
          in: query
          description: "Page number in the pagination.\n"
          schema:
            type: number
          example: 7
        - name: limit
          in: query
          description: "Max number of items to retrieve (limited to 500).\n"
          schema:
            type: number
            default: 100
          example: 20
        - name: date_from
          in: query
          description: "Format - date-time (as date-time in RFC3339). Inclusive minimal creation date.\nISO 8601 format is used. Default value when not set will be\nthe value giving maximum history size.\n"
          schema:
            type: string
        - name: date_to
          in: query
          description: "Format - date-time (as date-time in RFC3339). Inclusive maximal creation date.\nISO 8601 format is used. Default value when not set will be\ncurrent date-time.\n"
          schema:
            type: string
        - name: execution_date_from
          in: query
          description: "Format - date-time (as date-time in RFC3339). Inclusive minimal execution date of a payment instruction.\nISO 8601 format is used. Default value when not set will be\nthe value giving maximum history size.\n"
          schema:
            type: string
        - name: order_status
          in: query
          description: "Orders status list.\n"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/OrderStatus'
        - name: user_reference
          in: query
          description: "Unique identifier of a user.\n"
          schema:
            $ref: '#/components/schemas/UserReference'
        - name: data_for_searching_orders
          in: query
          description: "String in the following order data:\n- user reference (full text search)\n- payer email (full text search)\n- payer name (full text search)\n- payer account (strict search)\n- instruction label (full text search)\n- beneficiary name (full text search)\n- beneficiary account (strict search)\n- payer country (full text search)\n- beneficiary country (full text search)\n"
          schema:
            type: string
        - name: amount_from
          in: query
          description: "Inclusive minimal amount given with fractional digits, where fractions must be\ncompliant to the currency definition. Up to 14 significant figures.\nNegative amounts are signed by minus. The decimal separator is a dot.\n\nValid representations for amount with up to two decimals are:\n  - 1056\n  - 5768.2\n  - -1.50\n  - 5877.78.\n"
          schema:
            type: string
        - name: amount_to
          in: query
          description: "Inclusive maximal amount given with fractional digits, where fractions must be\ncompliant to the currency definition. Up to 14 significant figures.\nNegative amounts are signed by minus. The decimal separator is a dot.\n\nValid representations for amount with up to two decimals are:\n  - 1056\n  - 5768.2\n  - -1.50\n  - 5877.78.\n"
          schema:
            type: string
        - name: currency
          in: query
          schema:
            $ref: '#/components/schemas/CurrencyCode'
      responses:
        '200':
          description: A JSON array of orders.
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                required:
                  - orders
                  - _links
                  - _page
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderItem'
                    description: "List of orders.\n"
                  _links:
                    required:
                      - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                  _page:
                    $ref: '#/components/schemas/Page'
                description: "Orders response.\n"
                example:
                  orders:
                    - id: 299e1bf6-a95e-11ea-bb37-0242ac130002
                      order_status: NEW
                      creation_date: '2020-01-24T07:42:32.0000000+00:00'
                      auth_url: https://oxlin.com/auth_payment/12/
                      redirect_url: https://my_redirect_url/
                      start_date: '2020-01-24T07:42:32.0000000+00:00'
                      instructions:
                        - amount: '23.45'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR8530003000307599775722N09
                            name: Jean Dupond
                          label: Payment from John Dupont to Jean Dupond
                    - id: 2f4563b6-a95e-11ea-bb37-0242ac130002
                      bic: AXABFRPP
                      order_status: AUTHORIZED
                      payer:
                        schema: SEPA
                        iban: FR7612345987650123456789014
                      creation_date: '2020-01-24T08:34:23.0000000+00:00'
                      redirect_url: https://my_redirect_url/
                      selected_capability: SINGLE_PAYMENT
                      start_date: '2020-01-24T08:34:23.0000000+00:00'
                      instructions:
                        - amount: '123.45'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR7612345987650123456789014
                            name: Jean Dupond
                          label: Payment from John Dupont to Jean Dupond
                          payments:
                            - status: SUBMITTED
                              amount: '123.45'
                              currency: EUR
                              execution_date: '2020-01-24T08:38:12.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                    - id: 363e04a2-a95e-11ea-bb37-0242ac130002
                      bic: AXABFRPP
                      order_status: CLOSED
                      payer:
                        schema: SEPA
                        iban: FR7612345987650123456789014
                      creation_date: '2020-01-24T08:38:23.0000000+00:00'
                      redirect_url: https://my_redirect_url/
                      selected_capability: SINGLE_PAYMENT
                      start_date: '2020-01-24T08:38:23.0000000+00:00'
                      instructions:
                        - amount: '12'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR7612345987650123456789014
                            name: Jean Dupond
                          label: Payment from John Dupont to Jean Dupond
                          payments:
                            - status: EXECUTED
                              amount: '12'
                              currency: EUR
                              execution_date: '2020-01-24T08:40:34.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                    - id: 39d490ea-a95e-11ea-bb37-0242ac130002
                      bic: AXABFRPP
                      order_status: AUTHORIZED
                      payer:
                        schema: SEPA
                        iban: FR7612345987650123456789014
                      creation_date: '2019-12-24T08:34:23.0000000+00:00'
                      redirect_url: https://my_redirect_url/
                      selected_capability: STANDING_ORDERS
                      start_date: '2019-12-31T23:00:00.0000000+00:00'
                      frequency: WEEKLY
                      instructions:
                        - amount: '33.33'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR7612345987650123456789014
                            name: Jean Dupond
                          label: Recurring payment from John Dupont to Jean Dupond
                          payments:
                            - status: EXECUTED
                              amount: '33.33'
                              currency: EUR
                              execution_date: '2019-12-31T23:00:00.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                            - status: EXECUTED
                              amount: '33.33'
                              currency: EUR
                              execution_date: '2020-01-07T23:00:00.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                            - status: EXECUTED
                              amount: '33.33'
                              currency: EUR
                              execution_date: '2020-01-14T23:00:00.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                    - id: 3cf58fea-a95e-11ea-bb37-0242ac130002
                      bic: AXABFRPP
                      order_status: CLOSED
                      payer:
                        schema: SEPA
                        iban: FR7612345987650123456789014
                      creation_date: '2020-01-24T08:40:23.0000000+00:00'
                      redirect_url: https://my_redirect_url/
                      selected_capability: BATCH_PAYMENTS
                      start_date: '2020-01-24T08:40:23.0000000+00:00'
                      instructions:
                        - amount: '45.65'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR7612345987650123456789014
                            name: Jean Dupond
                          label: Payment from John Dupont to Jean Dupond
                          payments:
                            - status: EXECUTED
                              amount: '45.65'
                              currency: EUR
                              execution_date: '2020-01-24T08:43:25.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                        - amount: '23.43'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR7912345987650123456789014
                            name: Jean Doe
                          label: Payment from John Dupont to Jean Doe
                          payments:
                            - status: EXECUTED
                              amount: '23.43'
                              currency: EUR
                              execution_date: '2020-01-24T08:43:25.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                        - amount: '345'
                          currency: EUR
                          beneficiary:
                            schema: SEPA
                            iban: FR8312345987650123456789014
                            name: John Jean
                          label: Payment from John Dupont to John Jean
                          payments:
                            - status: EXECUTED
                              amount: '345'
                              currency: EUR
                              execution_date: '2020-01-24T08:43:25.0000000+00:00'
                              creation_date: '2020-01-27T11:23:12.0000000+00:00'
                  _links:
                    - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                    - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                    - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                    - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                  _page:
                    size: '5'
                    total_elements: '50'
                    total_pages: '10'
                    number: '1'
              example:
                orders:
                  - id: 299e1bf6-a95e-11ea-bb37-0242ac130002
                    order_status: NEW
                    creation_date: '2020-01-24T07:42:32.0000000+00:00'
                    auth_url: https://oxlin.com/auth_payment/12/
                    redirect_url: https://my_redirect_url/
                    start_date: '2020-01-24T07:42:32.0000000+00:00'
                    instructions:
                      - amount: '23.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8530003000307599775722N09
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                  - id: 2f4563b6-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: AUTHORIZED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:34:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: SINGLE_PAYMENT
                    start_date: '2020-01-24T08:34:23.0000000+00:00'
                    instructions:
                      - amount: '123.45'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - status: SUBMITTED
                            amount: '123.45'
                            currency: EUR
                            execution_date: '2020-01-24T08:38:12.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                  - id: 363e04a2-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: CLOSED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:38:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: SINGLE_PAYMENT
                    start_date: '2020-01-24T08:38:23.0000000+00:00'
                    instructions:
                      - amount: '12'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - status: EXECUTED
                            amount: '12'
                            currency: EUR
                            execution_date: '2020-01-24T08:40:34.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                  - id: 39d490ea-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: AUTHORIZED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2019-12-24T08:34:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: STANDING_ORDERS
                    start_date: '2019-12-31T23:00:00.0000000+00:00'
                    frequency: WEEKLY
                    instructions:
                      - amount: '33.33'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Recurring payment from John Dupont to Jean Dupond
                        payments:
                          - status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2019-12-31T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                          - status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2020-01-07T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                          - status: EXECUTED
                            amount: '33.33'
                            currency: EUR
                            execution_date: '2020-01-14T23:00:00.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                  - id: 3cf58fea-a95e-11ea-bb37-0242ac130002
                    bic: AXABFRPP
                    order_status: CLOSED
                    payer:
                      schema: SEPA
                      iban: FR7612345987650123456789014
                    creation_date: '2020-01-24T08:40:23.0000000+00:00'
                    redirect_url: https://my_redirect_url/
                    selected_capability: BATCH_PAYMENTS
                    start_date: '2020-01-24T08:40:23.0000000+00:00'
                    instructions:
                      - amount: '45.65'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                          name: Jean Dupond
                        label: Payment from John Dupont to Jean Dupond
                        payments:
                          - status: EXECUTED
                            amount: '45.65'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                      - amount: '23.43'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR7912345987650123456789014
                          name: Jean Doe
                        label: Payment from John Dupont to Jean Doe
                        payments:
                          - status: EXECUTED
                            amount: '23.43'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                      - amount: '345'
                        currency: EUR
                        beneficiary:
                          schema: SEPA
                          iban: FR8312345987650123456789014
                          name: John Jean
                        label: Payment from John Dupont to John Jean
                        payments:
                          - status: EXECUTED
                            amount: '345'
                            currency: EUR
                            execution_date: '2020-01-24T08:43:25.0000000+00:00'
                            creation_date: '2020-01-27T11:23:12.0000000+00:00'
                _links:
                  - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                  - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                  - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                  - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                _page:
                  size: '5'
                  total_elements: '50'
                  total_pages: '10'
                  number: '1'
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/alias:
    get:
      tags:
        - Account alias
      summary: "Returns a list of alias.\n"
      description: "Get the list of alias based on search criteria.\nAn account alias is used to store accounts identification\nin order to be reused for future payments.\n"
      operationId: GetAlias
      parameters:
        - name: user_reference
          in: query
          description: "Unique identifier of a user.\n"
          required: true
          schema:
            $ref: '#/components/schemas/UserReference'
        - name: page
          in: query
          description: "Page number in the pagination.\n"
          schema:
            type: number
          example: 7
        - name: limit
          in: query
          description: "Max number of items to retrieve (limited to 500).\n"
          schema:
            type: number
            default: 100
          example: 20
      responses:
        '200':
          description: A JSON array of alias.
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                required:
                  - orders
                  - _links
                  - _page
                type: object
                properties:
                  aliases:
                    type: array
                    items:
                      $ref: '#/components/schemas/AliasItem'
                    description: "List of alias.\n"
                  _links:
                    required:
                      - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                  _page:
                    $ref: '#/components/schemas/Page'
                description: "Alias response.\n"
                example:
                  aliases:
                    - id: 054b7b60-0d85-4b91-841b-f70163cff8d4
                      user_reference: current_user_reference
                      label: My prefered account
                      account:
                        schema: SEPA
                        iban: FR8530003000307599775722N09
                    - id: a4936e95-918b-4301-a907-e5040814fec1
                      user_reference: current_user_reference
                      label: My secondary account
                      account:
                        schema: SEPA
                        iban: FR8530003000307599775722N09
                  _links:
                    - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                    - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                    - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                    - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                  _page:
                    size: '2'
                    total_elements: '20'
                    total_pages: '10'
                    number: '1'
              example:
                aliases:
                  - id: 054b7b60-0d85-4b91-841b-f70163cff8d4
                    user_reference: current_user_reference
                    label: My prefered account
                    account:
                      schema: SEPA
                      iban: FR8530003000307599775722N09
                  - id: a4936e95-918b-4301-a907-e5040814fec1
                    user_reference: current_user_reference
                    label: My secondary account
                    account:
                      schema: SEPA
                      iban: FR8530003000307599775722N09
                _links:
                  - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                  - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                  - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                  - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                _page:
                  size: '2'
                  total_elements: '20'
                  total_pages: '10'
                  number: '1'
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
    post:
      tags:
        - Account alias
      summary: "Create an alias.\n"
      description: "Create an account alias used to store account identification\nin order to be reused for future payments.\n"
      operationId: PostAlias
      requestBody:
        description: "Description of the account alias to create.\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasItemCreate'
            example:
              user_reference: current_user_reference
              label: My prefered account
              account:
                schema: SEPA
                iban: FR8530003000307599775722N09
      responses:
        '201':
          description: "Created alias.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasItem'
              example:
                id: 054b7b60-0d85-4b91-841b-f70163cff8d4
                user_reference: current_user_reference
                label: My prefered account
                account:
                  schema: SEPA
                  iban: FR8530003000307599775722N09
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '405':
          description: "Method Not Allowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/alias/{alias_id}:
    get:
      tags:
        - Account alias
      summary: "Get a specific account alias.\n"
      description: "Retrieve a specific account alias based on its unique identifier.\nAn account alias is used to store accounts identification\nin order to be reused for future payments.\n"
      operationId: GetAliasAliasId
      parameters:
        - name: alias_id
          in: path
          description: "Unique identifier of an alias.\n"
          required: true
          schema:
            $ref: '#/components/schemas/AliasId'
          example: a58390d9-4672-46d1-8cca-d6fc4ebc652e
      responses:
        '200':
          description: "Requested alias definition.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasItem'
              example:
                id: 054b7b60-0d85-4b91-841b-f70163cff8d4
                user_reference: current_user_reference
                label: My prefered account
                account:
                  schema: SEPA
                  iban: FR8530003000307599775722N09
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
    put:
      tags:
        - Account alias
      summary: "Update a specific alias.\n"
      description: "Update a specific account alias based on its unique identifier.\nIt is possible to update:\n  - `label`: the alias label.\n"
      operationId: PutAliasAliasId
      parameters:
        - name: alias_id
          in: path
          description: "Unique identifier of an alias.\n"
          required: true
          schema:
            $ref: '#/components/schemas/AliasId'
          example: a58390d9-4672-46d1-8cca-d6fc4ebc652e
      requestBody:
        description: "Updates to realize on alias.\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasItemUpdate'
            example:
              label: My new prefered account
      responses:
        '204':
          description: "Alias successfully updated.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
    delete:
      tags:
        - Account alias
      summary: "Delete a specific alias.\n"
      description: "Delete a specific alias based on its unique identifier.\n"
      operationId: DeleteAliasAliasId
      parameters:
        - name: alias_id
          in: path
          description: "Unique identifier of an alias.\n"
          required: true
          schema:
            $ref: '#/components/schemas/AliasId'
          example: a58390d9-4672-46d1-8cca-d6fc4ebc652e
      responses:
        '204':
          description: "Alias successfully deleted.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/providers:
    get:
      tags:
        - Providers
      summary: "Return a list of providers.\n"
      description: "Get the list of `providers` that can be used to initiate payments.\n"
      operationId: GetProviders
      parameters:
        - name: payment_capabilities
          in: query
          description: "Payment capabilities list. OR condition is used when multiple values are set.\n"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PaymentCapability'
        - name: app_to_app_support
          in: query
          description: "AppToApp support list. AND condition is used when multiple values are set.\n"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AppToAppSupport'
        - name: country_codes
          in: query
          description: "Provider countries market supported.\n"
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CountryCode'
        - name: page
          in: query
          description: "Page number in the pagination.\n"
          schema:
            type: number
          example: 7
        - name: limit
          in: query
          description: "Max number of items to retrieve (limited to 500).\n"
          schema:
            type: number
            default: 100
          example: 20
      responses:
        '200':
          description: A JSON array of providers.
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                required:
                  - providers
                  - _links
                  - _page
                type: object
                properties:
                  providers:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderItemInternal'
                    description: "List of providers.\n"
                  _links:
                    required:
                      - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                  _page:
                    $ref: '#/components/schemas/Page'
                description: "Providers response.\n"
                example:
                  providers:
                    - bic: BICTEST1
                      name: Test Bank 1
                      country_codes:
                        - FR
                      base_url: https://www.testbank1.com
                      payment_capabilities:
                        - SINGLE_PAYMENT
                        - SINGLE_INSTANT_PAYMENT
                      logo_url: https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png
                    - bic: BICTEST2
                      name: Test Bank 2
                      country_codes:
                        - FR
                      base_url: https://www.testbank2.com
                      payment_capabilities:
                        - SINGLE_INSTANT_PAYMENT
                      logo_url: https://static.oxlin.io/common/pictures/providers_logos/BICTEST2.png
                  _links:
                    - self: https://pay.oxlin.io/v1/providers?page=1
                    - first: https://pay.oxlin.io/v1/providers?page=1
                    - last: https://pay.oxlin.io/v1/providers?page=10
                    - next: https://pay.oxlin.io/v1/providers?page=2
                  _page:
                    size: '2'
                    total_elements: '50'
                    total_pages: '10'
                    number: '1'
              example:
                providers:
                  - bic: BICTEST1
                    name: Test Bank 1
                    country_codes:
                      - FR
                    base_url: https://www.testbank1.com
                    payment_capabilities:
                      - SINGLE_PAYMENT
                      - SINGLE_INSTANT_PAYMENT
                    logo_url: https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png
                  - bic: BICTEST2
                    name: Test Bank 2
                    country_codes:
                      - FR
                    base_url: https://www.testbank2.com
                    payment_capabilities:
                      - SINGLE_INSTANT_PAYMENT
                    logo_url: https://static.oxlin.io/common/pictures/providers_logos/BICTEST2.png
                _links:
                  - self: https://pay.oxlin.io/v1/providers?page=1
                  - first: https://pay.oxlin.io/v1/providers?page=1
                  - last: https://pay.oxlin.io/v1/providers?page=10
                  - next: https://pay.oxlin.io/v1/providers?page=2
                _page:
                  size: '2'
                  total_elements: '50'
                  total_pages: '10'
                  number: '1'
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/providers/search:
    post:
      tags:
        - Providers
      summary: "Returns a list of providers from search criterion.\n"
      description: "Returns  `providers` based on search criterion such as\nInternational Bank Account Number (IBAN). Only 'providers' returned\nwith `payment_capabilities` can be used to initiate payments. If\n`payment_capabilities` is undefined,  Linxo Connect Payments doesn't support\nit as `payer` provider.\n"
      operationId: PostProvidersSearch
      parameters:
        - name: page
          in: query
          description: "Page number in the pagination.\n"
          schema:
            type: number
          example: 7
        - name: limit
          in: query
          description: "Max number of items to retrieve (limited to 500).\n"
          schema:
            type: number
            default: 100
          example: 20
      requestBody:
        description: "Search criterion for 'providers' search.\n"
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProviderSearchQueryItem'
            examples:
              Supported provider:
                value:
                  payer:
                    - schema: SEPA
                      iban: FR7612345987650123456789014
              Unsupported provider:
                value:
                  payer:
                    schema: SEPA
                    iban: FR9212345987650123456789056
      responses:
        '200':
          description: "Requested providers definitions.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                required:
                  - result
                  - _links
                  - _page
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderSearchResultItem'
                  _links:
                    required:
                      - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                  _page:
                    $ref: '#/components/schemas/Page'
                description: "Search result.\n"
              examples:
                Supported provider:
                  value:
                    result:
                      - payer:
                          schema: SEPA
                          iban: FR7612345987650123456789014
                        providers:
                          - bic: BICTEST1
                            name: Test Bank 1
                            country_codes:
                              - FR
                            base_url: https://www.testbank1.com
                            payment_capabilities:
                              - SINGLE_PAYMENT
                              - SINGLE_INSTANT_PAYMENT
                            logo_url: https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png
                    _links:
                      - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                      - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                      - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                      - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                    _page:
                      size: '1'
                      total_elements: '1'
                      total_pages: '1'
                      number: '1'
                Unsupported provider:
                  value:
                    result:
                      - payer:
                          schema: SEPA
                          iban: FR9212345987650123456789056
                        providers:
                          - bic: AGRIFRPP882
                            name: CRCAM DE PARIS ET D ILE DE FRANCE
                            country_code:
                              - FR
                            logo_url: https://static.oxlin.io/common/pictures/providers_logos/country.png
                    _links:
                      - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                      - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                      - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                      - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                    _page:
                      size: '1'
                      total_elements: '1'
                      total_pages: '1'
                      number: '1'
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/authorized_accounts:
    get:
      tags:
        - Authorized Accounts
      summary: "Returns a list of Authorized accounts.\n"
      description: "Return a list of Authorized accounts.\n\nFor Authorized Accounts using `Sanbox Mode`, this endpoint returns 2 accounts\n\n- First account ID: `99999999-ffff-9999-ffff-999999999999`\n\n- Second account ID: `ffffffff-ffff-9999-ffff-999999999999`\n"
      operationId: GetAuthorizedAccounts
      parameters:
        - name: page
          in: query
          description: "Page number in the pagination.\n"
          schema:
            type: number
          example: 7
        - name: limit
          in: query
          description: "Max number of items to retrieve (limited to 500).\n"
          schema:
            type: number
            default: 100
          example: 20
      responses:
        '200':
          description: A JSON array of Authorized accounts.
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                required:
                  - _links
                  - _page
                type: object
                properties:
                  authorizedAccounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuthorizedAccountsItemCreate'
                    description: "List of Authorized accounts.\n"
                  _links:
                    required:
                      - self
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                  _page:
                    $ref: '#/components/schemas/Page'
                description: "Authorized accounts response.\n"
                example:
                  authorizedAccounts:
                    - id: 99999999-ffff-9999-ffff-999999999999
                      service_level: FULL
                      identification:
                        schema: SEPA
                        iban: FR8530003000307599775722N09
                        name: MY SANDBOX COMPANY
                      entity:
                        type: COMPANY
                        company_name: MY SANDBOX COMPANY
                        national_identification: '99999999999999'
                    - id: ffffffff-ffff-9999-ffff-999999999999
                      service_level: FULL
                      identification:
                        schema: FPS
                        name: Joe Sandbox
                        sort_code: '999999'
                        account_number: '99999999'
                      entity:
                        type: NATURAL_PERSON
                        firstname: Joe
                        surname: Sandbox
                        birth_date: '1978-09-13'
                        birth_city: Paris
                        birth_country: fr
                  _links:
                    - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                    - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                    - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                    - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                  _page:
                    size: '2'
                    total_elements: '20'
                    total_pages: '10'
                    number: '1'
              example:
                authorizedAccounts:
                  - id: 99999999-ffff-9999-ffff-999999999999
                    service_level: FULL
                    identification:
                      schema: SEPA
                      iban: FR8530003000307599775722N09
                      name: MY SANDBOX COMPANY
                    entity:
                      type: COMPANY
                      company_name: MY SANDBOX COMPANY
                      national_identification: '99999999999999'
                  - id: ffffffff-ffff-9999-ffff-999999999999
                    service_level: FULL
                    identification:
                      schema: FPS
                      name: Joe Sandbox
                      sort_code: '999999'
                      account_number: '99999999'
                    entity:
                      type: NATURAL_PERSON
                      firstname: Joe
                      surname: Sandbox
                      birth_date: '1978-09-13'
                      birth_city: Paris
                      birth_country: fr
                _links:
                  - self: https://pay.oxlin.io/v1/reporting/orders?page=1
                  - first: https://pay.oxlin.io/v1/reporting/orders?page=1
                  - last: https://pay.oxlin.io/v1/reporting/orders?page=10
                  - next: https://pay.oxlin.io/v1/reporting/orders?page=2
                _page:
                  size: '2'
                  total_elements: '20'
                  total_pages: '10'
                  number: '1'
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
    post:
      tags:
        - Authorized Accounts
      summary: "Create an Authorized account.\n"
      description: "Create an Authorized account.\n\nFor Authorized Accounts using `Sanbox Mode`, you have to use the request samples documented below.\n\nThe `Sanbox Mode` returns the related response sample with `FULL` service level.\n"
      operationId: PostAuthorizedAccounts
      requestBody:
        description: "Description of the Authorized account to create. Based on transmitted parameters,\nyou will be able to create a SEPA account or a FPS account with identification for a company or for a natural person\n"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizedAccountsItem'
            examples:
              SEPA account identification for a company:
                value:
                  identification:
                    schema: SEPA
                    iban: FR8530003000307599775722N09
                    name: MY SANDBOX COMPANY
                  entity:
                    type: COMPANY
                    company_name: MY SANDBOX COMPANY
                    national_identification: '99999999999999'
              FPS account identification for a natural person:
                value:
                  identification:
                    schema: FPS
                    name: Joe Sandbox
                    sort_code: '999999'
                    account_number: '99999999'
                  entity:
                    type: NATURAL_PERSON
                    firstname: Joe
                    surname: Sandbox
                    birth_date: '1978-09-13'
                    birth_city: Paris
                    birth_country: fr
      responses:
        '201':
          description: "Created Authorized account.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedAccountsItemCreate'
              examples:
                SEPA account identification for a company:
                  value:
                    id: 99999999-ffff-9999-ffff-999999999999
                    service_level: FULL
                    identification:
                      schema: SEPA
                      iban: FR8530003000307599775722N09
                      name: MY SANDBOX COMPANY
                    entity:
                      type: COMPANY
                      company_name: MY SANDBOX COMPANY
                      national_identification: '99999999999999'
                FPS account identification for a natural person:
                  value:
                    id: ffffffff-ffff-9999-ffff-999999999999
                    service_level: FULL
                    identification:
                      schema: FPS
                      name: Joe Sandbox
                      sort_code: '999999'
                      account_number: '99999999'
                    entity:
                      type: NATURAL_PERSON
                      firstname: Joe
                      surname: Sandbox
                      birth_date: '1978-09-13'
                      birth_city: Paris
                      birth_country: fr
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '405':
          description: "Method Not Allowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '422':
          description: "Unprocessable Entity.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '503':
          description: "Service Unavailable.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/authorized_accounts/{authorized_account_id}:
    get:
      tags:
        - Authorized Accounts
      summary: "Get a specific Authorized Account.\n"
      description: "Retrieve a specific Authorized Account based on its unique identifier.\n\nFor Authorized Accounts using `Sanbox Mode`, this endpoint returns 2 accounts\n\n- First account ID: `99999999-ffff-9999-ffff-999999999999`\n\n- Second account ID: `ffffffff-ffff-9999-ffff-999999999999`\n"
      operationId: GetAuthorizedAccountAuthorizedAccountId
      parameters:
        - name: authorized_account_id
          in: path
          description: "AuthorizedAccounts Unique identifier .\n"
          required: true
          schema:
            $ref: '#/components/schemas/AuthorizedAccountId'
          example: c93a95fc-602c-4a63-8df5-06e1c2a06254
      responses:
        '200':
          description: "Requested Authorized account definition.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizedAccountsItemCreate'
              examples:
                SEPA account identification for a company:
                  value:
                    id: 99999999-ffff-9999-ffff-999999999999
                    service_level: FULL
                    identification:
                      schema: SEPA
                      iban: FR8530003000307599775722N09
                      name: MY SANDBOX COMPANY
                    entity:
                      type: COMPANY
                      company_name: MY SANDBOX COMPANY
                      national_identification: '99999999999999'
                FPS account identification for a natural person:
                  value:
                    id: ffffffff-ffff-9999-ffff-999999999999
                    service_level: FULL
                    identification:
                      schema: FPS
                      name: Joe Sandbox
                      sort_code: '999999'
                      account_number: '99999999'
                    entity:
                      type: NATURAL_PERSON
                      firstname: Joe
                      surname: Sandbox
                      birth_date: '1978-09-13'
                      birth_city: Paris
                      birth_country: fr
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
    delete:
      tags:
        - Authorized Accounts
      summary: "Delete a specific Authorized account.\n"
      description: "Delete a specific Authorized account based on its unique identifier.\n\nFor Authorized Accounts using `Sanbox Mode`, this endpoint returns `HTTP 204` code for the following accounts:\n\n- First account ID: `99999999-ffff-9999-ffff-999999999999`\n\n- Second account ID: `ffffffff-ffff-9999-ffff-999999999999`\n"
      operationId: DeleteAuthorizedAccountAuthorizedAccountId
      parameters:
        - name: authorized_account_id
          in: path
          description: "AuthorizedAccounts Unique identifier .\n"
          required: true
          schema:
            $ref: '#/components/schemas/AuthorizedAccountId'
          example: c93a95fc-602c-4a63-8df5-06e1c2a06254
      responses:
        '204':
          description: "Authorized account successfully deleted.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/reporting/orders/{order_id}/history:
    get:
      tags:
        - Payment orders
      summary: "Get the history of a specific order.\n"
      description: "Retrieve a specific order based on its unique identifier.\nEach order represent one or more payments,\ntoday or in the future, to a unique beneficiary or multiples\nbeneficiaries. An order is associated to a unique payment initiation,\nas a consequence it is associated to a unique authentication from the\nPSU bank.\n"
      operationId: GetReportingOrdersOrderIdHistory
      parameters:
        - name: order_id
          in: path
          description: "Unique identifier of an order.\n"
          required: true
          schema:
            $ref: '#/components/schemas/OrderId'
          example: 14d51b74-175a-11eb-adc1-0242ac120002
        - name: X-Request-ID
          in: header
          description: "Format - uuid. ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
          required: true
          schema:
            type: string
          example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
        - name: Authorization
          in: header
          description: "Client credential OAuth2 authorization bearer. Composed by `Bearer` followed after\na space by the access token retrieved using `/token` endpoint.\n"
          required: true
          schema:
            type: string
          example: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI3OTI4ZDExZGIxYTc4Nzg0NDFiOSIsImlzcyI6Imh0dHBzOi8vc2FuZGJveC1hdXRoLm94bGluLmlvIiwic3ViIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiYXVkIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiZXhwIjoxNTk0MTk3ODE0LCJpYXQiOjE1OTQxOTQyMTQsInNjb3BlIjoidXNlcnNfY3JlYXRlIHByb2ZpbGUgb3BlbmlkIn0.QFhD4VxSV1kzoBmjbRK5gi1r1Mf5hP6XbuTA8jsE7EQ8tdihTYAmpjyCDat2l8gyssinXMFlUOEaT0pnE_D1svDQWj-AGjOqj3_fmGJw1FAMaHfGvXCKBh3CTmNpCsd0fiQr6ocjI12DFYxVyK1fSFic-ix24kcEE_e7Z8AADI0jz_1z3Ls1rEMsqxvGk9pyZLJvum5xMWS9ZEWUBhjEZjSDlta_d9H8C5rF3GCW5NnDDyUDP0PZ1oQmR6ZIBY6rlASpq6n_VaRXR96koK00BZTLlwDwt8VUOQqDktIUc6h8MxRv4UFQmHYkOyIHZREsECwqPIlmU1hRzXH6qHqNtTIwJG0u9ccdioBTQzgnbYoLSGbCFgP1OUS95f2BbiQ633t89PfPV9Eioah5AaisuV4vudAsoUYAVnb04LAMpagI6Ym8bbp-b2_SuPBedtvtjBCxgZI7fnkw1JFGT5Io3ZNMn93AhAMXVdqxSqPR3lswB_2I3EK7fasLLFnJYcTZdgAqXvOEDUlI25cRmPIE4kik8c2Qz2V_oYsdFCWdW9acQ40Rq56JD2fJWPm0jYlncBmPJ2gSrinA-j--jyatnYoy7kBcGxfr_SG3vAwS03L7z-Aiowbdl9Bjvn3UXPqZFDc8tGSOLhBLD7JQxtIswlXo43huDTCya86tBgNfHm4
      responses:
        '200':
          description: "Requested order history.\n"
          headers:
            X-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                properties:
                  history:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderHistoryItem'
                    description: "Describe the history of the order with an entry per order event. No information returned when order have no history.\n"
              example:
                - date: '2022-12-07T16:19:07.6000000+00:00'
                  method: POST
                  feature: order
                  status: 201
                  type: ApiHistoryItem
                - date: '2022-12-07T16:19:07.6520000+00:00'
                  content: NONE->NEW
                  type: SimpleHistoryItem
                - date: '2022-12-07T16:19:30.0730000+00:00'
                  method: PUT
                  feature: order
                  status: 204
                  type: ApiHistoryItem
                - date: '2022-12-07T16:19:35.3080000+00:00'
                  method: PUT
                  feature: order
                  status: 204
                  type: ApiHistoryItem
                - date: '2022-12-07T16:19:35.6290000+00:00'
                  method: GET
                  feature: authorize
                  status: 201
                  type: ApiHistoryItem
                - date: '2022-12-07T16:19:35.8640000+00:00'
                  content: NEW->CLOSED
                  type: SimpleHistoryItem
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/subscribe:
    post:
      tags:
        - Callback webhooks
      summary: "Register webhook callback URL.\n"
      description: "Register your system webhook callback URL we will call each time a resource\nwill be updated. When registered, callback URL will be called as\n`GET https://your.callback.url?resource_type=YYYYYY&resource_id=XXXXXX`\nwith `YYYYYY` the type of updated resource and `XXXXXX` its reference.\nTo know changes on the resource, you need to call the resource specific\nmethod. For instance if the resource is an order, you will call\n`GET v1/running/orders/XXXXXX`in order to get the updated object and\nmanage actions on your system accordingly.\n"
      operationId: PostSubscribe
      requestBody:
        description: "Definition of webhook callback to register.\n"
        content:
          application/json:
            schema:
              required:
                - callback_url
              type: object
              properties:
                callback_url:
                  $ref: '#/components/schemas/CallbackURL'
              example:
                callback_url: https://domain/callback
            example:
              callback_url: https://domain/callback
      responses:
        '201':
          description: "Webhook callback successfully registered.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '405':
          description: "Method Not Allowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '415':
          description: "Unsupported media type.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /v1/unsubscribe:
    post:
      tags:
        - Callback webhooks
      summary: "Unregister the webhook callback URL.\n"
      description: "Unregister your system webhook callback URL that will be not called anymore.\n"
      operationId: PostUnsubscribe
      responses:
        '204':
          description: "No content.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '400':
          description: "Invalid parameters, they don't respect schema or parameter value\naren't acceptable according current state.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '401':
          description: "Unauthorized, authentication failure.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '403':
          description: "Forbidden, authentication successful but access to resource is not\nallowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '404':
          description: "Not found, no request available.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '405':
          description: "Method Not Allowed.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
        '500':
          description: "Internal server error.\n"
          headers:
            X-FWD-Request-ID:
              description: "ID of the request used for support, unique for each call, as determined\nby the initiating party. As a consequence, you have to generate a\nunique value each time you call any API endpoint, even for two calls\nmade in two different days. Best way to achieve ths is to use the UUID\ngenerator provided by your development framework.\n"
              required: true
              schema:
                type: string
              example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                default:
                  value: 
  /openapi.yaml:
    get:
      tags:
        - metaservices
      summary: Returns OpenAPI service description for a REST service
      description: "Retrieve Open API specification for this api.\n"
      operationId: GetOpenAPI
      responses:
        '200':
          description: "The Open API spec.\n"
components:
  securitySchemes:
    AADToken:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://api.ribpay.app/oauth/token
          refreshUrl: https://api.ribpay.app/oauth/token
          scopes:
            'https://api.ribpay.app/.default': Grants complete read/write access to the API.
  parameters:
    X-FWD-Request-ID:
      name: X-FWD-Request-ID
      in: header
      description: |
        ID of the request, unique to the call, as determined by the initiating
        party and transmitted to the ASPSP.
      required: true
      example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
      schema:
        type: string
        format: uuid
    BearerAuthorization:
      name: Authorization
      in: header
      description: >
        Client credential OAuth2 authorization bearer. Composed by `Bearer`
        followed after

        a space by the access token retrieved using `/token` endpoint.
      required: true
      example: Bearer
        eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI3OTI4ZDExZGIxYTc4Nzg0NDFiOSIsImlzcyI6Imh0dHBzOi8vc2FuZGJveC1hdXRoLm94bGluLmlvIiwic3ViIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiYXVkIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiZXhwIjoxNTk0MTk3ODE0LCJpYXQiOjE1OTQxOTQyMTQsInNjb3BlIjoidXNlcnNfY3JlYXRlIHByb2ZpbGUgb3BlbmlkIn0.QFhD4VxSV1kzoBmjbRK5gi1r1Mf5hP6XbuTA8jsE7EQ8tdihTYAmpjyCDat2l8gyssinXMFlUOEaT0pnE_D1svDQWj-AGjOqj3_fmGJw1FAMaHfGvXCKBh3CTmNpCsd0fiQr6ocjI12DFYxVyK1fSFic-ix24kcEE_e7Z8AADI0jz_1z3Ls1rEMsqxvGk9pyZLJvum5xMWS9ZEWUBhjEZjSDlta_d9H8C5rF3GCW5NnDDyUDP0PZ1oQmR6ZIBY6rlASpq6n_VaRXR96koK00BZTLlwDwt8VUOQqDktIUc6h8MxRv4UFQmHYkOyIHZREsECwqPIlmU1hRzXH6qHqNtTIwJG0u9ccdioBTQzgnbYoLSGbCFgP1OUS95f2BbiQ633t89PfPV9Eioah5AaisuV4vudAsoUYAVnb04LAMpagI6Ym8bbp-b2_SuPBedtvtjBCxgZI7fnkw1JFGT5Io3ZNMn93AhAMXVdqxSqPR3lswB_2I3EK7fasLLFnJYcTZdgAqXvOEDUlI25cRmPIE4kik8c2Qz2V_oYsdFCWdW9acQ40Rq56JD2fJWPm0jYlncBmPJ2gSrinA-j--jyatnYoy7kBcGxfr_SG3vAwS03L7z-Aiowbdl9Bjvn3UXPqZFDc8tGSOLhBLD7JQxtIswlXo43huDTCya86tBgNfHm4
      schema:
        type: string
    OrderIdParam:
      name: order_id
      in: path
      description: |
        Unique identifier of an order.
      required: true
      example: 14d51b74-175a-11eb-adc1-0242ac120002
      schema:
        $ref: "#/components/schemas/OrderId"
    ClientIdParam:
      name: client_id
      in: query
      description: |
        Client identifier of the owner of referenced `orders`.
      required: true
      example: c93a95fc-602c-4a63-8df5-06e1c2a06253
      schema:
        type: string
    Language:
      name: locale
      in: query
      description: |
        Browser language to use in form:
        - language-code_language-variant
        - language-code
        Browser language to use with ISO-639 two letters language code optional
        followed by _ and the two letters ISO-3166 country code (override
        browser language detection):
        - language-code_country_code
        - language-code
        Valid values samples:
        - `en`
        - `en_EN`, `en_GB`, `en_US`
        - `fr`
        - `fr_FR`
      required: false
      example: en_EN
      schema:
        type: string
    LanguageDeprecated:
      deprecated: true
      name: lng
      in: query
      description: |
        Replaced by `locale`. Browser language to use in form:
        - language-code_language-variant
        - language-code

        Valid values samples:
        - `en`
        - `en_EN`, `en_GB`, `en_US`
        - `fr`
        - `fr_FR`
      required: false
      example: en_EN
      schema:
        type: string
    Countries:
      name: countries
      in: query
      description: |
        Restricted list of bank countries the user is asked to connect to. Filter
        is composed by a list of ISO-3166 Alpha-2 countries descriptor.
        If undefined, all available banks will be available.
      required: false
      example: fr, pt
      schema:
        type: array
        items:
          $ref: "#/components/schemas/CountryCode"
    FavoriteProviders:
      name: favorite_providers
      in: query
      description: >
        Define a list of favorites providers that will be displayed by default

        on the bank list screen.

        - If `favorite_providers` is undefined, we display the list of most used banks

        with a “See all banks” button used to display the

        entire bank list.

        - If `favorite_providers` is defined with valid BIC list, we display banks

        within the list with a “See all banks” button used to display

        the entire bank list.

        - If `favorite_providers` is defined with <EMPTY> value or only invalid

        BIC list, we display the entire bank list without any “See all banks” button.
      required: false
      example: AGRIFRP1ACF,SIBLFRPP,CMCIFRPA
      schema:
        type: array
        items:
          $ref: "#/components/schemas/PayerBic"
    Title:
      name: title
      in: query
      description: |
        Override widget displayed title.
      required: false
      example: New title
      schema:
        type: string
    TermsHeader:
      name: terms_header
      in: query
      description: |
        Terms and conditions page header customized value. Use `%MAIL%` text
        if you need to integrate user mail.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Vous serez redirigé vers votre banque en ligne pour vous authentifier
        et valider votre paiement. Une fois le paiement réalisé vous recevrez
        une confirmation par email à l'adresse %MAIL%
      schema:
        type: string
        maxLength: 128
    TermsFooter:
      deprecated: true
      name: terms_footer
      in: query
      description: |
        Terms and conditions page footer customized value.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Oxlin établissement de paiement agréé par l’ACPR - Banque de France
        sous le numéro 16928.
      schema:
        type: string
        maxLength: 128
    TermsBody:
      name: terms_body
      in: query
      description: |
        Terms and conditions page body customized value using markdown syntax.
        To link static terms and conditions page, use
        `[link description](https://link.destination)`.
        > Customization not available if you are using Oxlin agreement.

        > When using your agreement, if not set we won't display terms page. As
        > a consequence, you won't have access to folowing capabilities:
        > - Ask user to register IBAN.
        > - Display a QR Code on non mobile device if AppToApp flow is
        > supported by the bank.
      required: false
      example: >
        Ce service est opéré par Linxo Connect, établissement de paiement agrée
        par l'ACPR.  En continuant vous acceptez les conditions générales de Linxo
        Connect Payments et  la politique de confidentialité Linxo Connect
      schema:
        type: string
        maxLength: 512
    InstantPaymentHeader:
      name: instant_payment_header
      in: query
      description: >
        Instant payment feature page header customized value using markdown
        syntax.

        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Choisissez le type de virement
      schema:
        type: string
        maxLength: 512
    InstantPaymentText:
      name: instant_payment_text
      in: query
      description: >
        Instant payment feature page header customized value using markdown
        syntax.

        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        En choisissant de réaliser un virement instantané...
      schema:
        type: string
        maxLength: 128
    SinglePaymentText:
      name: single_payment_text
      in: query
      description: >
        Instant payment feature page header customized value using markdown
        syntax.

        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Réaliser un virement standard...
      schema:
        type: string
        maxLength: 128
    InstantPaymentFooterDeprecated:
      deprecated: true
      name: instant_payment_footer
      in: query
      description: >
        Instant payment feature page footer customized value using markdown
        syntax.

        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Le virement instantané peut vous être facturé par votre banque.
      schema:
        type: string
        maxLength: 512
    ProvidersHeader:
      deprecated: true
      name: providers_header
      in: query
      description: |
        Provider search page header customized value.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Rechercher votre banque :
      schema:
        type: string
        maxLength: 64
    ProvidersSearchHint:
      name: providers_search_hint
      in: query
      description: |
        Provider search page input placeholder customized value.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Rechercher…
      schema:
        type: string
        maxLength: 64
    Font:
      name: font
      in: query
      description: |
        Font to use in page (CSS representation).
      required: false
      example: italic small-caps bold 12px/30px Georgia, serif
      schema:
        type: string
    FontColor:
      name: font_color
      in: query
      description: |
        Font color to use in page (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    FontSecondaryColor:
      name: font_secondary_color
      in: query
      description: |
        Font secondary color to use in page for buttons (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    BackgroundColor:
      name: background_color
      in: query
      description: |
        Background color (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    ElementsFont:
      name: elements_font
      in: query
      description: |
        Font to use for primary elements (CSS representation).
      required: false
      example: italic small-caps bold 12px/30px Georgia, serif
      schema:
        type: string
    ElementsColor:
      name: elements_color
      in: query
      description: |
        Primary elements color to use (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    ForegroundColorDeprecated:
      deprecated: true
      name: foreground_color
      in: query
      description: |
        Replaced by `elements_color`. Foreground color (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    ElementsFontColor:
      name: elements_font_color
      in: query
      description: |
        Font color to use for primary elements (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    SecondaryElementsColor:
      name: secondary_elements_color
      in: query
      description: |
        Secondary elements color to use (CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    SecondaryElementsFontColor:
      name: secondary_elements_font_color
      in: query
      description: |
        Font color to use for secondary elements(CSS representation).
      required: false
      example: Blue
      schema:
        type: string
    DisplayBorder:
      name: display_border
      in: query
      description: |
        When false, page is rendered without any border.
      required: false
      schema:
        type: boolean
        default: true
    Light:
      name: light
      in: query
      description: |
        Depending on regulation status and constraints, when true, we will hide
        payment summary.
      required: false
      schema:
        type: boolean
        default: false
    ButtonRadius:
      name: button_radius
      in: query
      description: |
        Buttons radius value in `px`.
      required: false
      schema:
        type: number
        default: 5
    CancelURL:
      name: cancel_url
      in: query
      description: |
        When set, widget will display a cancel link redirecting to that URL.
      required: false
      schema:
        type: string
        maxLength: 512
    AskForAlias:
      name: ask_for_alias
      in: query
      description: |
        When set to true in association with a valid value for
        `orders.user_reference`, payer is asked to register is
        account just before redirecting him to his bank
        authentication flow.
      required: false
      schema:
        type: boolean
        default: true
    AskForIBAN:
      name: ask_for_iban
      in: query
      description: |
        When set to true, payer can directly type its payment account IBAN.
      required: false
      schema:
        type: boolean
        default: false
    DisplayQRCode:
      name: display_qr_code
      in: query
      description: >
        When set to true, if the bank support app to app flow and if the payment
        page is

        not displayed using a mobile phone, we will display a QR code giving a way to optimize

        payment flow opening the bank application.
      required: false
      schema:
        type: boolean
        default: true
    DisplayHeader:
      name: display_header
      in: query
      description: |
        When false, page is rendered without header including back arrow.
      required: false
      schema:
        type: boolean
        default: true
    ItemBorderColor:
      name: item_border_color
      in: query
      description: |
        Items border color using (CSS representation), no border if undefined.
      required: false
      example: Blue
      schema:
        type: string
    ItemBorderRadius:
      name: item_border_radius
      in: query
      description: |
        Item border radius value in `px`.
      required: false
      schema:
        type: number
        default: 0
    ItemArrowColor:
      name: item_arrow_color
      in: query
      description: |
        Items arrow color using (CSS representation), no arrow if undefined.
      required: false
      example: Blue
      schema:
        type: string
    ButtonArrowColor:
      name: button_arrow_color
      in: query
      description: |
        Button arrow color using (CSS representation), no arrow if undefined.
      required: false
      example: Blue
      schema:
        type: string
    ButtonSize:
      name: button_size
      in: query
      description: |
        Button size:
        - `SMALL`: Button size is small.
        - `LARGE`: Button size is large.
      required: false
      example: LARGE
      schema:
        type: string
        enum:
          - SMALL
          - LARGE
        default: SMALL
    ButtonAlignment:
      name: button_alignment
      in: query
      description: >
        Button size:

        - `LEFT_TOP`: horizontal alignment left, vertical alignement top.

        - `CENTER_TOP`: horizontal alignment center, vertical alignement top.

        - `RIGHT_TOP`: horizontal alignment right, vertical alignement top.

        - `LEFT_BOTTOM`: horizontal alignment left, vertical alignement bottom.

        - `CENTER_BOTTOM`: horizontal alignment center, vertical alignement bottom.

        - `RIGHT_BOTTOM`: horizontal alignment right, vertical alignement bottom.
      required: false
      example: CENTER_BOTTOM
      schema:
        type: string
        enum:
          - LEFT_TOP
          - CENTER_TOP
          - RIGHT_TOP
          - LEFT_BOTTOM
          - CENTER_BOTTOM
          - RIGHT_BOTTOM
        default: LEFT_BOTTOM
    PageParam:
      name: page
      in: query
      description: |
        Page number in the pagination.
      required: false
      example: "7"
      schema:
        type: number
        x-constraint:
          positive: true
    LimitParam:
      name: limit
      in: query
      description: |
        Max number of items to retrieve (limited to 500).
      required: false
      example: "20"
      schema:
        type: number
        default: 100
        maximum: 500
        x-constraint:
          positive: true
    FromCreationDateParam:
      name: date_from
      in: query
      description: |
        Inclusive minimal creation date.
        ISO 8601 format is used. Default value when not set will be
        the value giving maximum history size.
      required: false
      schema:
        type: string
        format: date-time
        example: 2019-12-12T13:34:45+01:00
    ToCreationDateParam:
      name: date_to
      in: query
      description: |
        Inclusive maximal creation date.
        ISO 8601 format is used. Default value when not set will be
        current date-time.
      required: false
      schema:
        type: string
        format: date-time
        example: 2019-12-12T13:34:45+01:00
    FromExecutionDateParam:
      name: execution_date_from
      in: query
      description: |
        Inclusive minimal execution date of a payment instruction.
        ISO 8601 format is used. Default value when not set will be
        the value giving maximum history size.
      required: false
      schema:
        type: string
        format: date-time
        example: 2019-12-12T13:34:45+01:00
    OrderStatusParam:
      name: order_status
      in: query
      description: |
        Orders status list.
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/OrderStatus"
    UserReferenceParam:
      name: user_reference
      in: query
      description: |
        Unique identifier of a user.
      required: false
      schema:
        $ref: "#/components/schemas/UserReference"
    DataForSearchingOrdersParam:
      name: data_for_searching_orders
      in: query
      description: |
        String in the following order data:
        - user reference (full text search)
        - payer email (full text search)
        - payer name (full text search)
        - payer account (strict search)
        - instruction label (full text search)
        - beneficiary name (full text search)
        - beneficiary account (strict search)
        - payer country (full text search)
        - beneficiary country (full text search)
      required: false
      schema:
        type: string
        maxLength: 36
    FromAmountParam:
      name: amount_from
      in: query
      description: >
        Inclusive minimal amount given with fractional digits, where fractions
        must be

        compliant to the currency definition. Up to 14 significant figures.

        Negative amounts are signed by minus. The decimal separator is a dot.


        Valid representations for amount with up to two decimals are:
          - 1056
          - 5768.2
          - -1.50
          - 5877.78.
      required: false
      schema:
        type: string
        pattern: ^-?[0-9]{1,14}(\.[0-9]{1,3})?$
        example: "5877.78"
    ToAmountParam:
      name: amount_to
      in: query
      description: >
        Inclusive maximal amount given with fractional digits, where fractions
        must be

        compliant to the currency definition. Up to 14 significant figures.

        Negative amounts are signed by minus. The decimal separator is a dot.


        Valid representations for amount with up to two decimals are:
          - 1056
          - 5768.2
          - -1.50
          - 5877.78.
      required: false
      schema:
        type: string
        pattern: ^-?[0-9]{1,14}(\.[0-9]{1,3})?$
        example: "5877.78"
    CurrencyParam:
      name: currency
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/CurrencyCode"
    X-Request-ID:
      name: X-Request-ID
      in: header
      description: |
        ID of the request used for support, unique for each call, as determined
        by the initiating party. As a consequence, you have to generate a
        unique value each time you call any API endpoint, even for two calls
        made in two different days. Best way to achieve ths is to use the UUID
        generator provided by your development framework.
      required: true
      example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
      schema:
        type: string
        format: uuid
    AliasIdParam:
      name: alias_id
      in: path
      description: |
        Unique identifier of an alias.
      required: true
      example: a58390d9-4672-46d1-8cca-d6fc4ebc652e
      schema:
        $ref: "#/components/schemas/AliasId"
    UserReferenceRequiredParam:
      name: user_reference
      in: query
      description: |
        Unique identifier of a user.
      required: true
      schema:
        $ref: "#/components/schemas/UserReference"
    PaymentCapabilitiesParam:
      name: payment_capabilities
      in: query
      description: >
        Payment capabilities list. OR condition is used when multiple values are
        set.
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/PaymentCapability"
    AppToAppSupportParam:
      name: app_to_app_support
      in: query
      description: |
        AppToApp support list. AND condition is used when multiple values are set.
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/AppToAppSupport"
    CountryCodeParam:
      name: country_codes
      in: query
      description: |
        Provider countries market supported.
      required: false
      schema:
        type: array
        items:
          $ref: "#/components/schemas/CountryCode"
    ResourceTypeParam:
      name: resource_type
      in: path
      description: |
        Type of a resource.
      required: true
      example: ORDERS
      schema:
        $ref: "#/components/schemas/ResourceType"
    ResourceIdParam:
      name: resource_id
      in: path
      description: |
        Unique identifier of a resource.
      required: true
      example: 34b4b62a-1363-11eb-adc1-0242ac120002
      schema:
        $ref: "#/components/schemas/ResourceId"
    AuthorizedAccountIdParam:
      name: authorized_account_id
      in: path
      description: |
        AuthorizedAccounts Unique identifier .
      required: true
      example: c93a95fc-602c-4a63-8df5-06e1c2a06254
      schema:
        $ref: "#/components/schemas/AuthorizedAccountId"
  headers:
    X-FWD-Request-ID:
      description: |
        ID of the request used for support, unique for each call, as determined
        by the initiating party. As a consequence, you have to generate a
        unique value each time you call any API endpoint, even for two calls
        made in two different days. Best way to achieve ths is to use the UUID
        generator provided by your development framework.
      required: true
      example: 99391c7e-ad88-49ec-a2ad-99ddcb1f7721
      schema:
        type: string
        format: uuid
    Location:
      description: |
        Location where to browse the content.
      required: true
      example: https://domain.com/context?param=value
      schema:
        type: string
        format: uri
  responses:
    "204":
      description: |
        No content.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "400":
      description: |
        Invalid parameters, they don't respect schema or parameter value
        aren't acceptable according current state.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "401":
      description: |
        Unauthorized, authentication failure.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "403":
      description: |
        Forbidden, authentication successful but access to resource is not
        allowed.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "404":
      description: |
        Not found, no request available.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "405":
      description: |
        Method Not Allowed.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "415":
      description: |
        Unsupported media type.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "422":
      description: |
        Unprocessable Entity.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "500":
      description: |
        Internal server error.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
    "503":
      description: |
        Service Unavailable.
      headers:
        X-FWD-Request-ID:
          $ref: "#/components/headers/X-FWD-Request-ID"
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/ErrorModel"
  schemas:
    ErrorModel:
      required:
        - error
        - error_description
      type: object
      properties:
        error:
          enum:
            - BANK_ERROR
            - FORMAT_ERROR
            - BAD_PARAMETER
            - INTERNAL_ERROR
            - RESOURCE_UNKNOWN
            - NO
            - invalid_request
            - invalid_client
          type: string
          description: "Error code (can be used to manage error on the client).\n"
        error_description:
          maxLength: 512
          type: string
          description: "Human readable english text that describes the error (can be used in\nlogs).\n"
        id:
          maxLength: 140
          type: string
          description: "Identifies the resource (when applicable).\n"
      description: "Generic error report structure.\n"
      example:
        error: PARAMETER_MISSING
        error_description: Missing request header 'X-FWD-Request-ID' for method parameter of type String
        id: /v3/order/1234567/
    UserReference:
      maxLength: 36
      type: string
      description: "Unique user reference.\n"
      example: User567498s
    InputPayerBic:
      pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      type: string
      description: "Payer bank identifier code allocated to a financial institution by the ISO 9362 Registration\nAuthority as described in ISO 9362 \"Banking - Banking telecommunication\nmessages - Business identification code (BIC)\". If no value is transmitted, if transmitted\nvalue is invalid or referenced bank not supported, order creation will fail.\n"
      example: AXABFRPP
    InstantPaymentType:
      enum:
        - EXPECTED
        - USER_CHOICE
        - NO
      type: string
      description: "Define expectation according instant payment:\n- `EXPECTED`: only instant payment can be offered to initialize a payment.\n- `USER_CHOICE`: debtor user can choose in the case the bank support instant payment.\n- `NO`: only non instant payment can be offered to initialize a payment.\n"
      default: NO
      example: EXPECTED
    SensitiveData:
      enum:
        - ALL
        - NONE
      type: string
      description: "Define if Linxo Connect Payments API return sensitive data:\n- `ALL`: all available data are returned with customer agreement.\n- `NONE`: no sensitive data are returned, payer and beneficiary IBAN are masked.\n"
      default: ALL
      example: ALL
    PayerEMail:
      type: string
      description: "Payer email used to send payment notifications.\n> A valid email is required when using Oxlin agreement. Because parameter\n> is not mandatory, in such case user will be asked to type his email\n> during payment flow.\n"
      format: email
      example: payer@email.com
    StartDate:
      type: string
      description: "For single or multiples payments, instruction date, for a standing order,\nstart date:\n- now if undefined,\n- will be requalified to now if the payer bank doesn't support instruction date,\n- will be changed to the oldest possible date supported by payer bank if transmitted\ndate exceed maximum bank value.\nAs a consequence, when using that field you have to check how it have be updated or not after\npayment was authorized.\nISO 8601 extended format is used.\n"
      format: date-time
    DateUpdateDirection:
      enum:
        - NONE
        - BOTH
      type: string
      description: "Define how to update the date when the bank limit it for instance refusing\na Target 2 calendar date :\n- `NONE`: don’t update the date (reject the date if it is not supported by the bank).\n- `BOTH`: find a new date before or after the given date (keep closest).\n"
      default: BOTH
      example: NONE
    Frequency:
      enum:
        - DAILY
        - WEEKLY
        - EVERY_TWO_WEEKS
        - MONTHLY
        - EVERY_TWO_MONTHS
        - QUATERLY
        - SEMI_ANNUAL
        - YEAR
      type: string
      description: "Standing orders frequency (**RESERVED** to be used with `STANDING_ORDERS` capability: currently **NOT SUPPORTED**):\n- `DAILY`: Daily.\n- `WEEKLY`: Weekly.\n- `EVERY_TWO_WEEKS`: Every two weeks.\n- `MONTHLY`: Monthly.\n- `EVERY_TWO_MONTHS`: Every two months.\n- `QUARTERLY`: Quarterly.\n- `SEMI_ANNUAL`: Semi annual.\n- `YEAR`: Annual.\n"
      example: DAILY
    EndDate:
      type: string
      description: "End date for standing order, infinite if undefined. ISO 8601 extended\nformat is used.\n"
      format: date-time
    PaymentSchema:
      enum:
        - SEPA
        - FPS
        - ALIAS
      type: string
      description: "Define payment schema:\n- `SEPA`: SEPA payment.\n- `FPS`: Faster Payment, UK instant payment schema.\n- `ALIAS`: An alias representing registered account .\n\n> `ALIAS` value is only available in a context you can use an `ALIAS`,\n> as a consequence  it can't be valid when defining an `ALIAS`.\n"
      example: SEPA
    IBANPayer:
      pattern: '^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$'
      type: string
      description: "International Bank Account Number (IBAN) - identification used\ninternationally by financial institutions to uniquely identify the\naccount of a customer.\n\n> Using Oxlin agreements, only declared beneficiaries or payer IBAN can\n> be used depending on the contract you've subscribed. If your payer\n> is rejected, check if you've declared when opening your Linxo Connect Payments\n> contract. Contact Oxlin support otherwise.\n"
      example: FR7612345987650123456789014
    AliasId:
      maxLength: 36
      type: string
      description: "Universally Unique IDentifier for `Alias`.\n"
      example: c4311507-13a3-407c-82c8-b965a0967f5c
    PayerCreate:
      type: object
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPAPayerAccountItemCreate'
          FPS: '#/components/schemas/FPSPayerAccountItemCreate'
          ALIAS: '#/components/schemas/AliasPayerItemCreate'
      properties:
        schema:
          $ref: '#/components/schemas/PaymentSchema'
      required:
        - schema
    SEPAPayerAccountItemCreate:
      allOf:
        - $ref: '#/components/schemas/PayerCreate'
        - required:
            - iban
          type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBANPayer'
          example:
            schema: SEPA
            iban: FR7612345987650123456789014
      description: "Represent a SEPA payer account.\n"
    FPSPayerAccountItemCreate:
      allOf:
        - $ref: '#/components/schemas/PayerCreate'
        - required:
            - name
            - sort_code
            - account_number
          type: object
          properties:
            name:
              type: string
              description: "Name of account holder.\n"
            sort_code:
              type: string
              description: "Sort code of payer account: six digits only, no whitespace or punctuation\n"
            account_number:
              type: string
              description: "Number of account: eight digits only, no whitespace or punctuation\n"
          example:
            schema: FPS
            name: John Dupont
            sort_code: '102030'
            account_number: '88881234'
      description: "Represent a Faster Payment payer or beneficiary account.\n"
    AliasPayerItemCreate:
      allOf:
        - $ref: '#/components/schemas/PayerCreate'
        - required:
            - alias_id
          type: object
          properties:
            alias_id:
              $ref: '#/components/schemas/AliasId'
      description: "Reference an account alias.\n"      
    RedirectURL:
      maxLength: 512
      type: string
      description: "The URL where the user should be redirected after authorising the\npayment. We will append the order_id parameter to the URL when\nredirecting the user to: `GET https://your.redirect.url?order_id=XXXXXX`\nwith `XXXXXX` the reference of the concerned `order`. To know status\nof the order, to get the up to date object and manage actions on your\nsystem you need to either call:\n- `GET /v1/running/orders/XXXXXX`: during the realtime\nauthentication flow with the payer when you need to take a live\ndecision. That method will work during a limited time after\nauthentication was done.\n- `GET /v1/reporting/orders/XXXXXX`: in all other cases when status\ninformation have no impact on realtime decision.\n\nNote the URL is not limited to `http` or `https` scheme name. If requested,\nyou can use any scheme name such as a mobile application specific scheme name.\n"
    AmountValue:
      pattern: '^-?[0-9]{1,14}(\.[0-9]{1,3})?$'
      type: string
      description: "The amount given with fractional digits, where fractions must be\ncompliant to the currency definition. Up to 14 significant figures.\nNegative amounts are signed by minus. The decimal separator is a dot.\n\nValid representations for amount with up to two decimals are:\n  - 1056\n  - 5768.2\n  - -1.50\n  - 5877.78\n"
      example: '5877.78'
    CurrencyCode:
      pattern: '^[A-Z]{3,3}$'
      type: string
      description: "Specifies the currency of the amount.\n\nA code allocated to a currency by a Maintenance Agency under\nan international identification scheme, as described in the\nlatest edition of the international standard ISO 4217 \"Codes\nfor the representation of currencies and funds\".\n"
      example: EUR
    IBANBeneficiary:
      pattern: '^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$'
      type: string
      description: "International Bank Account Number (IBAN) - identification used\ninternationally by financial institutions to uniquely identify the\naccount of a customer.\n\n> For payment using `Sandbox Mode`, you have to use\n> `FR8530003000307599775722N09` as `beneficiary.iban` and any value\n> as `beneficiary.name`. When bank will be chosen, bank emulation page\n> will give you following choices:\n> - `SUBMITTED` will emulate a payment authorised but not yet executed by the bank.\n> - `REJECTED` will emulate a payment refused by the bank.\n> - `EXECUTED` will emulate a payment immediately executed by the bank.\n> - `SUBMITTED and EXECUTED (with delay)` will emulate a real payment flow\n> where the bank authorise it in a first time and execute it with a\n> 2 minutes delay in a second time.\n\n> Using Oxlin agreements, only declared beneficiaries or payer IBAN can\n> be used depending on the contract you've subscribed. If your beneficiary\n> is rejected, check if you've declared it when opening your Linxo Connect Payments\n> contract. Contact Oxlin support otherwise.\n"
      example: FR7612345987650123456789014
    BeneficiaryBic:
      pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      type: string
      description: "Field not used anymore. Will be removed in a future version.\nBeneficiary bank identifier code allocated to a financial institution by the ISO 9362\nRegistration Authority as described in ISO 9362 \"Banking - Banking telecommunication\nmessages - Business identification code (BIC)\". Value is required or not depending on\nthe payment context.\n"
      example: AXABFRPP
      deprecated: true
    ComplementaryName:
      pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
      type: string
      description: "Free beneficiary complementary name you can use to enrich beneficiary name.\nThat value will be displayed in addition to the name but won't be transmitted to the payer bank.\n"
    BeneficiaryCreate:
      type: object
      description: Beneficiary account for instructed payments.
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPABeneficiaryAccountItemCreate'
          FPS: '#/components/schemas/FPSBeneficiaryAccountItemCreate'
          ALIAS: '#/components/schemas/AliasBeneficiaryItemCreate'
      properties:
        schema:
          $ref: '#/components/schemas/PaymentSchema'
      required:
        - schema
    SEPABeneficiaryAccountItemCreate:
      allOf:
        - $ref: '#/components/schemas/BeneficiaryCreate'
        - required:
            - iban
            - name
          type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBANBeneficiary'
            name:
              pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
              type: string
              description: "Name identifying beneficiary.\n"
            bic:
              $ref: '#/components/schemas/BeneficiaryBic'
            complementary_name:
              $ref: '#/components/schemas/ComplementaryName'
          example:
            schema: SEPA
            iban: FR7612345987650123456789014
            name: Jean Dupond
      description: "Represent a SEPA beneficiary account.\n"
    FPSBeneficiaryAccountItemCreate:
      allOf:
        - $ref: '#/components/schemas/BeneficiaryCreate'
        - required:
            - name
            - sort_code
            - account_number
          type: object
          properties:
            name:
              type: string
              description: "Name of account holder.\n"
            sort_code:
              type: string
              description: "Sort code of payer account: six digits only, no whitespace or punctuation\n"
            account_number:
              type: string
              description: "Number of account: eight digits only, no whitespace or punctuation\n"
            complementary_name:
              $ref: '#/components/schemas/ComplementaryName'
          example:
            schema: FPS
            name: John Dupont
            sort_code: '102030'
            account_number: '88881234'
      description: "Represent a Faster Payment payer or beneficiary account.\n"
    AliasBeneficiaryItemCreate:
      allOf:
        - $ref: '#/components/schemas/BeneficiaryCreate'
        - required:
            - alias_id
          type: object
          properties:
            alias_id:
              $ref: '#/components/schemas/AliasId'
            complementary_name:
              $ref: '#/components/schemas/ComplementaryName'
      description: "Reference an account alias.\n"
    Label:
      pattern: '^[a-zA-Z0-9\- ?:().,+]{1,50}$'
      type: string
      description: "Text transmitted to beneficiary bank.\n"
      example: Payment initiation label
    InstructionItemCreate:
      required:
        - amount
        - currency
        - beneficiary
        - label
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/AmountValue'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        beneficiary:
          $ref: '#/components/schemas/BeneficiaryCreate'
        label:
          $ref: '#/components/schemas/Label'
      description: "Represent a single or standing order payment instruction. Resulting\ninstructed payment transmitted to payer bank will be represented through\n`payments` content.\n"
    SingleInstructionOrder:
      required:
        - redirect_url
      type: object
      properties:
        user_reference:
          $ref: '#/components/schemas/UserReference'
        bic:
          $ref: '#/components/schemas/InputPayerBic'
        instant_payment:
          $ref: '#/components/schemas/InstantPaymentType'
        sensitive_data:
          $ref: '#/components/schemas/SensitiveData'
        email:
          $ref: '#/components/schemas/PayerEMail'
        start_date:
          $ref: '#/components/schemas/StartDate'
        start_date_processing_direction:
          $ref: '#/components/schemas/DateUpdateDirection'
        frequency:
          $ref: '#/components/schemas/Frequency'
        end_date:
          $ref: '#/components/schemas/EndDate'
        payer:
          $ref: '#/components/schemas/PayerCreate'
        redirect_url:
          $ref: '#/components/schemas/RedirectURL'
        allof:
          $ref: '#/components/schemas/InstructionItemCreate'
      description: "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n"
    MultiplesInstructionsOrder:
      required:
        - instructions
        - redirect_url
      type: object
      properties:
        user_reference:
          $ref: '#/components/schemas/UserReference'
        bic:
          $ref: '#/components/schemas/InputPayerBic'
        instant_payment:
          $ref: '#/components/schemas/InstantPaymentType'
        sensitive_data:
          $ref: '#/components/schemas/SensitiveData'
        email:
          $ref: '#/components/schemas/PayerEMail'
        start_date:
          $ref: '#/components/schemas/StartDate'
        start_date_processing_direction:
          $ref: '#/components/schemas/DateUpdateDirection'
        frequency:
          $ref: '#/components/schemas/Frequency'
        end_date:
          $ref: '#/components/schemas/EndDate'
        payer:
          $ref: '#/components/schemas/PayerCreate'
        redirect_url:
          $ref: '#/components/schemas/RedirectURL'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/InstructionItemCreate'
      description: "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n"
    OrderId:
      maxLength: 36
      type: string
      description: "Universally Unique IDentifier for `Order`.\n"
      example: 53fd4a76-a95d-11ea-bb37-0242ac130002
    PayerBic:
      pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      type: string
      description: "Bank identifier code allocated to a financial institution by the ISO 9362 Registration\nAuthority as described in ISO 9362 \"Banking - Banking telecommunication\nmessages - Business identification code (BIC)\".\n"
      example: AXABFRPP
    OrderStatus:
      enum:
        - NEW
        - AUTHORIZED
        - FAILED
        - REJECTED
        - CLOSED
        - EXPIRED
      type: string
      description: "Define order status:\n- `NEW`: Initial state, order initialized, PSU consent not done.\n- `AUTHORIZED`: Intermediary state, PSU consent was granted, payment is being processed: at least one payment is not in a final state.\n- `FAILED`: Final state, order initialisation failed.\n- `REJECTED`: Final state, PSU consent was refused, no payment will be processed.\n- `CLOSED`: Final state, PSU consent was grant, all payments were processed.\n- `EXPIRED`: Final state, an `order` in status `NEW` expires automatically after 30 days.\n"
      example: AUTHORIZED
    AccountCountry:
      type: string
      description: "Bank account country ISO-3166 Alpha-2 country code.\n"
    Payer:
      type: object
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPAPayerAccountItem'
          FPS: '#/components/schemas/FPSPayerAccountItem'
          ALIAS: '#/components/schemas/AliasPayerItem'
      properties:
        schema:
          $ref: '#/components/schemas/PaymentSchema'
      required:
        - schema
    SEPAPayerAccountItem:
      allOf:
        - $ref: '#/components/schemas/Payer'
        - required:
            - iban
          type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBANPayer'
            name:
              pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
              type: string
              description: "Name identifying payer.\n"
            country:
              $ref: '#/components/schemas/AccountCountry'
          example:
            schema: SEPA
            iban: FR7612345987650123456789014
            name: Jean Dupont
      description: "Represent a SEPA payer account.\n"
    FPSPayerAccountItem:
      allOf:
        - $ref: '#/components/schemas/Payer'
        - required:
            - name
            - sort_code
            - account_number
          type: object
          properties:
            name:
              type: string
              description: "Name of account holder.\n"
            sort_code:
              type: string
              description: "Sort code of payer account: six digits only, no whitespace or punctuation\n"
            account_number:
              type: string
              description: "Number of account: eight digits only, no whitespace or punctuation\n"
            country:
              $ref: '#/components/schemas/AccountCountry'
          example:
            schema: FPS
            name: John Dupont
            sort_code: '102030'
            account_number: '88881234'
      description: "Represent a Faster Payment payer or beneficiary account.\n"
    AliasPayerItem:
      allOf:
        - $ref: '#/components/schemas/Payer'
        - required:
            - alias_id
          type: object
          properties:
            alias_id:
              $ref: '#/components/schemas/AliasId'
            country:
              $ref: '#/components/schemas/AccountCountry'
      description: "Reference an account alias.\n"
    CreationDate:
      type: string
      description: "Object creation date and time. ISO 8601 format is used.\n"
      format: date-time
      example: '2019-12-12T12:34:45.0000000+00:00'
    AuthURL:
      maxLength: 512
      type: string
      description: "The URL your user have to open in order to realize authorisation for\nthe order. Refer to `GET /authorize/{order_id}` for details about how to\nto override language or personalise screens.\n"
    PaymentCapability:
      enum:
        - SINGLE_PAYMENT
        - SINGLE_INSTANT_PAYMENT
        - STANDING_ORDERS
        - BATCH_PAYMENTS
      type: string
      description: "Describe type of payment.\n  - `SINGLE_PAYMENT`: Single unique payment.\n  - `SINGLE_INSTANT_PAYMENT`: Single immediate payment.\n  - `STANDING_ORDERS` (**RESERVED**: currently **NOT SUPPORTED**): Standing orders is a recurring payment with an immutable\n  recurring amount.\n  - `BATCH_PAYMENTS` (**RESERVED**: currently **NOT SUPPORTED**): Batch payment is a payment from a unique payer to multiple\n  beneficiaries.\n"
    Beneficiary:
      type: object
      description: Beneficiary account for instructed payments.
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPABeneficiaryAccountItem'
          FPS: '#/components/schemas/FPSBeneficiaryAccountItem'
          ALIAS: '#/components/schemas/AliasBeneficiaryItem'
      properties:
        schema:
          $ref: '#/components/schemas/PaymentSchema'
      required:
        - schema
    SEPABeneficiaryAccountItem:
      allOf:
        - $ref: '#/components/schemas/Beneficiary'
        - required:
            - iban
            - name
          type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBANBeneficiary'
            name:
              pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
              type: string
              description: "Name identifying beneficiary.\n"
            bic:
              $ref: '#/components/schemas/BeneficiaryBic'
            complementary_name:
              $ref: '#/components/schemas/ComplementaryName'
            country:
              $ref: '#/components/schemas/AccountCountry'
          example:
            schema: SEPA
            iban: FR7612345987650123456789014
            name: Jean Dupond
      description: "Represent a SEPA beneficiary account.\n"
    FPSBeneficiaryAccountItem:
      allOf:
        - $ref: '#/components/schemas/Beneficiary'
        - required:
            - name
            - sort_code
            - account_number
          type: object
          properties:
            name:
              type: string
              description: "Name of account holder.\n"
            sort_code:
              type: string
              description: "Sort code of payer account: six digits only, no whitespace or punctuation\n"
            account_number:
              type: string
              description: "Number of account: eight digits only, no whitespace or punctuation\n"
            complementary_name:
              $ref: '#/components/schemas/ComplementaryName'
            country:
              $ref: '#/components/schemas/AccountCountry'
          example:
            schema: FPS
            name: John Dupont
            sort_code: '102030'
            account_number: '88881234'
      description: "Represent a Faster Payment payer or beneficiary account.\n"
    AliasBeneficiaryItem:
      allOf:
        - $ref: '#/components/schemas/Beneficiary'
        - required:
            - alias_id
          type: object
          properties:
            alias_id:
              $ref: '#/components/schemas/AliasId'
            complementary_name:
              $ref: '#/components/schemas/ComplementaryName'
            country:
              $ref: '#/components/schemas/AccountCountry'
          example:
            schema: FPS
            alias_id: 054b7b60-0d85-4b91-841b-f70163cff8d4
      description: "Reference an account alias.\n"
    PaymentStatus:
      enum:
        - SUBMITTED
        - EXECUTED
        - CANCELLED
        - REJECTED
      type: string
      description: "Define instructed payment status:\n- `SUBMITTED`: Intermediary state, payment was transmitted to the bank\nbut not yet executed.\n- `EXECUTED`: Final state, payment was executed.\n- `CANCELLED`: Final state, payment was cancelled.\n- `REJECTED`: Final state, payment was rejected.\n"
      example: SUBMITTED
    StatusReason:
      type: string
      description: "ISO20022: Provides detailed information on the status reason.\nRaw reason provided by the bank for `REJECTED` orders and payments.\nList of codes are available in the STET functional model document.\n"
      example: CUST
    PaymentItem:
      required:
        - status
        - amount
        - currency
        - creation_date
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentStatus'
        payment_status_raw_reason:
          $ref: '#/components/schemas/StatusReason'
        amount:
          $ref: '#/components/schemas/AmountValue'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        execution_date:
          type: string
          description: "Payment instruction date shared with payer bank.\n"
          format: date-time
          example: '2020-01-27T23:00:00.0000000+00:00'
        creation_date:
          $ref: '#/components/schemas/CreationDate'
      description: "A payment represent a money transfer from a payer account to a\nbeneficiary account. Payment is created when instruction was\ntransmitted to the payer bank.\n"
      example:
        payment_status: SUBMITTED
        amount: '123.45'
        currency: EUR
        execution_date: '2020-01-27T23:00:00.0000000+00:00'
        creation_date: '2020-01-27T11:23:12+00:00'
    InstructionItem:
      required:
        - amount
        - currency
        - beneficiary
        - label
      type: object
      properties:
        amount:
          $ref: '#/components/schemas/AmountValue'
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        beneficiary:
          $ref: '#/components/schemas/Beneficiary'
        label:
          $ref: '#/components/schemas/Label'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentItem'
      description: "Represent a single or standing order payment instruction. Resulting\ninstructed payment transmitted to payer bank will be represented through\n`payments` content.\n"
      example:
        amount: '123.45'
        currency: EUR
        start_date: '2020-01-24T07:46:34.0000000+00:00'
        beneficiary:
          schema: SEPA
          iban: FR7612345987650123456789014
          name: Jean Dupond
        label: Payment from John Dupont to Jean Dupond
        payments:
          - payment_status: SUBMITTED
            amount: '123.45'
            currency: EUR
            execution_date: '2020-01-27T23:00:00.0000000+00:00'
            creation_date: '2020-01-27T11:23:12.0000000+00:00'
    Sca:
      type: object
      properties:
        applied:
          enum:
            - YES
            - NO
            - UNKNOWN
          type: string
          description: "Describe if SCA has been applied by the provider.\n- `YES`: SCA applied by the provider on this order (No exemption).\n- `NO`: Exemption applied by the provider on this order (No SCA).\n- `UNKNOWN`: The provider didn't not return SCA exemption information on this order.\n"
      description: "List of Strong Customer Authentication (SCA) information returned by the provider\n"
    Channel:
      enum:
        - ONLINE
        - PROXIMITY
      type: string
      description: "Initiating channel for the order. This value is part of the Client ID configuration.\n- `ONLINE`: Order initiated when the account holder is present online (E-Commerce, payment links, C2C payments…).\n- `PROXIMITY`: Order initiated when the account holder is physically present (In store).\n"
    OrderItem:
      required:
        - id
        - order_status
        - payments
        - redirect_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrderId'
        user_reference:
          $ref: '#/components/schemas/UserReference'
        bic:
          $ref: '#/components/schemas/PayerBic'
        instant_payment:
          $ref: '#/components/schemas/InstantPaymentType'
        sensitive_data:
          $ref: '#/components/schemas/SensitiveData'
        email:
          $ref: '#/components/schemas/PayerEMail'
        start_date:
          $ref: '#/components/schemas/StartDate'
        start_date_processing_direction:
          $ref: '#/components/schemas/DateUpdateDirection'
        frequency:
          $ref: '#/components/schemas/Frequency'
        end_date:
          $ref: '#/components/schemas/EndDate'
        order_status:
          $ref: '#/components/schemas/OrderStatus'
        payer:
          $ref: '#/components/schemas/Payer'
        creation_date:
          $ref: '#/components/schemas/CreationDate'
        auth_url:
          $ref: '#/components/schemas/AuthURL'
        redirect_url:
          $ref: '#/components/schemas/RedirectURL'
        selected_capability:
          $ref: '#/components/schemas/PaymentCapability'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/InstructionItem'
          description: "List of order instructed payments.\n"
        sca:
          $ref: '#/components/schemas/Sca'
        channel:
          $ref: '#/components/schemas/Channel'
      description: "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n"
      example:
        id: '987123'
        bic: AXABFRPP
        order_status: AUTHORIZED
        payer:
          schema: SEPA
          iban: FR7612345987650123456789014
        creation_date: '2020-01-24T07:42:32+00:00'
        redirect_url: https://domain/context/resource
        start_date: '2020-01-24T07:46:34+00:00'
        instructions:
          - amount: '123.45'
            currency: EUR
            beneficiary:
              schema: SEPA
              iban: FR7612345987650123456789014
              name: Jean Dupond
            label: Payment from John Dupont to Jean Dupond
            payments:
              - payment_status: SUBMITTED
                amount: '123.45'
                currency: EUR
                execution_date: '2020-01-27T23:00:00.0000000+00:00'
                creation_date: '2020-01-27T11:23:12.0000000+00:00'
    CountryCode:
      type: string
      description: "Bank supported market ISO-3166 Alpha-2 country code.\n"
    OrderItemUpdate:
      type: object
      properties:
        order_status:
          $ref: '#/components/schemas/OrderStatus'
        bic:
          $ref: '#/components/schemas/PayerBic'
        email:
          $ref: '#/components/schemas/PayerEMail'
        payer:
          $ref: '#/components/schemas/Payer'
        selected_capability:
          $ref: '#/components/schemas/PaymentCapability'
      description: "An order represent one or more payments, today or in the future, to a\nunique beneficiary or multiples beneficiaries. An order is associated\nto a unique payment initiation, as a consequence it is associated to\na unique authentication from the PSU bank.\n"
    GenericLink:
      required:
        - href
      type: object
      properties:
        href:
          maxLength: 512
          type: string
      description: "Hypertext reference.\n"
      example:
        - href: https://domain/context/resource
    Page:
      required:
        - size
        - total_elements
        - total_pages
        - number
      type: object
      properties:
        size:
          type: number
          description: "Number of elements described in the page.\n"
        total_elements:
          type: number
          description: "Total number of elements described in all pages.\n"
        total_pages:
          type: number
          description: "Total number of pages.\n"
        number:
          type: number
          description: "Index of current page.\n"
      description: "Pagination status when applicable.\n"
      example:
        size: '100'
        total_elements: '1215'
        total_pages: '13'
        number: '7'
    ChangeDate:
      type: string
      description: "Object change date and time. ISO 8601 format is used.\n"
      format: date-time
      example: '2019-12-12T12:34:45.0000000+00:00'
    OrderHistoryItem:
      required:
        - date
      type: object
      properties:
        date:
          $ref: '#/components/schemas/ChangeDate'
        content:
          type: string
          description: Content of the order event
        type:
          type: string
          description: 'Type of the order event (API, SIMPLE...)'
        method:
          type: string
          description: 'Method of the order event (POST, GET, PUT..)'
        feature:
          type: string
          description: 'Feature of the order event (order, authorize..)'
        status:
          type: string
          description: 'HTTP status of the order event (200, 404...)'
      description: "Describe the history of the order with an entry per order event. No information returned when order have no history.\n"
    IBAN:
      pattern: '^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$'
      type: string
      description: "International Bank Account Number (IBAN) - identification used\ninternationally by financial institutions to uniquely identify the\naccount of a customer.\n"
      example: FR7612345987650123456789014
    AliasAccount:
      type: object
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPAAliasAccountItem'
          FPS: '#/components/schemas/FPSAliasAccountItem'
      properties:
        schema:
          $ref: '#/components/schemas/PaymentSchema'
      required:
        - schema
    SEPAAliasAccountItem:
      allOf:
        - $ref: '#/components/schemas/AliasAccount'
        - required:
            - iban
          type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBAN'
          example:
            schema: SEPA
            iban: FR7612345987650123456789014
      description: "Represent a SEPA beneficiary account.\n"
    FPSAliasAccountItem:
      allOf:
        - $ref: '#/components/schemas/AliasAccount'
        - required:
            - name
            - sort_code
            - account_number
          type: object
          properties:
            name:
              type: string
              description: "Name of account holder.\n"
            sort_code:
              type: string
              description: "Sort code of payer account: six digits only, no whitespace or punctuation\n"
            account_number:
              type: string
              description: "Number of account: eight digits only, no whitespace or punctuation\n"
          example:
            schema: FPS
            name: John Dupont
            sort_code: '102030'
            account_number: '88881234'
      description: "Represent a Faster Payment payer or beneficiary account.\n"
    AliasItemCreate:
      required:
        - user_reference
        - account
      type: object
      properties:
        user_reference:
          $ref: '#/components/schemas/UserReference'
        label:
          pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
          type: string
          description: "Name identifying the account.\n"
        account:
          $ref: '#/components/schemas/AliasAccount'
        bic:
          $ref: '#/components/schemas/PayerBic'
      description: "An alias represent a stored account identification.\n"
    AliasItem:
      required:
        - id
        - user_reference
        - label
        - account
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AliasId'
        user_reference:
          $ref: '#/components/schemas/UserReference'
        label:
          pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
          type: string
          description: "Name identifying the account.\n"
        account:
          $ref: '#/components/schemas/AliasAccount'
        bic:
          $ref: '#/components/schemas/PayerBic'
      description: "An alias represent a stored account identification.\n"
    AliasItemUpdate:
      required:
        - label
      type: object
      properties:
        label:
          pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
          type: string
          description: "New name identifying the account.\n"
      description: "An alias represent a stored account identification.\n"
    AppToAppSupport:
      enum:
        - ANDROID
        - IOS
      type: string
      description: "Operating system type supporting application to application authentication flow.\n  - `ANDROID`: App to App flow is supported on Android devices.\n  - `IOS`: App to App flow is supported on iOS devices.\n"
    ProviderItemCommon:
      required:
        - bic
        - name
        - country_codes
        - logo_url
      type: object
      properties:
        bic:
          $ref: '#/components/schemas/PayerBic'
        name:
          type: string
          description: "Name of the provider.\n"
          example: Provider name
        branch_name:
          type: string
          description: "Name of the provider branch (regional bank of a national group for\ninstance).\n"
        country_codes:
          type: array
          items:
            $ref: '#/components/schemas/CountryCode'
        logo_url:
          type: string
          description: "The logo URL for the provider.\n"
      description: "A provider represent a bank.\n"
    ProviderItemInternal:
      required:
        - payment_capabilities
      type: object
      properties:
        allof:
          $ref: '#/components/schemas/ProviderItemCommon'
        payment_capabilities:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCapability'
          description: "List of supported capabilities.\n"
        app_to_app_support:
          type: array
          items:
            $ref: '#/components/schemas/AppToAppSupport'
          description: "List of operating systems supporting App to App authentication flow.\n"
        base_url:
          type: string
          description: "Base URL of the provider, will be mandatory returned for any\nsupported providers.\n"
          format: url
          example: https://www.provider.com
        max_start_date_delay:
          type: number
          description: "Maximal delay in days from `now` supported on parameter `start_date`.\n"
      description: "A provider we can initiate a payment from.\n"
    ProviderSearchQueryItem:
      type: object
      properties:
        payer:
          $ref: '#/components/schemas/Payer'
      description: "Description of the search criterion to look for 'providers'.\n"
    ProviderItemInternalOrExternal:
      type: object
      properties:
        allof:
          $ref: '#/components/schemas/ProviderItemCommon'
        payment_capabilities:
          type: array
          items:
            $ref: '#/components/schemas/PaymentCapability'
          description: "List of supported capabilities.\n"
        app_to_app_support:
          type: array
          items:
            $ref: '#/components/schemas/AppToAppSupport'
          description: "List of operating systems supporting App to App authentication flow.\n"
        base_url:
          type: string
          description: "Base URL of the provider, only returned for supported providers.\n"
          format: url
          example: https://www.provider.com
        max_start_date_delay:
          type: number
          description: "Maximal delay in days from `now` supported on parameter `start_date`.\n"
      description: "A provider we can initiate a payment from when 'payment_capabilities'\nis returned or were we can't initiate a payment from in other cases.\n"
    ProviderSearchResultItem:
      type: object
      properties:
        payer:
          $ref: '#/components/schemas/Payer'
        providers:
          type: array
          items:
            $ref: '#/components/schemas/ProviderItemInternalOrExternal'
          description: "List of 'providers'.\n"
      description: "Description of the search criterion to look for 'providers'.\n"
    CallbackURL:
      maxLength: 512
      type: string
      description: "The URL called to notify your system.\n"
    ResourceType:
      enum:
        - ORDERS
      type: string
      description: "Define payment schema:\n- `ORDERS`: Order.\n"
      example: ORDERS
    ResourceId:
      maxLength: 36
      type: string
      description: "Universally Unique IDentifier for a resource.\n"
      example: c1a4866a-1362-11eb-adc1-0242ac120002
    AuthorizedAccountItem:
      type: object
      description: "Common structure fo all accounts identification item.\n"
      discriminator:
        propertyName: schema
        mapping:
          FPSAuthorizedAccountItem: '#/components/schemas/FPSAuthorizedAccountItem'
          SEPAAuthorizedAccountItem: '#/components/schemas/SEPAAuthorizedAccountItem'
      properties:
        schema:
          $ref: '#/components/schemas/AuthorizedAccountPaymentSchema'
      required:
        - schema
    FPSAuthorizedAccountItem:
      allOf:
        - $ref: '#/components/schemas/AuthorizedAccountItem'
        - required:
            - name
            - sort_code
            - account_number
          type: object
          properties:
            name:
              type: string
              description: "Name of account holder.\n"
            sort_code:
              type: string
              description: "Sort code of payer account: six digits only, no whitespace or punctuation\n"
            account_number:
              type: string
              description: "Number of account: eight digits only, no whitespace or punctuation\n"
          example:
            name: John Dupont
            sort_code: '102030'
            account_number: '88881234'
      description: "Represent a Payment payer or beneficiary account.\n"
    SEPAAuthorizedAccountItem:
      allOf:
        - $ref: '#/components/schemas/AuthorizedAccountItem'
        - required:
            - iban
            - name
          type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBAN'
            name:
              pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
              type: string
              description: "Name identifying account holder.\n"
          example:
            iban: FR7612345987650123456789014
            name: Jean Dupont
      description: "Represent a SEPA payer or beneficiary account.\n"
    AuthorizedAccountPaymentSchema:
      enum:
        - SEPA
        - FPS
      type: string
      description: "Define payment schema:\n- `SEPA`: SEPA payment.\n- `FPS`: Faster Payment, UK instant payment schema.\n"
      example: SEPA
    AuthorizedAccountIdentification:
      type: object
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPAAuthorizedAccountItem'
          FPS: '#/components/schemas/FPSAuthorizedAccountItem'
      required:
        - schema
    NaturalPersonFirstname:
      type: string
      description: "Name of person.\n"
      example: Guy
    NaturalPersonSurname:
      type: string
      description: "Surname of person.\n"
      example: Mauve
    NaturalPersonBirthDate:
      type: string
      description: "Person birth date.\n"
      format: date
      example: '1978-09-13'
    NaturalPersonBirthCity:
      type: string
      description: "Person birth city.\n"
      example: Paris
    CompanyName:
      type: string
      description: "Name of the company related to the national identification.\n"
      example: World Corp
    CompanyNationalIdentification:
      type: string
      description: "National identifier for the company emitted by the host country\n- France: `SIRET`\n"
      example: '439826121'
    AuthorizedAccountEntity:
      type: object
      discriminator:
        propertyName: type
        mapping:
          NATURAL_PERSON: '#/components/schemas/AuthorizedAccountNaturalPerson'
          COMPANY: '#/components/schemas/AuthorizedAccountCompany'
      properties:
        type:
          enum:
            - NATURAL_PERSON
            - COMPANY
          type: string
      required:
        - type
    AuthorizedAccountNaturalPerson:
      allOf:
        - $ref: '#/components/schemas/AuthorizedAccountEntity'
        - required:
            - firstname
            - surname
            - birth_date
            - birth_city
            - birth_country
          type: object
          properties:
            firstname:
              $ref: '#/components/schemas/NaturalPersonFirstname'
            surname:
              $ref: '#/components/schemas/NaturalPersonSurname'
            birth_date:
              $ref: '#/components/schemas/NaturalPersonBirthDate'
            birth_city:
              $ref: '#/components/schemas/NaturalPersonBirthCity'
            birth_country:
              $ref: '#/components/schemas/CountryCode'
      description: "describe a natural person.\n"
    AuthorizedAccountCompany:
      allOf:
        - $ref: '#/components/schemas/AuthorizedAccountEntity'
        - required:
            - company_name
            - national_identification
          type: object
          properties:
            company_name:
              $ref: '#/components/schemas/CompanyName'
            national_identification:
              $ref: '#/components/schemas/CompanyNationalIdentification'
      description: "Describe a company.\n"
    AuthorizedAccountsItem:
      required:
        - identification
        - entity
      type: object
      properties:
        identification:
          $ref: '#/components/schemas/AuthorizedAccountIdentification'
        entity:
          $ref: '#/components/schemas/AuthorizedAccountEntity'
      description: "An AuthorizedAccounts represent a beneficiary or a Payer.\n"
    AuthorizedAccountId:
      maxLength: 36
      type: string
      description: "Universally Unique IDentifier for `Authorized Accounts`.\n"
      example: c4311507-13a3-407c-82c8-b965a0967f5c
    ServiceLevel:
      enum:
        - FULL
        - PARTIAL
        - NONE
      type: string
      description: "Registration person type:\n- `FULL`: Full access to services capabilities.\n- `PARTIAL`: Service capabilities restricted (number of transactions, maximum amount...)\nbased on risk management policy.\n- `NONE`: No service available.\n"
      example: FULL
    AuthorizedAccountsItemCreate:
      required:
        - identification
        - entity
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AuthorizedAccountId'
        service_level:
          $ref: '#/components/schemas/ServiceLevel'
        identification:
          $ref: '#/components/schemas/AuthorizedAccountIdentification'
        entity:
          $ref: '#/components/schemas/AuthorizedAccountEntity'
      description: "An AuthorizedAccounts represent a beneficiary or a Payer.\n"