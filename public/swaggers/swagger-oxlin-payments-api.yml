openapi: 3.0.0

info:
  title: Oxlin Payments API
  version: 1.2.0
  description: |
    # Presentation

    ## Introduction

    Oxlin payments API provides you an easy way to initiate a payment from
    payer PSU account to any beneficiary account. Payment initiation can be
    subdivided in three major steps:
    1. Create an authentication using [POST /token](oxlin-payments-api.html#operation/postToken).
    2. Create `order` using [POST /orders](oxlin-payments-api.html#operation/postOrder).
    3. Redirect the payer to the URL in [orders.auth_url](oxlin-payments-api.html#operation/getAuthorize).
    4. At the end of the consent flow, payer is redirect to
    `orders.redirect_url`, you will get the payment result using
    [GET /running/orders](oxlin-payments-api.html#operation/getRunningOrder)
    to get `orders.order_status` and
    `orders.instructions.payments.status`.

    Here it is, if clear enougth, we will deep into payment technical integration
    workflow.

    > `orders` is the central object you will manipulate during the entire
    > payment lifecycle. It represent the unique consent the payer gave to
    > its bank to initiate one or multiple payments, recurring or not to
    > one or multiple beneficiaries.

    ## How to test using Sandbox Mode

    In order to simplify your evaluation and your integration of Oxlin Payments,
    we provide a `Sandbox Mode` giving you a way to emulate payment. To use it,
    you only have to use `Sandbox Mode` credentials. Only credentials
    (identifier and password) are different between `Sandbox Mode` and
    `Production Mode`, all URL and objects are unchanged.

    > When receiving your `client identifier` and `client password` from Oxlin,
    > be sure to remember if they are the one used for `Sandbox Mode` or
    > for `Production Mode`.

    To emulate a payment using sandbox mode credentials, simply:
    - Use IBAN `FR8530003000307599775722N09` as `beneficiary.iban`.
    - Use any name as `beneficiary.name`.
    - Choose any bank from bank selection screen, it will redirect you to a
    bank emulation page.
    - From bank emulation page, you can also emulate the case where the
    redirection to your `redirect_url` doesn't works.

    > For payment using `Sandbox Mode`, you have to use
    > `FR8530003000307599775722N09` as `beneficiary.iban` and any value
    > as `beneficiary.name`. When bank will be chosen, bank emulation page
    > will give you following choices:
    > - `SUBMITTED` will emulate a payment authorised but not yet executed by the bank.
    > - `REJECTED` will emulate a payment refused by the bank.
    > - `EXECUTED` will emulate a payment immediately executed by the bank.
    > - `SUBMITTED and EXECUTED (with delay)` will emulate a real payment flow
    > where the bank authorise it in a first time and execute it with a
    > 2 minutes delay in a second time.
    > - `SUBMITTED and REJECTED (with delay)` will emulate a real payment flow
    > where the bank authorise it in a first time and reject it with a
    > 2 minutes delay in a second time.

    ## Technical integration workflow

    At a technical point of view, initiating a payment will affect four actors:
    - `Customer`: is the payer who have to consent the payment initiation.
    - `Integrator`: it is you as a technical actor who have a commercial relationship
    with the `Customer`.
    - `Oxlin`: Oxlin Payments API provider is the regulated TPP (Third Party Payment
    Service Providers) under PSD2 (Revised Payment Services Directive) that is in
    charge of initiating a payment for your `Customer`.
    - `Bank`: payer bank that is in charge under PSD2 (Revised Payment Services
    Directive) to authenticate the payer in order to confirm the payment initiation
    request.

    For all type of payments (single or multiple, recurring or not, to one or multiple
    beneficiaries) you have to follow `order` creation flow:

    <center><img src="/images/oxlin_payments_integration.png" alt="Payment flow" title="Payment flow" width="500px" /></center>

    > **iFrame integration**: even if Oxlin Payments page can be integrated in an iFrame on your side,
    banks authentication page prevent iFrame integration. It is why, even if you integrate
    Oxlin Payments in an iFrame, starting bank authentication flow will redirect you to the
    bank side replacing current web context to the bank context. At the end of the authentication
    flow, we will go back to the `redirect_url` in charge opening back your application context.

    ## Order and Payment lifecycle

    <center><img src="/images/order-status.png" alt="Order status" title="Order status" width="400px" /></center>

    `order` represent payer consent and define two main categories of states:
    1. Intermediary states:
      * `NEW`: initial state, order was created but payer wasn't asked to
      give its consent. In that state, you have to redirect payer to `order.auth_url`
      in order to request it's consent.
      * `AUTHORIZED`: payer was redirect to `order.auth_url` and successfully
      authenticate to its bank. When `AUTHORIZED`, the `order` can define payments,
      depending on payments `start_date`. `order` will remain in `AUTHORIZED`
      until there is not any pending payments for it.
    2. Final states:
      * `CLOSED`: as soon as all instructed payments of an order are in a final state,
      its status change to `CLOSED` indicating `order` was successfully authenticated,
      payments were realized (succesfully or not) and it doesn't remain any possible
      action for concerned `order`.
      * `REJECTED`: payer authentication was refused, `order` wasn't authorized and is in
      a final state without instructing any payment.
      * `FAILED`: payer authentication failed due to technical considerations, `order`
      wasn't authorized and is in a final state without instructing any payment.
      * `EXPIRED`: an `order` in status `NEW` expires automaticaly after 30 days.

    <center><img src="/images/payment-status.png" alt="Payment status" title="Payment status" width="500px" /></center>

    From its status `AUTHORIZED`, `order` instructions can produce payments whose
    status are divided in the same two categories:
    1. Intermediary states:
      * `SUBMITTED`: payment was transmitted and confirmed to the bank. Execution is in
      progress on the bank side.
    2. Final states:
      * `EXECUTED`: `SUBMITTED` payment was executed from the bank side and funds are
      available for the beneficiary. Please note there exist cases such instant
      payment execution where a payment will appear directly in `EXECUTED` without
      transition from `SUBMITTED` one.
      * `CANCELLED`: when you close an `AUTHORIZED` order before all instructed payments
      were `EXECUTED`, pending payments are moved to `CANCELLED` state.
      * `REJECTED`: `SUBMITTED` payment that was rejected either by payer bank, either
      by beneficiary bank.

    # Technicals considerations

    ## Errors

    The API uses conventional HTTP response codes to indicate the success or
    failure of an API request. In general, codes in the 2xx range indicate
    success, codes in the 4xx range indicate an error that fails given the
    information provided (e.g., a required parameter was omitted), and codes in
    the 5xx range indicate an error with our services.

    However, not all errors map cleanly onto HTTP response codes. When a request
    is valid but does not complete successfully (e.g., an asynchronous
    operation), we return a 402 error code.

    All of the error responses contain the same structure in the body:

    | Attribute name      | Description                                        |
    |---------------------|----------------------------------------------------|
    | `error`             | Error code (can be used to manage error on the client). |
    | `error_description` | Human readable english text that describes the error (can be used in logs). |
    | `id`                | Identifies the resource (when applicable). |

    Example:
    ```
    {
      "error": "PARAMETER_MISSING",
      "error_description": "Missing request header 'X-FWD-Request-ID' for method parameter of type String",
      "id": "/v1/accounts"
    }
    ```

    ## Pagination

    When the API return a list of elements, the results are paginated.
    By default the lists is limited to return a result limit of 100 elements
    and are explored on page 1. Calling `GET /xxx` or
    `GET /xxx?page=1&limit=100` will return the same results.

    To help you navigate through the results contained in the JSON responses, we
    provide `_links` and `_page`properties that let you know where you are in
    the pagination according following elements:
    - **self** : <https://domain/Resources?page=X&limit=Y>
    - first page : <https://domain/Resources?page=X&limit=Y>
    - last page : <https://domain/Resources?page=X&limit=Y>
    - next page : <https://domain/Resources?page=X&limit=Y>
    - previous page : <https://domain/Resources?page=X&limit=Y>
    - size: <number of elements in the current page>
    - total_elements: <total number of elements>
    - total_pages: <total number of pages>
    - number: <current page number>

    `self`, `size`, `total_elements`, `total_pages` and `number` properties are
    mandatories and returned in both paginated and not paginated results. Other
    properties are only returned on paginated result.

    As an example, you have 1215 `orders`. You call `GET /v1/running/orders` without
    pagination parameters, we return 100 and there are still 1115 to explore.
    We therefore send the following elements in the answer body:

    ```
    {
    "_links": {
      "self": {
        "href": "https://pay.oxlin.io/v1/orders?page=1&limit=100"
      },
      "first": {
        "href": "https://pay.oxlin.io/v1/orders?page=1&limit=100"
      },
      "last": {
        "href": "https://pay.oxlin.io/v1/orders?page=13&limit=100"
      },
      "next": {
        "href": "https://pay.oxlin.io/v1/orders?page=2&limit=100"
      },
    "_page": {
      "size": 100,
      "total_elements": 1215,
      "total_pages": 13,
      "number": 1
      }
    }
    ```

    And if you call the page number 7 `GET /v1/running/orders`:

    ```
    {
    "_links": {
      "self": {
        "href": "https://pay.oxlin.io/v1/orders?page=7&limit=100"
      },
      "first": {
        "href": "https://pay.oxlin.io/v1/orders?page=1&limit=100"
      },
      "last": {
        "href": "https://pay.oxlin.io/v1/orders?page=13&limit=100"
      },
      "next": {
        "href": "https://pay.oxlin.io/v1/orders?page=8&limit=100"
      },
      "prev": {
        "href": "https://pay.oxlin.io/v1/orders?page=6&limit=100"
      },
    "_page": {
      "size": 100,
      "total_elements": 1215,
      "total_pages": 13,
      "number": 7
      }
    }
    ```

    ## Versioning

    The API is following the semantic versioning (major.minor). The version is
    located in the URL, patches on the same version endpoint are
    backward-compatible.

    A minor release can add new resources, parameters or properties. A good
    practice for a client implementation is to design the implementation to
    support minor changes.

    The patch releases are not visible to the clients since they are not
    changing the contract.

    ## Versions history
    1.2.0:
    - Add `instant_payment_header`, `instant_payment_header`,
    `instant_payment_header` and `instant_payment_header` options on
    `GET /v1/authorize/{order_id}`.

    1.1.1:
    - `display_QR_code` corrected to `display_qr_code`.
    - Documentation of `terms_body` updated for clarifications.
    - Documentation of `email` updated for clarifications.
    - Documentation of `payer` and `beneficiary` updated for clarifications
    according required declaration using Oxlin agreement.
    - Documentation of `GET /v1/authorize/{order_id}` updated for clarifications
    in case of `302`.
    - Correction of `EVERY_TWO_MONTH` to `EVERY_TWO_MONTHS`.
    - Correction of `country_code` to `country_codes` including samples using list.
    - `providers.base_url` now `optional for internal `providers`.
    - Documentation correction on `v/1/alias`.
    - If `bic` invalide, now we will fail order creation.

    1.1.0:
    - Update minor errors in documentation.
    - Update documentation about `app_to_app_support` parameter.
    - Add `app_to_app_support` and `max_start_date_delay` in `POST /v1/providers/search/` result.
    - Add `orders.history` providing a list of orders status changes.
    - Add `display_qr_code` option on `GET /v1/authorize/{order_id}`.

    1.0.0:
    - Terms screen personalization using parameters `terms_header`,
    `terms_footer` and `terms_body`.

    0.0.22:
    - Adding `page` and `limit` parameters in `POST /v1/providers/search/`.

    0.0.21:
    - Adding `providers.app_to_app_support` information.
    - Adding `app_to_app_support` parameter in `GET /v1/providers/`

    0.0.20:
    - Sandbox mode, new test case `SUBMITTED and REJECTED (with delay)`.
    - Sandbox mode can emulate the case where the redirection to `redirect_url`
    doesn't works.
    - Correction of `start_date` description folowing parameter moving.
    - Change `alias.label` to be mandatory except on creation.
    - Element `_page` is now mandatory on list.
    - Add `bic` on `alias`.
    - `POST /v1/providers/search/` manage list as input and output.
    - Add webview rendering options `display_header`, `item_border_color`,
    `item_border_radius`, `item_arrow_color`, `button_arrow_color`, `button_size`
    and `button_alignment`.

    0.0.19:
    - Create new `alias` resource used to store an account.
    - Resource `alias` is available as a schema when defining
    a payer or beneficiary account.
    - New option `ask_for_alias` added entering authentication flow used to provide a way for the user to register its account for future usage.
    - New option `ask_for_iban` added entering authentication flow used to directly type a payer account IBAN.
    - Remove for one time `registrations` entity.

    0.0.18:
    - Update `beneficiary.name` format to `^[a-zA-Z0-9 ,-]{1,140}$`
    - Parameter `user_reference` have to be optional.
    - Add `sensitive_data` parameter used mask sensitive data such as IBAN.
    - Move parameters `start_date`, `start_date_processing_direction`, `frequency` and `end_date` from `ìnstructions` element to `order` element for a better consistancy according banks capabilities.
    - Add error `400` on `POST /v1/providers/search/`.
    - Update IBAN documentation on `POST /v1/providers/search/`.
    - On `GET /v1/authorize/{order_id}`, rename parameter `lng` to `locale`.
    - On `GET /v1/authorize/{order_id}`, rename parameter `foreground_color` to `elements_color`.
    - On `GET /v1/authorize/{order_id}`, add parameter `elements_font`.
    - On `GET /v1/authorize/{order_id}`, add parameter `elements_font_color`.
    - On `GET /v1/authorize/{order_id}`, add parameter `secondary_elements_font_color`.
    - On `GET /v1/authorize/{order_id}`, add parameter `secondary_elements_color`.
    - On `GET /v1/authorize/{order_id}`, add parameter `countries`.
    - On `GET /v1/authorize/{order_id}`, add parameter `button_radius`.
    - Rename `country_code` to `country_codes`.
    - Update `Sandbox Mode` IBAN from `FR9614508000706283415773T72` to `FR8530003000307599775722N09`.
    - Add `max_start_date_delay` on `providers`.

    0.0.17:
    - Update `beneficiary.name` format to `^[a-zA-Z0-9 ,-]{1,35}$`
    - Add attribute `start_date_processing_direction` used to describe how to
    interpret `start_date` when the bank can refuse it.

    0.0.16:
    - Add an optional `user_reference` on the `order` to be able to identify external system users.
    - Change label maximum size from 140 to 50 to support all banks restrictions (Boursorama reject label > 50).
    - Change label pattern removing `\' character (BNP reject label with character '\').
    - Add method `POST /v1/providers/search/` in replacement of `GET /v1/providers/{iban}`.
    - Depreciate attribute `orders.instructions.beneficiary.bic` since we can extract the information from the IBAN value.
    - Add `orders.instructions.beneficiary.complementary_name` used to enrich displayed name when beneficiary name is constrained to iban declared name.
    - Update `POST /v1/orders` description in order to detail the two way to represent an `order` with or without multiples instructions.
    - Differentiate BIC documentation according input versus output.
    - Update introcution to be more readable.
    - `Sandbox Mode` documentation.
    - Update `POST /token/` documentation on returned parameters and error codes to be consistant with used authenticaiton manager.`
    - `Providers` sare return now associated to list of `country_code` and `GET /v1/providers/` can now be filtered on a list of countries.
    - Parameter `beneficiary.complementary_name` format is now aligned on `beneficiary.name` format.

    0.0.15:
    - Describe callback retry policy.
    - Update error enumerates.
    - Rename `instant_payment` enumerate value `FORBIDDEN` to `NO` and `MANDATORY` to `EXPECTED`.
    - Set `instant_payment` default value from `USER_CHOICE` to `NO`.
    - Add `orders.selected_capability` to identify order effective capability.

    0.0.14:
    - Remove `nationnal_id` from `providers`.
    - Add `creation_date` on `payments`.

    0.0.13:
    - Rework how to get a `Providers` from an IBAN.

    0.0.12:
    - Initiate registration services (creation, document upload, listing).
    - Add `GET /institutions` in order to find institution definition from IBAN.
    - No header Client-ID anymore in responses.
    - Document `client_id`in `GET `/authorize'.

    0.0.11:
    - Documentation of `display_border`.
    - Constrain payment instruction label to map on SEPA requirements.
    - Update callback format in order to support event on multiple resources.

    0.0.10:
    - Correct `GET /orders to `GET /reporting/orders`.
    - Define API URL to `https://oxlin.io`.
    - Update all versioned resources to `https://oxlin.io/V1` path.

    0.0.9:
    - New parameter `light` on widget.
    - New parameter `favorite_providers` on widget.
    - New parameter `title` on widget.
    - New parameter `cancel_url`.

    0.0.8:
    - Correct `GET /providers` sample to reference `providers` in spite of
    `orders`.
    - Rename `SINGLE_IMMEDIATE_PAYMENT` to `SINGLE_INSTANT_PAYMENT`.
    - Return `instant_payment` value in `Order`.
    - Rename from `Direct Payment API` to `Oxlin Payments API`

    0.0.7:
    - Authorise renamed to authorized.

    0.0.6:
    - Remove Basic Authentication support.
    - Document OAuth2 client credential authentication.
    - Document `/token`.

    0.0.5:
    - `GET /orders/{order_id}` transformed to `GET /reporting/orders/{order_id}`.
    - `GET /realtime_orders/{order_id}` transformed to `GET /running/orders/{order_id}`.
    - `PUT /orders/{order_id}` transformed to `PUT /running/orders/{order_id}`.
    - Missing order status `EXPIRED` added.
    - `DELETE /suscribe` changed to `POST /unsuscribe`.
    - `PUT /running/orders/{order_id}` can now set payer `BIC`, `email` or `account`
    when undefined.
    - Added header Client-ID in response of `GET /reporting/orders/{order_id}`,
    `GET /running/orders/{order_id}` and `GET /orders`.
    - Added `GET /providers`.

    0.0.4:
    - Add `end_date` for standing orders.
    - Add `realtime_orders` to distinguish realtime versus reporting flows.
    - Rename `callback` to `webhook callback`.
    - Add order status `FAILED` description.
    - Pagination is using absolute links.
    - X-FWD-Request-ID definition is more explicit.
    - Update and correct redirect_url description.
    - Amount value description correction.
    - Add information about using ISO 8601 extended format for date time.
    - Updating URL length from 140 to 512.
    - `start_date` is now requalified according bank support.
    - Describes how is detected language opening `auth_url`.
    - Rendering options for `auth_url`.
    - Add a description concerning iFrame integration.
    - Order expire after 30 days.
    - Payer bank BIC is valued after authentication, even if the bank was selected
    on Direct Payment page.
    - Documentation of `GET /authorize/{order_id}` used to realise order authorisation.
    - Precision about `redirect_url` that shouldn't be limited to `http` and `https`
    scheme name.
    - Removing `end_to_end_id` because such notion doesn't exist for ASPSP API on instruction
    but exist on payment request. As a consequence, we will use `order.id` that is unique in
    order to uniquely identify the payment request across the entire flow.

    0.0.3:
    - Fix amount pattern.
    - Detail payer BIC definition and usage.
    - Add an optional BIC on beneficiary.
    - Add email to manage PSU notification and identification.
    - Move instant_payment up to support the cas where no payer account was defined.

    0.0.2:
    - Correction on QUATERLY -> QUARTERLY and MOUNTHLY -> MONTHLY.
    - Spelling corrections.
    - Pluralise amount and beneficiary on schema.
    - T&C is now used for Term & Conditions.
    - Payment and order status, manage instant payment use case.
    - Replace ProviderId by BIC.

    0.0.1:
    - Initial version.

servers:
  - url: 'https://pay.oxlin.io/'
    description: 'Oxlin Payments server'

#####################################################
# Global security options
#####################################################
security:
  - ClientCredentials: []

#####################################################
# Orders resources
#####################################################
paths:
  /token:
    post:
      tags:
        - Authorization
      summary: |
        Get an OAuth2 authorization bearer.
      operationId: postToken
      security:
        - BasicAuth: []
      description: |
        API acces is protected using OAuth2 client credential flow. As a consequence, to use the API
        you need to:
        1. Request an authorization bearer using that `/token` method,
        2. Get `access_token` value in the response body and pass it in the `Authorization`
        header of the protected methods you need to access to.
      parameters:
        - $ref: '#/components/parameters/BasicAuthorization'
      requestBody:
        description: |
          Token creation description.
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenCreate'
      responses:
        '200':
          description: |
            Created token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenItem'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'

  /v1/orders:
    post:
      tags:
        - Payment orders
      summary: |
        Create an order.
      operationId: postOrder
      description: |
        Create an order representing one or more payments, today or in the
        future to a unique beneficiary or multiples beneficiaries. An order
        is associated to a unique payment initiation, as a consequence it
        is associated to a unique authentication from the PSU bank.

        Note the order is valid during a 30 days period. After that delay,
        it will expire automaticaly and you can't use it anymore.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
      requestBody:
        description: |
          Description of the order to create. Based on transmitted parameters,
          you will be able to create a single payment (instant or not),
          a standing order or a batch payment.

          > In order to simplify the `orders` creation, it exist two differents
          > format:
          > - Format `SingleInstructionOrder` is a simplified way to create
          > payments of type `SINGLE_PAYMENT`, `SINGLE_INSTANT_PAYMENT` or
          > `STANDING_ORDERS`. Refer to sample `Single payment`.
          > - In addition, `MultiplesInstructionsOrder` format also
          > support payment of type BATCH_PAYMENTS. Refer to sample `Single
          > payment (alternate)`.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SingleInstructionOrder'
                - $ref: '#/components/schemas/MultiplesInstructionsOrder'
            examples:
              Single payment:
                value:
                  redirect_url: 'https://my_redirect_url/'
                  amount: '23.45'
                  currency: 'EUR'
                  beneficiary:
                    schema: 'SEPA'
                    iban: 'FR8530003000307599775722N09'
                    name: 'Jean Dupond'
                  label: 'Payment from John Dupont to Jean Dupond'
              Single payment (alternate):
                value:
                  redirect_url: 'https://my_redirect_url/'
                  instructions:
                    - amount: '23.45'
                      currency: 'EUR'
                      beneficiary:
                        schema: 'SEPA'
                        iban: 'FR8530003000307599775722N09'
                        name: 'Jean Dupond'
                      label: 'Payment from John Dupont to Jean Dupond'
              Pending order:
                value:
                  redirect_url: 'https://my_redirect_url/'
                  amount: '33.33'
                  currency: 'EUR'
                  start_date: '2020-01-01T00:00:00+01:00'
                  frequency: 'WEEKLY'
                  beneficiary:
                    schema: 'SEPA'
                    iban: 'FR7612345987650123456789014'
                    name: 'Jean Dupond'
                  label: 'Recurring payment from John Dupont to Jean Dupond'
              Pending order (alternate):
                value:
                  redirect_url: 'https://my_redirect_url/'
                  start_date: '2020-01-01T00:00:00+01:00'
                  frequency: 'WEEKLY'
                  instructions:
                    - amount: '33.33'
                      currency: 'EUR'
                      beneficiary:
                        schema: 'SEPA'
                        iban: 'FR7612345987650123456789014'
                        name: 'Jean Dupond'
                      label: 'Recurring payment from John Dupont to Jean Dupond'
              Batch payment:
                value:
                  redirect_url: 'https://my_redirect_url/'
                  instructions:
                    - amount: '45.65'
                      currency: 'EUR'
                      beneficiary:
                        schema: 'SEPA'
                        iban: 'FR7612345987650123456789014'
                        name: 'Jean Dupond'
                      label: 'Payment from John Dupont to Jean Dupond'
                    - amount: '23.43'
                      currency: 'EUR'
                      beneficiary:
                        schema: 'SEPA'
                        iban: 'FR7912345987650123456789014'
                        name: 'Jean Doe'
                      label: 'Payment from John Dupont to Jean Doe'
                    - amount: '345'
                      currency: 'EUR'
                      beneficiary:
                        schema: 'SEPA'
                        iban: 'FR8312345987650123456789014'
                        name: 'John Jean'
                      label: 'Payment from John Dupont to John Jean'
      responses:
        '201':
          description: |
            Created order.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                Single payment:
                  value:
                    id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
                    order_status: 'NEW'
                    creation_date: '2020-01-24T08:42:32+01:00'
                    auth_url: 'https://oxlin.com/auth_payment/12/'
                    redirect_url: 'https://my_redirect_url/'
                    start_date: '2020-01-24T08:42:32+01:00'
                    instructions:
                      - amount: '23.45'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR8530003000307599775722N09'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                Pending order:
                  value:
                    id: '39d490ea-a95e-11ea-bb37-0242ac130002'
                    order_status: 'NEW'
                    creation_date: '2019-12-24T09:34:23+01:00'
                    auth_url: 'https://oxlin.com/auth_payment/15/'
                    redirect_url: 'https://my_redirect_url/'
                    start_date: '2020-01-01T00:00:00+01:00'
                    frequency: 'WEEKLY'
                    instructions:
                      - amount: '33.33'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Recurring payment from John Dupont to Jean Dupond'
                Batch payment:
                  value:
                    id: '3cf58fea-a95e-11ea-bb37-0242ac130002'
                    order_status: 'NEW'
                    creation_date: '2020-01-24T09:40:23+01:00'
                    auth_url: 'https://oxlin.com/auth_payment/15/'
                    redirect_url: 'https://my_redirect_url/'
                    start_date: '2020-01-24T09:40:23+01:00'
                    instructions:
                      - amount: '45.65'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                      - amount: '23.43'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7912345987650123456789014'
                          name: 'Jean Doe'
                        label: 'Payment from John Dupont to Jean Doe'
                      - amount: '345'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR8312345987650123456789014'
                          name: 'John Jean'
                        label: 'Payment from John Dupont to John Jean'
          links:
            GetOrderByOrderId:
              operationId: getOrder
              parameters:
                order_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `order_id` parameter in `GET /v1/reporting/orders/{order_id}`
            GetRunningOrderByOrderId:
              operationId: getRunningOrder
              parameters:
                order_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `order_id` parameter in `GET /v1/running/orders/{order_id}`
            GetAuthorizeByOrderId:
              operationId: getAuthorize
              parameters:
                order_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `order_id` parameter in `GET /v1/authorize/{order_id}`
            PutOrderByOrderId:
              operationId: putOrder
              parameters:
                order_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `order_id` parameter in `PUT /v1/orders/{order_id}`
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

  /v1/authorize/{order_id}:
    get:
      tags:
        - Payment orders
      summary: |
        Start authorisation flow for an order.
      security: []
      operationId: getAuthorize
      description: |
        Open the HTML page use to manage the order authorisation flow. Depending on order
        context, page will provides a way to:
        - Manage terms and conditions
        - Get payer email address
        - Select payer bank
        - Select payer account
        - Redirect to the bank authorisation page

        The page will automaticly select the best language to use according
        client browser configuration. It is possible to override browser language
        detection using `lng` parameter. Language detection priority is following:
        1. `lng` parameter
        2. browser configuration
        3. `en_EN` value
      parameters:
        - $ref: '#/components/parameters/OrderIdParam'
        - $ref: '#/components/parameters/ClientIdParam'
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/LanguageDeprecated'
        - $ref: '#/components/parameters/Countries'
        - $ref: '#/components/parameters/FavoriteProviders'
        - $ref: '#/components/parameters/Title'
        - $ref: '#/components/parameters/TermsHeader'
        - $ref: '#/components/parameters/TermsFooter'
        - $ref: '#/components/parameters/TermsBody'
        - $ref: '#/components/parameters/InstantPaymentHeader'
        - $ref: '#/components/parameters/InstantPaymentFooter'
        - $ref: '#/components/parameters/ProvidersHeader'
        - $ref: '#/components/parameters/ProvidersSearchHint'
        - $ref: '#/components/parameters/Font'
        - $ref: '#/components/parameters/FontColor'
        - $ref: '#/components/parameters/FontSecondaryColor'
        - $ref: '#/components/parameters/BackgroundColor'
        - $ref: '#/components/parameters/ElementsFont'
        - $ref: '#/components/parameters/ElementsColor'
        - $ref: '#/components/parameters/ForegroundColorDeprecated'
        - $ref: '#/components/parameters/ElementsFontColor'
        - $ref: '#/components/parameters/SecondaryElementsColor'
        - $ref: '#/components/parameters/SecondaryElementsFontColor'
        - $ref: '#/components/parameters/DisplayBorder'
        - $ref: '#/components/parameters/Light'
        - $ref: '#/components/parameters/ButtonRadius'
        - $ref: '#/components/parameters/CancelURL'
        - $ref: '#/components/parameters/AskForAlias'
        - $ref: '#/components/parameters/AskForIBAN'
        - $ref: '#/components/parameters/DisplayQRCode'
        - $ref: '#/components/parameters/DisplayHeader'
        - $ref: '#/components/parameters/ItemBorderColor'
        - $ref: '#/components/parameters/ItemBorderRadius'
        - $ref: '#/components/parameters/ItemArrowColor'
        - $ref: '#/components/parameters/ButtonArrowColor'
        - $ref: '#/components/parameters/ButtonSize'
        - $ref: '#/components/parameters/ButtonAlignment'
      responses:
        '200':
          description: |
            HTML page used to authorize the order.
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
        '302':
          description: |
            Only if not using Oxlin agreement, return header `Location` with
            URL to browse to in order to start authorisation flow at the bank side.

            > Note the `302` redirection only appends if `orders` is fully filled
            with all information required to select the payer bank. If not,
            we will return a `200` response with a bank selection page.
          headers:
            Location:
              $ref: '#/components/headers/Location'
        '400':
          description: |
            HTML page describing an HTTP 400 error code.
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
        '404':
          description: |
            HTML page describing an HTTP 404 error code.
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
        '405':
          description: |
            HTML page describing an HTTP 405 error code.
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>
        '500':
          description: |
            HTML page describing an HTTP 500 error code.
          content:
            text/html:
              schema:
                type: string
                example: <html>HTML Content</html>

  /v1/running/orders/{order_id}:
    get:
      tags:
        - Payment orders
      summary: |
        Get a specific order for realtime access.
      operationId: getRunningOrder
      description: |
        Retrieve a specific order based on its unique identifier for realtime access.
        As a consequence, **can only be used to get an `orders` during the realtime flow**
        means **while order is in its initial state `NEW` and during the next 10 minutes
        after it was updated to another status**. The method have to be only used for
        high availability services, if it doesn't return any `orders`, you are probably
        using the wrong method and have to deep into using `GET v1/reporting/orders/XXX`.

        Each order represent one or more payments,
        today or in the future, to a unique beneficiary or multiples
        beneficiaries. An order is associated to one or more instructions but to a
        unique payment initiation at the bank side, as a consequence it is associated
        to a unique authentication from the PSU bank.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/OrderIdParam'
      responses:
        '200':
          description: |
            Requested `order` definition.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                Unauthorized single payment:
                  value:
                    id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
                    order_status: 'NEW'
                    creation_date: '2020-01-24T08:42:32+01:00'
                    auth_url: 'https://oxlin.com/auth_payment/12/'
                    redirect_url: 'https://my_redirect_url/'
                    start_date: '2020-01-24T08:42:32+01:00'
                    instructions:
                      - amount: '23.45'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR8530003000307599775722N09'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                Authorized single payment:
                  value:
                    id: '2f4563b6-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'AUTHORIZED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2020-01-24T09:34:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'SINGLE_PAYMENT'
                    start_date: '2020-01-24T09:34:23+01:00'
                    instructions:
                      - amount: '123.45'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'SUBMITTED'
                            amount: '123.45'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:38:12+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                Closed single payment:
                  value:
                    id: '363e04a2-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'CLOSED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2020-01-24T09:38:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'SINGLE_PAYMENT'
                    start_date: '2020-01-24T09:38:23+01:00'
                    instructions:
                      - amount: '12'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '12'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:40:34+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                Authorized pending order:
                  value:
                    id: '39d490ea-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'AUTHORIZED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2019-12-24T09:34:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'STANDING_ORDERS'
                    start_date: '2020-01-01T00:00:00+01:00'
                    frequency: 'WEEKLY'
                    instructions:
                      - amount: '33.33'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Recurring payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '33.33'
                            currency: 'EUR'
                            execution_date: '2020-01-01T00:00:00+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                          - payment_status: 'EXECUTED'
                            amount: '33.33'
                            currency: 'EUR'
                            execution_date: '2020-01-08T00:00:00+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                          - payment_status: 'EXECUTED'
                            amount: '33.33'
                            currency: 'EUR'
                            execution_date: '2020-01-15T00:00:00+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                Closed batch payment:
                  value:
                    id: '3cf58fea-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'CLOSED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2020-01-24T09:40:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'BATCH_PAYMENTS'
                    start_date: '2020-01-24T09:40:23+01:00'
                    instructions:
                      - amount: '45.65'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '45.65'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:43:25+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                      - amount: '23.43'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7912345987650123456789014'
                          name: 'Jean Doe'
                        label: 'Payment from John Dupont to Jean Doe'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '23.43'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:43:25+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                      - amount: '345'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR8312345987650123456789014'
                          name: 'John Jean'
                        label: 'Payment from John Dupont to John Jean'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '345'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:43:25+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    put:
      tags:
        - Payment orders
      summary: |
        Update a specific order.
      operationId: putOrder
      description: |
        Update a specific order based on its unique identifier. It is possible
        to update:
          - `order_status`: an order in status `NEW` or `AUTHORIZED` can be
          changed to status `CLOSED`. In such case, order won't create any
          new payments after status change, however existing payments status
          won't change and are kept in current state.
          - `bic`: you can change payer bank identification for an order in
          status `NEW` with `order.bic` **undefined**.
          - `email`: you can change payer email for an order in
          status `NEW` with `orders.email` **undefined**.
          - `selected_capability`: you can change payment used capability for an order in
          status `NEW` with `orders.instructions.payments` **undefined**.
          - `payer`: you can change payer account for an order in
          status `NEW` with `order.payer` **undefined**.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/OrderIdParam'
      requestBody:
        description: |
          Updates to realize on `order`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderItemUpdate'
            examples:
              Cancel an order:
                value:
                  order_status: 'CLOSED'
              Define payer bank:
                value:
                  bic: 'AXABFRPP'
              Define payer email:
                value:
                  email: 'payer.email@domain.com'
              Define selected capability:
                value:
                  selected_capability: 'SINGLE_PAYMENT'
              Define payer:
                value:
                  payer:
                    schema: 'SEPA'
                    iban: 'FR8530003000307599775722N09'
      responses:
        '204':
          description: |
            Order successfuly updated.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

  /v1/reporting/orders/{order_id}:
    get:
      tags:
        - Payment orders
      summary: |
        Get a specific order.
      operationId: getOrder
      description: |
        Retrieve a specific order based on its unique identifier.
        Each order represent one or more payments,
        today or in the future, to a unique beneficiary or multiples
        beneficiaries. An order is associated to a unique payment initiation,
        as a consequence it is associated to a unique authentication from the
        PSU bank.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/OrderIdParam'
      responses:
        '200':
          description: |
            Requested `order` definition.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderItem'
              examples:
                Unauthorized single payment:
                  value:
                    id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
                    order_status: 'NEW'
                    creation_date: '2020-01-24T08:42:32+01:00'
                    auth_url: 'https://oxlin.com/auth_payment/12/'
                    redirect_url: 'https://my_redirect_url/'
                    start_date: '2020-01-24T08:42:32+01:00'
                    instructions:
                      - amount: '23.45'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR8530003000307599775722N09'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                Authorized single payment:
                  value:
                    id: '2f4563b6-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'AUTHORIZED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2020-01-24T09:34:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'SINGLE_PAYMENT'
                    start_date: '2020-01-24T09:34:23+01:00'
                    instructions:
                      - amount: '123.45'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'SUBMITTED'
                            amount: '123.45'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:38:12+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                Closed single payment:
                  value:
                    id: '363e04a2-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'CLOSED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2020-01-24T09:38:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'SINGLE_PAYMENT'
                    start_date: '2020-01-24T09:38:23+01:00'
                    instructions:
                      - amount: '12'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '12'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:40:34+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                Authorized pending order:
                  value:
                    id: '39d490ea-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'AUTHORIZED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2019-12-24T09:34:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'STANDING_ORDERS'
                    start_date: '2020-01-01T00:00:00+01:00'
                    frequency: 'WEEKLY'
                    instructions:
                      - amount: '33.33'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Recurring payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '33.33'
                            currency: 'EUR'
                            execution_date: '2020-01-01T00:00:00+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                          - payment_status: 'EXECUTED'
                            amount: '33.33'
                            currency: 'EUR'
                            execution_date: '2020-01-08T00:00:00+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                          - payment_status: 'EXECUTED'
                            amount: '33.33'
                            currency: 'EUR'
                            execution_date: '2020-01-15T00:00:00+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                Closed batch payment:
                  value:
                    id: '3cf58fea-a95e-11ea-bb37-0242ac130002'
                    bic: 'AXABFRPP'
                    order_status: 'CLOSED'
                    payer:
                      schema: 'SEPA'
                      iban: 'FR7612345987650123456789014'
                    creation_date: '2020-01-24T09:40:23+01:00'
                    redirect_url: 'https://my_redirect_url/'
                    selected_capability: 'BATCH_PAYMENTS'
                    start_date: '2020-01-24T09:40:23+01:00'
                    instructions:
                      - amount: '45.65'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7612345987650123456789014'
                          name: 'Jean Dupond'
                        label: 'Payment from John Dupont to Jean Dupond'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '45.65'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:43:25+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                      - amount: '23.43'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR7912345987650123456789014'
                          name: 'Jean Doe'
                        label: 'Payment from John Dupont to Jean Doe'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '23.43'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:43:25+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
                      - amount: '345'
                        currency: 'EUR'
                        beneficiary:
                          schema: 'SEPA'
                          iban: 'FR8312345987650123456789014'
                          name: 'John Jean'
                        label: 'Payment from John Dupont to John Jean'
                        payments:
                          - payment_status: 'EXECUTED'
                            amount: '345'
                            currency: 'EUR'
                            execution_date: '2020-01-24T09:43:25+01:00'
                            creation_date: '2020-01-27T12:23:12+01:00'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/reporting/orders/:
    get:
      tags:
        - Payment orders
      summary: |
        Returns a list of orders.
      description: |
        Get the list of `orders`. Each order represents one or more payments,
        today or in the future, to a unique beneficiary or multiple
        beneficiaries. An order is associated to a unique payment initiation,
        as a consequence it is associated to a unique authentication from the
        PSU bank.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/FromCreationDateParam'
        - $ref: '#/components/parameters/ToCreationDateParam'
        - $ref: '#/components/parameters/FromExecutionDateParam'
        - $ref: '#/components/parameters/OrderStatusParam'
        - $ref: '#/components/parameters/UserReferenceParam'
      responses:
        '200':
          description: A JSON array of `orders`.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                description: |
                  Orders response.
                type: object
                properties:
                  orders:
                    description: |
                      List of orders.
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderItem'
                  _links:
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                    required:
                      - self
                  _page:
                    $ref: '#/components/schemas/Page'
                required:
                  - orders
                  - _links
                  - _page
                example:
                  orders:
                    - id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
                      order_status: 'NEW'
                      creation_date: '2020-01-24T08:42:32+01:00'
                      auth_url: 'https://oxlin.com/auth_payment/12/'
                      redirect_url: 'https://my_redirect_url/'
                      start_date: '2020-01-24T08:42:32+01:00'
                      instructions:
                        - amount: '23.45'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR8530003000307599775722N09'
                            name: 'Jean Dupond'
                          label: 'Payment from John Dupont to Jean Dupond'
                    - id: '2f4563b6-a95e-11ea-bb37-0242ac130002'
                      bic: 'AXABFRPP'
                      order_status: 'AUTHORIZED'
                      payer:
                        schema: 'SEPA'
                        iban: 'FR7612345987650123456789014'
                      creation_date: '2020-01-24T09:34:23+01:00'
                      redirect_url: 'https://my_redirect_url/'
                      selected_capability: 'SINGLE_PAYMENT'
                      start_date: '2020-01-24T09:34:23+01:00'
                      instructions:
                        - amount: '123.45'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR7612345987650123456789014'
                            name: 'Jean Dupond'
                          label: 'Payment from John Dupont to Jean Dupond'
                          payments:
                            - payment_status: 'SUBMITTED'
                              amount: '123.45'
                              currency: 'EUR'
                              execution_date: '2020-01-24T09:38:12+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                    - id: '363e04a2-a95e-11ea-bb37-0242ac130002'
                      bic: 'AXABFRPP'
                      order_status: 'CLOSED'
                      payer:
                        schema: 'SEPA'
                        iban: 'FR7612345987650123456789014'
                      creation_date: '2020-01-24T09:38:23+01:00'
                      redirect_url: 'https://my_redirect_url/'
                      selected_capability: 'SINGLE_PAYMENT'
                      start_date: '2020-01-24T09:38:23+01:00'
                      instructions:
                        - amount: '12'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR7612345987650123456789014'
                            name: 'Jean Dupond'
                          label: 'Payment from John Dupont to Jean Dupond'
                          payments:
                            - payment_status: 'EXECUTED'
                              amount: '12'
                              currency: 'EUR'
                              execution_date: '2020-01-24T09:40:34+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                    - id: '39d490ea-a95e-11ea-bb37-0242ac130002'
                      bic: 'AXABFRPP'
                      order_status: 'AUTHORIZED'
                      payer:
                        schema: 'SEPA'
                        iban: 'FR7612345987650123456789014'
                      creation_date: '2019-12-24T09:34:23+01:00'
                      redirect_url: 'https://my_redirect_url/'
                      selected_capability: 'STANDING_ORDERS'
                      start_date: '2020-01-01T00:00:00+01:00'
                      frequency: 'WEEKLY'
                      instructions:
                        - amount: '33.33'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR7612345987650123456789014'
                            name: 'Jean Dupond'
                          label: 'Recurring payment from John Dupont to Jean Dupond'
                          payments:
                            - payment_status: 'EXECUTED'
                              amount: '33.33'
                              currency: 'EUR'
                              execution_date: '2020-01-01T00:00:00+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                            - payment_status: 'EXECUTED'
                              amount: '33.33'
                              currency: 'EUR'
                              execution_date: '2020-01-08T00:00:00+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                            - payment_status: 'EXECUTED'
                              amount: '33.33'
                              currency: 'EUR'
                              execution_date: '2020-01-15T00:00:00+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                    - id: '3cf58fea-a95e-11ea-bb37-0242ac130002'
                      bic: 'AXABFRPP'
                      order_status: 'CLOSED'
                      payer:
                        schema: 'SEPA'
                        iban: 'FR7612345987650123456789014'
                      creation_date: '2020-01-24T09:40:23+01:00'
                      redirect_url: 'https://my_redirect_url/'
                      selected_capability: 'BATCH_PAYMENTS'
                      start_date: '2020-01-24T09:40:23+01:00'
                      instructions:
                        - amount: '45.65'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR7612345987650123456789014'
                            name: 'Jean Dupond'
                          label: 'Payment from John Dupont to Jean Dupond'
                          payments:
                            - payment_status: 'EXECUTED'
                              amount: '45.65'
                              currency: 'EUR'
                              execution_date: '2020-01-24T09:43:25+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                        - amount: '23.43'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR7912345987650123456789014'
                            name: 'Jean Doe'
                          label: 'Payment from John Dupont to Jean Doe'
                          payments:
                            - payment_status: 'EXECUTED'
                              amount: '23.43'
                              currency: 'EUR'
                              execution_date: '2020-01-24T09:43:25+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                        - amount: '345'
                          currency: 'EUR'
                          beneficiary:
                            schema: 'SEPA'
                            iban: 'FR8312345987650123456789014'
                            name: 'John Jean'
                          label: 'Payment from John Dupont to John Jean'
                          payments:
                            - payment_status: 'EXECUTED'
                              amount: '345'
                              currency: 'EUR'
                              execution_date: '2020-01-24T09:43:25+01:00'
                              creation_date: '2020-01-27T12:23:12+01:00'
                  _links:
                    - self: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                    - first: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                    - last: 'https://pay.oxlin.io/v1/reporting/orders?page=10'
                    - next: 'https://pay.oxlin.io/v1/reporting/orders?page=2'
                  _page:
                    size: '5'
                    total_elements: '50'
                    total_pages: '10'
                    number: '1'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /v1/alias:
    post:
      tags:
        - Account alias
      summary: |
        Create an alias.
      operationId: postAlias
      description: |
        Create an account alias used to store account identification
        in order to be reused for future payments.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
      requestBody:
        description: |
          Description of the account alias to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasItemCreate'
            example:
              user_reference: "current_user_reference"
              label: "My prefered account"
              account:
                schema: 'SEPA'
                iban: 'FR8530003000307599775722N09'
      responses:
        '201':
          description: |
            Created alias.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasItem'
              example:
                id: '054b7b60-0d85-4b91-841b-f70163cff8d4'
                user_reference: "current_user_reference"
                label: "My prefered account"
                account:
                  schema: 'SEPA'
                  iban: 'FR8530003000307599775722N09'
          links:
            GetAliasByAliasId:
              operationId: getAlias
              parameters:
                alias_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `alias_id` parameter in `GET /v1/alias/{alias_id}`
            PutAliasByAliasId:
              operationId: putAlias
              parameters:
                alias_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `alias_id` parameter in `PUT /v1/alias/{alias_id}`
            DeleteAliasByAliasId:
              operationId: deleteAlias
              parameters:
                alias_id: '$response.body#/id'
              description: |
                The `id` value returned in the response can be used as
                the `alias_id` parameter in `DELETE /v1/alias/{alias_id}`
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

  /v1/alias/{alias_id}:
    get:
      tags:
        - Account alias
      summary: |
        Get a specific account alias.
      operationId: getAlias
      description: |
        Retrieve a specific account alias based on its unique identifier.
        An account alias is used to store accounts identification
        in order to be reused for future payments.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/AliasIdParam'
      responses:
        '200':
          description: |
            Requested alias definition.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasItem'
              example:
                id: '054b7b60-0d85-4b91-841b-f70163cff8d4'
                user_reference: "current_user_reference"
                label: "My prefered account"
                account:
                  schema: 'SEPA'
                  iban: 'FR8530003000307599775722N09'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

    put:
      tags:
        - Account alias
      summary: |
        Update a specific alias.
      operationId: putAlias
      description: |
        Update a specific account alias based on its unique identifier.
        It is possible to update:
          - `label`: the alias label.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/AliasIdParam'
      requestBody:
        description: |
          Updates to realize on alias.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AliasItemUpdate'
            example:
              label: "My new prefered account"
      responses:
        '204':
          description: |
            Alias successfuly updated.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

    delete:
      tags:
        - Account alias
      summary: |
        Delete a specific alias.
      operationId: deleteAlias
      description: |
        Delete a specific alias based on its unique identifier.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/AliasIdParam'
      responses:
        '204':
          description: |
            Alias successfuly deleted.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

  /v1/alias/:
    get:
      tags:
        - Account alias
      summary: |
        Returns a list of alias.
      description: |
        Get the list of alias based on search criteria.
        An account alias is used to store accounts identification
        in order to be reused for future payments.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/UserReferenceRequiredParam'
      responses:
        '200':
          description: A JSON array of alias.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                description: |
                  Alias response.
                type: object
                properties:
                  aliases:
                    description: |
                      List of alias.
                    type: array
                    items:
                      $ref: '#/components/schemas/AliasItem'
                  _links:
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                    required:
                      - self
                  _page:
                    $ref: '#/components/schemas/Page'
                required:
                  - orders
                  - _links
                  - _page
                example:
                  aliases:
                    - id: '054b7b60-0d85-4b91-841b-f70163cff8d4'
                      user_reference: "current_user_reference"
                      label: "My prefered account"
                      account:
                        schema: 'SEPA'
                        iban: 'FR8530003000307599775722N09'
                    - id: 'a4936e95-918b-4301-a907-e5040814fec1'
                      user_reference: "current_user_reference"
                      label: "My secondary account"
                      account:
                        schema: 'SEPA'
                        iban: 'FR8530003000307599775722N09'
                  _links:
                    - self: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                    - first: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                    - last: 'https://pay.oxlin.io/v1/reporting/orders?page=10'
                    - next: 'https://pay.oxlin.io/v1/reporting/orders?page=2'
                  _page:
                    size: '2'
                    total_elements: '20'
                    total_pages: '10'
                    number: '1'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  # /v1/registrations:
  #   post:
  #     tags:
  #       - Registrations
  #     summary: |
  #       Create a registration.
  #     description: |
  #       In order to comply regulation on risk and anti money laundering, Oxlin
  #       payments can require you to declare natural or legal person
  #       associating them authorized accounts. To declare such authorized person,
  #       you need to create 'registrations' to associate accounts with peoples.
  #       Depending on registered profiles, you will have to upload documents
  #       to continue onboarding process either redirect the person to the URL you
  #       will get using `POST /v1/registrations/{registration_id}/authorize_url'
  #       or collecting and uploading them using `POST v1/documents/{document_id}'.
  #     parameters:
  #       - $ref: '#/components/parameters/X-FWD-Request-ID'
  #       - $ref: '#/components/parameters/BearerAuthorization'
  #     requestBody:
  #       description: |
  #         Description of the registration to create.
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RegistrationItemCreate'
  #           examples:
  #             Natural person:
  #               value:
  #                 person:
  #                   type: 'NATURAL_PERSON'
  #                   name: 'Guy'
  #                   surname: 'Mauve'
  #                   birth_date: '1978/09/13'
  #                   birth_place: 'Paris'
  #                 accounts:
  #                 - description: 'The bank cash account'
  #                   identification: 'FR7630003020401010101014267'
  #             Company:
  #               value:
  #                 person:
  #                   type: 'COMPANY'
  #                   name: 'World Company'
  #                   legal_form: 'SARL'
  #                   national_identification: '765456769'
  #                   beneficiaries:
  #                   - name: 'Guy'
  #                     surname: 'Mauve'
  #                     birth_date: '1978/09/13'
  #                     birth_place: 'Paris'
  #                   - name: 'John'
  #                     surname: 'Doe'
  #                     birth_date: '1956/08/24'
  #                     birth_place: 'Chicago'
  #                 accounts:
  #                 - description: 'The bank cash account'
  #                   identification: 'FR7630003020401010101014267'
  #             Regulated entity:
  #               value:
  #                 person:
  #                   type: 'REGULATED_ENTITY'
  #                   name: 'Insurance Corp'
  #                   supervisory_authority: 'ACPR'
  #                   registration_number: '16829'
  #                 accounts:
  #                 - description: 'The bank cash account'
  #             Association:
  #               value:
  #                 person:
  #                   type: 'ASSOCIATION'
  #                   name: 'Assoplus'
  #                   address:
  #                     street: '109 association street'
  #                     city: 'Toulouse'
  #                     state: 'Occitanie'
  #                     zipcode: '13100'
  #                     country: 'France'
  #                   registration_number: '150298345'
  #                 accounts:
  #                 - description: 'The bank cash account'
  #                   identification: 'FR7630003020401010101014267'
  #     responses:
  #       '201':
  #         description: |
  #           Created registration.
  #         headers:
  #           X-FWD-Request-ID:
  #             $ref: '#/components/headers/X-FWD-Request-ID'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RegistrationItem'
  #             examples:
  #               Natural person:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'NATURAL_PERSON'
  #                     name: 'Guy'
  #                     surname: 'Mauve'
  #                     birth_date: '1978/09/13'
  #                     birth_place: 'Paris'
  #                     id_proof:
  #                       - description: 'ID document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - ID
  #                         - PASSPORT
  #                         document_id: 'f78e97dc-153f-11eb-adc1-0242ac120002'
  #                       - description: 'Additional document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - ID
  #                         - PASSPORT
  #                         - TAX_DECLARATION
  #                         - PAYSLIP
  #                         document_id: '04677672-1540-11eb-adc1-0242ac120002'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '1cbed42c-1540-11eb-adc1-0242ac120002'
  #               Company:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'COMPANY'
  #                     name: 'World Company'
  #                     legal_form: 'SARL'
  #                     national_identification: '765456769'
  #                     id_proof:
  #                       - description: 'ID document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - KBIS
  #                         document_id: '2d3fc63a-1540-11eb-adc1-0242ac120002'
  #                       - description: 'Additional document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - COMPANY_STATUS
  #                         document_id: '396c4032-1540-11eb-adc1-0242ac120002'
  #                     beneficiaries:
  #                     - name: 'Guy'
  #                       surname: 'Mauve'
  #                       birth_date: '1978/09/13'
  #                       birth_place: 'Paris'
  #                       id_proof:
  #                         - description: 'ID document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           document_id: '566dbd50-1540-11eb-adc1-0242ac120002'
  #                         - description: 'Additional document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           - TAX_DECLARATION
  #                           - PAYSLIP
  #                           document_id: '605c3b84-1540-11eb-adc1-0242ac120002'
  #                     - name: 'John'
  #                       surname: 'Doe'
  #                       birth_date: '1956/08/24'
  #                       birth_place: 'Chicago'
  #                       id_proof:
  #                         - description: 'ID document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           document_id: '6a4f3cc2-1540-11eb-adc1-0242ac120002'
  #                         - description: 'Additional document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           - TAX_DECLARATION
  #                           - PAYSLIP
  #                           document_id: '70f51bfa-1540-11eb-adc1-0242ac120002'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '81aa1aa4-1540-11eb-adc1-0242ac120002'
  #               Regulated entity:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'REGULATED_ENTITY'
  #                     name: 'Insurance Corp'
  #                     supervisory_authority: 'ACPR'
  #                     registration_number: '16829'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '90ee7514-1540-11eb-adc1-0242ac120002'
  #               Association:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'ASSOCIATION'
  #                     name: 'Assoplus'
  #                     address:
  #                       street: '109 association street'
  #                       city: 'Toulouse'
  #                       state: 'Occitanie'
  #                       zipcode: '13100'
  #                       country: 'France'
  #                     registration_number: '150298345'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '9cbfe986-1540-11eb-adc1-0242ac120002'
  #         links:
  #           GetRegistrationByOrderId:
  #             operationId: getRegistration
  #             parameters:
  #               order_id: '$response.body#/id'
  #             description: |
  #               The `id` value returned in the response can be used as
  #               the `registration_id` parameter in `GET /v1/registrations/{registration_id}`
  #           DeleteRegistrationByOrderId:
  #             operationId: deleteRegistration
  #             parameters:
  #               order_id: '$response.body#/id'
  #             description: |
  #               The `id` value returned in the response can be used as
  #               the `registration_id` parameter in `DELETE /v1/registrations/{registration_id}`
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '405':
  #         $ref: '#/components/responses/405'
  #       '415':
  #         $ref: '#/components/responses/415'
  #       '500':
  #         $ref: '#/components/responses/500'
  #
  # /v1/registrations/{registration_id}/authorize_url:
  #   post:
  #     tags:
  #       - Registrations
  #     summary: |
  #       Create a registration authorization URL.
  #     description: |
  #       In order to comply regulation on risk and anti money laundering, Oxlin
  #       payments can require you to register person associating authorized
  #       accounts. Redirecting your custmer to the authorization URL will give you
  #       the way to collect expected documents required to complete registration
  #       process.
  #     parameters:
  #       - $ref: '#/components/parameters/X-FWD-Request-ID'
  #       - $ref: '#/components/parameters/BearerAuthorization'
  #       - $ref: '#/components/parameters/RegistrationIdParam'
  #     responses:
  #       '201':
  #         description: |
  #           Created registration URL.
  #         headers:
  #           X-FWD-Request-ID:
  #             $ref: '#/components/headers/X-FWD-Request-ID'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/LocationItem'
  #             example:
  #               location: 'https://pay.oxlin.io/registrations/d2eda060-f9bc-11ea-adc1-0242ac120002'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '405':
  #         $ref: '#/components/responses/405'
  #       '415':
  #         $ref: '#/components/responses/415'
  #       '500':
  #         $ref: '#/components/responses/500'
  #
  # /v1/documents/{document_id}:
  #   post:
  #     tags:
  #       - Registrations
  #     summary: |
  #       Upload documents to a registration.
  #     description: |
  #       Documents that can be required during registration process have to be
  #       uploaded using `documents` resource and referencing document_id as
  #       defined by `registrations` object.
  #     parameters:
  #       - $ref: '#/components/parameters/X-FWD-Request-ID'
  #       - $ref: '#/components/parameters/BearerAuthorization'
  #       - $ref: '#/components/parameters/DocumentIdParam'
  #     requestBody:
  #       description: |
  #         Document to upload.
  #       content:
  #         image/png:
  #           schema:
  #             type: string
  #             format: binary
  #         image/jpeg:
  #           schema:
  #             type: string
  #             format: binary
  #         application/pdf:
  #           schema:
  #             type: string
  #             format: binary
  #         application/zip:
  #           schema:
  #             type: string
  #             format: binary
  #     responses:
  #       '201':
  #         description: |
  #           Document was transmited.
  #         headers:
  #           X-FWD-Request-ID:
  #             $ref: '#/components/headers/X-FWD-Request-ID'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '405':
  #         $ref: '#/components/responses/405'
  #       '415':
  #         $ref: '#/components/responses/415'
  #       '500':
  #         $ref: '#/components/responses/500'
  #
  # /v1/registrations/:
  #   get:
  #     tags:
  #       - Registrations
  #     summary: |
  #       Returns a list of registrations.
  #     description: |
  #       Get the list of `registrations` which are the objects used to associate
  #       authorized person with accounts.
  #     parameters:
  #       - $ref: '#/components/parameters/X-FWD-Request-ID'
  #       - $ref: '#/components/parameters/BearerAuthorization'
  #       - $ref: '#/components/parameters/PageParam'
  #       - $ref: '#/components/parameters/LimitParam'
  #       - $ref: '#/components/parameters/FromCreationDateParam'
  #       - $ref: '#/components/parameters/ToCreationDateParam'
  #       - $ref: '#/components/parameters/ServiceLevelParam'
  #       - $ref: '#/components/parameters/PersonTypeParam'
  #       - $ref: '#/components/parameters/PersonNameSurnameParam'
  #     responses:
  #       '200':
  #         description: A JSON array of `registrations`.
  #         headers:
  #           X-FWD-Request-ID:
  #             $ref: '#/components/headers/X-FWD-Request-ID'
  #         content:
  #           application/json:
  #             schema:
  #               description: |
  #                 Registrations response.
  #               type: object
  #               properties:
  #                 registrations:
  #                   description: |
  #                     List of registrations.
  #                   type: array
  #                   items:
  #                     $ref: '#/components/schemas/RegistrationItem'
  #                 _links:
  #                   type: object
  #                   properties:
  #                     self:
  #                       $ref: '#/components/schemas/GenericLink'
  #                     first:
  #                       $ref: '#/components/schemas/GenericLink'
  #                     last:
  #                       $ref: '#/components/schemas/GenericLink'
  #                     next:
  #                       $ref: '#/components/schemas/GenericLink'
  #                     prev:
  #                       $ref: '#/components/schemas/GenericLink'
  #                   required:
  #                     - self
  #                 _page:
  #                   $ref: '#/components/schemas/Page'
  #               required:
  #                 - registrations
  #                 - _links
  #               example:
  #                 registrations:
  #                 - id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'NATURAL_PERSON'
  #                     name: 'Guy'
  #                     surname: 'Mauve'
  #                     birth_date: '1978/09/13'
  #                     birth_place: 'Paris'
  #                     id_proof:
  #                       - description: 'ID document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - ID
  #                         - PASSPORT
  #                         document_id: 'f78e97dc-153f-11eb-adc1-0242ac120002'
  #                       - description: 'Additional document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - ID
  #                         - PASSPORT
  #                         - TAX_DECLARATION
  #                         - PAYSLIP
  #                         document_id: '04677672-1540-11eb-adc1-0242ac120002'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '1cbed42c-1540-11eb-adc1-0242ac120002'
  #                 - id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'COMPANY'
  #                     name: 'World Company'
  #                     legal_form: 'SARL'
  #                     national_identification: '765456769'
  #                     id_proof:
  #                       - description: 'ID document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - KBIS
  #                         document_id: '2d3fc63a-1540-11eb-adc1-0242ac120002'
  #                       - description: 'Additional document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - COMPANY_STATUS
  #                         document_id: '396c4032-1540-11eb-adc1-0242ac120002'
  #                     beneficiaries:
  #                     - name: 'Guy'
  #                       surname: 'Mauve'
  #                       birth_date: '1978/09/13'
  #                       birth_place: 'Paris'
  #                       id_proof:
  #                         - description: 'ID document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           document_id: '566dbd50-1540-11eb-adc1-0242ac120002'
  #                         - description: 'Additional document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           - TAX_DECLARATION
  #                           - PAYSLIP
  #                           document_id: '605c3b84-1540-11eb-adc1-0242ac120002'
  #                     - name: 'John'
  #                       surname: 'Doe'
  #                       birth_date: '1956/08/24'
  #                       birth_place: 'Chicago'
  #                       id_proof:
  #                         - description: 'ID document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           document_id: '6a4f3cc2-1540-11eb-adc1-0242ac120002'
  #                         - description: 'Additional document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           - TAX_DECLARATION
  #                           - PAYSLIP
  #                           document_id: '70f51bfa-1540-11eb-adc1-0242ac120002'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '81aa1aa4-1540-11eb-adc1-0242ac120002'
  #                 - id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'REGULATED_ENTITY'
  #                     name: 'Insurance Corp'
  #                     supervisory_authority: 'ACPR'
  #                     registration_number: '16829'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '90ee7514-1540-11eb-adc1-0242ac120002'
  #                 - id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'ASSOCIATION'
  #                     name: 'Assoplus'
  #                     address:
  #                       street: '109 association street'
  #                       city: 'Toulouse'
  #                       state: 'Occitanie'
  #                       zipcode: '13100'
  #                       country: 'France'
  #                     registration_number: '150298345'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '9cbfe986-1540-11eb-adc1-0242ac120002'
  #                 _links:
  #                   - self: 'https://pay.oxlin.io/v1/registrations?page=1'
  #                   - first: 'https://pay.oxlin.io/v1/registrations?page=1'
  #                   - last: 'https://pay.oxlin.io/v1/registrations?page=10'
  #                   - next: 'https://pay.oxlin.io/v1/registrations?page=2'
  #                 _page:
  #                   size: '4'
  #                   total_elements: '40'
  #                   total_pages: '10'
  #                   number: '1'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '500':
  #         $ref: '#/components/responses/500'
  #
  # /v1/registrations/{registration_id}:
  #   get:
  #     tags:
  #       - Registrations
  #     summary: |
  #       Get a specific registration.
  #     operationId: getRegistration
  #     description: |
  #       Retrieve a specific 'registrations'  which are the objects used to associate
  #       authorized person with accounts based on its unique identifier.
  #     parameters:
  #       - $ref: '#/components/parameters/X-FWD-Request-ID'
  #       - $ref: '#/components/parameters/BearerAuthorization'
  #       - $ref: '#/components/parameters/RegistrationIdParam'
  #     responses:
  #       '200':
  #         description: |
  #           Requested `registration` definition.
  #         headers:
  #           X-FWD-Request-ID:
  #             $ref: '#/components/headers/X-FWD-Request-ID'
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/RegistrationItem'
  #             examples:
  #               Natural person:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'NATURAL_PERSON'
  #                     name: 'Guy'
  #                     surname: 'Mauve'
  #                     birth_date: '1978/09/13'
  #                     birth_place: 'Paris'
  #                     id_proof:
  #                       - description: 'ID document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - ID
  #                         - PASSPORT
  #                         document_id: 'f78e97dc-153f-11eb-adc1-0242ac120002'
  #                       - description: 'Additional document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - ID
  #                         - PASSPORT
  #                         - TAX_DECLARATION
  #                         - PAYSLIP
  #                         document_id: '04677672-1540-11eb-adc1-0242ac120002'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '1cbed42c-1540-11eb-adc1-0242ac120002'
  #               Company:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'COMPANY'
  #                     name: 'World Company'
  #                     legal_form: 'SARL'
  #                     national_identification: '765456769'
  #                     id_proof:
  #                       - description: 'ID document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - KBIS
  #                         document_id: '2d3fc63a-1540-11eb-adc1-0242ac120002'
  #                       - description: 'Additional document'
  #                         verification_status: 'PENDING'
  #                         supported_types:
  #                         - COMPANY_STATUS
  #                         document_id: '396c4032-1540-11eb-adc1-0242ac120002'
  #                     beneficiaries:
  #                     - name: 'Guy'
  #                       surname: 'Mauve'
  #                       birth_date: '1978/09/13'
  #                       birth_place: 'Paris'
  #                       id_proof:
  #                         - description: 'ID document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           document_id: '566dbd50-1540-11eb-adc1-0242ac120002'
  #                         - description: 'Additional document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           - TAX_DECLARATION
  #                           - PAYSLIP
  #                           document_id: '605c3b84-1540-11eb-adc1-0242ac120002'
  #                     - name: 'John'
  #                       surname: 'Doe'
  #                       birth_date: '1956/08/24'
  #                       birth_place: 'Chicago'
  #                       id_proof:
  #                         - description: 'ID document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           document_id: '6a4f3cc2-1540-11eb-adc1-0242ac120002'
  #                         - description: 'Additional document'
  #                           verification_status: 'PENDING'
  #                           supported_types:
  #                           - ID
  #                           - PASSPORT
  #                           - TAX_DECLARATION
  #                           - PAYSLIP
  #                           document_id: '70f51bfa-1540-11eb-adc1-0242ac120002'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '81aa1aa4-1540-11eb-adc1-0242ac120002'
  #               Regulated entity:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'REGULATED_ENTITY'
  #                     name: 'Insurance Corp'
  #                     supervisory_authority: 'ACPR'
  #                     registration_number: '16829'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '90ee7514-1540-11eb-adc1-0242ac120002'
  #               Association:
  #                 value:
  #                   id: '299e1bf6-a95e-11ea-bb37-0242ac130002'
  #                   creation_date: '2020-01-24T08:42:32+01:00'
  #                   service_level: 'NONE'
  #                   status: 'PENDING'
  #                   person:
  #                     type: 'ASSOCIATION'
  #                     name: 'Assoplus'
  #                     address:
  #                       street: '109 association street'
  #                       city: 'Toulouse'
  #                       state: 'Occitanie'
  #                       zipcode: '13100'
  #                       country: 'France'
  #                     registration_number: '150298345'
  #                   accounts:
  #                   - description: 'The bank cash account'
  #                     identification: 'FR7630003020401010101014267'
  #                     verification_status: 'PENDING'
  #                     supported_types:
  #                     - BANK_STATEMENT
  #                     - BANK_CONNECTION
  #                     document_id: '9cbfe986-1540-11eb-adc1-0242ac120002'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '500':
  #         $ref: '#/components/responses/500'
  #
  #   delete:
  #     tags:
  #       - Registrations
  #     summary: |
  #       Delete a specific registration.
  #     operationId: deleteRegistration
  #     description: |
  #       Delete a specific registration based on its unique identifier.
  #     parameters:
  #       - $ref: '#/components/parameters/X-FWD-Request-ID'
  #       - $ref: '#/components/parameters/BearerAuthorization'
  #       - $ref: '#/components/parameters/RegistrationIdParam'
  #     responses:
  #       '204':
  #         description: |
  #           Registration successfuly deleted.
  #         headers:
  #           X-FWD-Request-ID:
  #             $ref: '#/components/headers/X-FWD-Request-ID'
  #       '400':
  #         $ref: '#/components/responses/400'
  #       '401':
  #         $ref: '#/components/responses/401'
  #       '403':
  #         $ref: '#/components/responses/403'
  #       '404':
  #         $ref: '#/components/responses/404'
  #       '415':
  #         $ref: '#/components/responses/415'
  #       '500':
  #         $ref: '#/components/responses/500'

  /v1/providers:
    get:
      tags:
        - Providers
      summary: |
        Return a list of providers.
      description: |
        Get the list of `providers` that can be used to initiate payments.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/PaymentCapabilitiesParam'
        - $ref: '#/components/parameters/AppToAppSupportParam'
        - $ref: '#/components/parameters/CountryCodeParam'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: A JSON array of `providers`.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                description: |
                  Providers response.
                type: object
                properties:
                  providers:
                    description: |
                      List of providers.
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderItemInternal'
                  _links:
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                    required:
                      - self
                  _page:
                    $ref: '#/components/schemas/Page'
                required:
                  - providers
                  - _links
                  - _page
                example:
                  providers:
                    - bic: 'BICTEST1'
                      name: 'Test Bank 1'
                      country_codes:
                        - 'FR'
                      base_url: 'https://www.testbank1.com'
                      payment_capabilities:
                        - "SINGLE_PAYMENT"
                        - "SINGLE_INSTANT_PAYMENT"
                      logo_url: 'https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png'
                    - bic: 'BICTEST2'
                      name: 'Test Bank 2'
                      country_codes:
                        - 'FR'
                      base_url: 'https://www.testbank2.com'
                      payment_capabilities:
                        - "SINGLE_INSTANT_PAYMENT"
                      logo_url: 'https://static.oxlin.io/common/pictures/providers_logos/BICTEST2.png'
                  _links:
                    - self: 'https://pay.oxlin.io/v1/providers?page=1'
                    - first: 'https://pay.oxlin.io/v1/providers?page=1'
                    - last: 'https://pay.oxlin.io/v1/providers?page=10'
                    - next: 'https://pay.oxlin.io/v1/providers?page=2'
                  _page:
                    size: '2'
                    total_elements: '50'
                    total_pages: '10'
                    number: '1'

        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '500':
          $ref: '#/components/responses/500'

  /v1/providers/search/:
    post:
      tags:
        - Providers
      summary: |
        Returns a list of providers from search criterion.
      description: |
        Returns  `providers` based on search criterion such as
        International Bank Account Number (IBAN). Only 'providers' returned
        with `payment_capabilities` can be used to initiate payments. If
        `payment_capabilities` is undefined,  Oxlin Payments doesn't support
        it as `payer` provider.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      requestBody:
        description: |
          Search criterion for 'providers' search.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ProviderSearchQueryItem'
            examples:
              Supported provider:
                value:
                  payer:
                    - schema: "SEPA"
                      iban: "FR7612345987650123456789014"
              Unsupported provider:
                value:
                  payer:
                    schema: "SEPA"
                    iban: "FR9212345987650123456789056"
      responses:
        '200':
          description: |
            Requested `providers` definitions.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
          content:
            application/json:
              schema:
                description: |
                  Search result.
                type: object
                properties:
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/ProviderSearchResultItem'
                  _links:
                    type: object
                    properties:
                      self:
                        $ref: '#/components/schemas/GenericLink'
                      first:
                        $ref: '#/components/schemas/GenericLink'
                      last:
                        $ref: '#/components/schemas/GenericLink'
                      next:
                        $ref: '#/components/schemas/GenericLink'
                      prev:
                        $ref: '#/components/schemas/GenericLink'
                    required:
                      - self
                  _page:
                    $ref: '#/components/schemas/Page'
                required:
                  - result
                  - _links
                  - _page
              examples:
                Supported provider:
                  value:
                    result:
                      - payer:
                          schema: "SEPA"
                          iban: "FR7612345987650123456789014"
                        providers:
                          - bic: 'BICTEST1'
                            name: 'Test Bank 1'
                            country_codes:
                              - 'FR'
                            base_url: 'https://www.testbank1.com'
                            payment_capabilities:
                              - "SINGLE_PAYMENT"
                              - "SINGLE_INSTANT_PAYMENT"
                            logo_url: 'https://static.oxlin.io/common/pictures/providers_logos/BICTEST1.png'
                    _links:
                      - self: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                      - first: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                      - last: 'https://pay.oxlin.io/v1/reporting/orders?page=10'
                      - next: 'https://pay.oxlin.io/v1/reporting/orders?page=2'
                    _page:
                      size: '1'
                      total_elements: '1'
                      total_pages: '1'
                      number: '1'
                Unsupported provider:
                  value:
                    result:
                      - payer:
                          schema: "SEPA"
                          iban: "FR9212345987650123456789056"
                        providers:
                          - bic: 'AGRIFRPP882'
                            name: 'CRCAM DE PARIS ET D ILE DE FRANCE'
                            country_code:
                              - 'FR'
                            logo_url: 'https://static.oxlin.io/common/pictures/providers_logos/country.png'
                    _links:
                      - self: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                      - first: 'https://pay.oxlin.io/v1/reporting/orders?page=1'
                      - last: 'https://pay.oxlin.io/v1/reporting/orders?page=10'
                      - next: 'https://pay.oxlin.io/v1/reporting/orders?page=2'
                    _page:
                      size: '1'
                      total_elements: '1'
                      total_pages: '1'
                      number: '1'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

  /v1/subscribe:
    post:
      tags:
        - Callback webhooks
      summary: |
        Register webhook callback URL.
      description: |
        Register your system webhook callback URL we will call each time a resource
        will be updated. When registered, callback URL will be called as
        `GET https://your.callback.url?resource_type=YYYYYY&resource_id=XXXXXX`
        with `YYYYYY` the type of updated resource and `XXXXXX` its reference.
        To know changes on the resource, you need to call the resource specific
        method. For instance if the resource is an order, you will call
        `GET v1/running/orders/XXXXXX`in order to get the updated object and
        manage actions on your system accordingly.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
      requestBody:
        description: |
          Definition of webhook callback to register.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                callback_url:
                  $ref: '#/components/schemas/CallbackURL'
              required:
                - callback_url
              example:
                callback_url: 'https://domain/callback'
      callbacks:
        order_updated:
          '{$request.body#/callback_url}':
            get:
              summary: |
                URL called on your system each time a resource such as an
                `order` will be updated.
              description: |
                Each time we will update a resource we will call your registered
                `callback_url` with parameters to identify
                updated resource and no content. With that reference, you
                have to retrieve resource to get more details about updates.
                Webhook calls are acknowledged when a response is given with
                a 2XX status code. If a call times out or the status code is not 2XX,
                we will try to notify you again using an exponential backoff policy
                with jitter that will increase the resend interval for each failure.
                The first attemps occurs after 10 seconds and the delay can increase
                up to 6 hours. After 3 days of failure on calling your webhook,
                notifications attemps will stop.
              parameters:
                - $ref: '#/components/parameters/ResourceTypeParam'
                - $ref: '#/components/parameters/ResourceIdParam'
              responses:
                '200':
                  description: |
                    As a response, when we call your server, you need to return an HTTP 2xx
                    result code with no content. Based on that answer, we will consider
                    the notification successfull. If not, we will retry to invoke
                    your server during a limited period.
      responses:
        '201':
          description: |
            Webhook callback successfully registered.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '415':
          $ref: '#/components/responses/415'
        '500':
          $ref: '#/components/responses/500'

  /v1/unsubscribe:
    post:
      tags:
        - Callback webhooks
      summary: |
        Unregister the webhook callback URL.
      description: |
        Unregister your system webhook callback URL that will be not called anymore.
      parameters:
        - $ref: '#/components/parameters/X-FWD-Request-ID'
        - $ref: '#/components/parameters/BearerAuthorization'
      responses:
        '204':
          description: |
            No Content.
          headers:
            X-FWD-Request-ID:
              $ref: '#/components/headers/X-FWD-Request-ID'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '405':
          $ref: '#/components/responses/405'
        '500':
          $ref: '#/components/responses/500'

#####################################################
# Predefined Components
#####################################################
components:

  #####################################################
  # Predefined Security Schemes
  #####################################################
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: /token
          refreshUrl: /token
          scopes: {}

  #####################################################
  # Predefined Schemas
  #####################################################
  schemas:
    TokenItem:
      description: |
        Describe the authorisation token.
      type: object
      properties:
        access_token:
          description: |
            Access token to use as authorisation bearer.
          type: string
        scope:
          description: |
            Access token scope.
          type: string
        token_type:
          description: |
            Define access token type:
            - `Bearer`: Client credential bearer.
          type: string
          enum:
            - Bearer
        expires_in:
          description: |
            Token will expires after the number of seconds defined by the field.
          type: integer
      required:
        - access_token
        - scope
        - token_type
        - expires_in
      example:
        access_token: 'eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJjYjYwY2E3Y2Q2NjNmMTMxOTdiZiIsImlzcyI6Imh0dHBzOi8vc2FuZGJveC1hdXRoLm94bGluLmlvIiwic3ViIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiYXVkIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiZXhwIjoxNTk0MjIxMjQ5LCJpYXQiOjE1OTQyMTc2NDksInNjb3BlIjoidXNlcnNfY3JlYXRlIHByb2ZpbGUgb3BlbmlkIn0.CzwmfvHa46M0RHHtYqlNFBSovbrKOv8ezZM5sroJzyUU0aPHHW2aoFO6zwx5vMW1Sox7MqD-Jhs7R7pff_-qr1DBDsxvvCO-DQZw7SjW5DmDjQVyaQlpUiwASOYJyZIyd3K71kROkU6TeL9i2OR7yLDtpj_56fTZWxg9Y1vGv-bUoPhXx2JgzvqyrzfDoadJ6s7_dOxoQFpsYM5lqIWVuWx82uXWL6cWB4usynKJcGe6k6EGLxwzJ0OqmBd1WnPSvywMqzMI5QCTZ7DkFJw2AGnPy-C8keZBL2BwJIzgiaH6j_80P8NdisxxcQlRHz7VTrvwF1rqxgT2adU8Jtt_RCKlvZ44jxCN7fDk28sot2LEAMC1VC3A0BWrhY6EX84hUW_ZJIFJG6753xCDzZ9bZcYVjC5yW0DCcT8CP3xXeOkIAdo6ZpfbMgntpNGk0ZPyiTUhCwr9s17t5DuDyCCwJ5O4eZhHqYRhRspExvuFtbldIsCYDARvBZe-EQ3jjkuFnCHmd-whZ5qcd6sEiRferthzC05NfufFitGoVLYrBYSHeaUE8mNeSgAeadoBrBxDTjOq_B2NdoiGo3UbVD2oi7As7WfohF8SSNXHqRJId3vcQBx4yxzilU2QfoFnfhJtbDcR2xElg36rJGLWLZQLpd7qQkuw_ADPddsJVxSqND4'
        token_type: 'Bearer'
        expires_in: '3600'

    TokenCreate:
      description: |
        Token creation characteristics.
      type: object
      properties:
        grant_type:
          description: |
            Describe type of requested grant:
              - `client_credentials`: client credential grant type is the only supported value.
          type: string
          enum:
            - client_credentials

    ProviderItemCommon:
      description: |
        A provider represent a bank.
      type: object
      properties:
        bic:
          $ref: '#/components/schemas/PayerBic'
        name:
          description: |
            Name of the provider.
          type: string
          example: 'Provider name'
        branch_name:
          type: string
          description: |
            Name of the provider branch (regional bank of a national group for
            instance).
        country_codes:
          type: array
          items:
            $ref: '#/components/schemas/CountryCode'
        logo_url:
          type: string
          description: |
            The logo URL for the provider.
      required:
        - bic
        - name
        - country_codes
        - logo_url

    ProviderItemInternal:
      description: |
        A provider we can initiate a payment from.
      type: object
      properties:
        allof:
          $ref: '#/components/schemas/ProviderItemCommon'
        payment_capabilities:
          description: |
            List of supported capabilities.
          type: array
          items:
            $ref: '#/components/schemas/PaymentCapability'
        app_to_app_support:
          description: |
            List of operating systems supporting App to App authentication flow.
          type: array
          items:
            $ref: '#/components/schemas/AppToAppSupport'
        base_url:
          description: |
            Base URL of the provider, will be mandatory returned for any
            supported providers.
          type: string
          format: url
          example: https://www.provider.com
        max_start_date_delay:
          description: |
            Maximal delay in days from `now` supported on parameter `start_date`.
          type: number
      required:
        - payment_capabilities

    ProviderItemInternalOrExternal:
      description: |
        A provider we can initiate a payment from when 'payment_capabilities'
        is returned or were we can't initiate a payment from in other cases.
      type: object
      properties:
        allof:
          $ref: '#/components/schemas/ProviderItemCommon'
        payment_capabilities:
          description: |
            List of supported capabilities.
          type: array
          items:
            $ref: '#/components/schemas/PaymentCapability'
        app_to_app_support:
          description: |
            List of operating systems supporting App to App authentication flow.
          type: array
          items:
            $ref: '#/components/schemas/AppToAppSupport'
        base_url:
          description: |
            Base URL of the provider, only returned for supported providers.
          type: string
          format: url
          example: https://www.provider.com
        max_start_date_delay:
          description: |
            Maximal delay in days from `now` supported on parameter `start_date`.
          type: number

    ProviderSearchQueryItem:
      description: |
        Description of the search criterion to look for 'providers'.
      type: object
      properties:
        payer:
          $ref: '#/components/schemas/Payer'

    ProviderSearchResultItem:
      description: |
        Description of the search criterion to look for 'providers'.
      type: object
      properties:
        payer:
          $ref: '#/components/schemas/Payer'
        providers:
          description: |
            List of 'providers'.
          type: array
          items:
            $ref: '#/components/schemas/ProviderItemInternalOrExternal'

    OrderItem:
      description: |
        An order represent one or more payments, today or in the future, to a
        unique beneficiary or multiples beneficiaries. An order is associated
        to a unique payment initiation, as a consequence it is associated to
        a unique authentication from the PSU bank.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/OrderId'
        user_reference:
          $ref: '#/components/schemas/UserReference'
        bic:
          $ref: '#/components/schemas/PayerBic'
        instant_payment:
          $ref: '#/components/schemas/InstantPaymentType'
        sensitive_data:
          $ref: '#/components/schemas/SensitiveData'
        email:
          $ref: '#/components/schemas/PayerEMail'
        start_date:
          $ref: "#/components/schemas/StartDate"
        start_date_processing_direction:
          $ref: "#/components/schemas/DateUpdateDirection"
        frequency:
          $ref: '#/components/schemas/Frequency'
        end_date:
          $ref: "#/components/schemas/EndDate"
        order_status:
          $ref: '#/components/schemas/OrderStatus'
        payer:
          $ref: '#/components/schemas/Payer'
        creation_date:
          $ref: '#/components/schemas/CreationDate'
        auth_url:
          $ref: '#/components/schemas/AuthURL'
        redirect_url:
          $ref: '#/components/schemas/RedirectURL'
        selected_capability:
          $ref: '#/components/schemas/PaymentCapability'
        instructions:
          description: |
            List of order instructed payments.
          type: array
          items:
            $ref: '#/components/schemas/InstructionItem'
        history:
          description: |
            Describe the history of the order with an entry per order status change. No
            information returned when order have no history.
          type: array
          items:
            $ref: '#/components/schemas/OrderHistoryItem'

      required:
        - id
        - order_status
        - payments
        - redirect_url
      example:
        id: '987123'
        bic: 'AXABFRPP'
        order_status: 'AUTHORIZED'
        payer:
          schema: 'SEPA'
          iban: 'FR7612345987650123456789014'
        creation_date: '2020-01-24T08:42:32+01:00'
        redirect_url: 'https://domain/context/resource'
        start_date: '2020-01-24T08:46:34+01:00'
        instructions:
          - amount: '123.45'
            currency: 'EUR'
            beneficiary:
              schema: 'SEPA'
              iban: 'FR7612345987650123456789014'
              name: 'Jean Dupond'
            label: 'Payment from John Dupont to Jean Dupond'
            payments:
              - payment_status: 'SUBMITTED'
                amount: '123.45'
                currency: 'EUR'
                execution_date: '2020-01-28T00:00:00+01:00'
                creation_date: '2020-01-27T12:23:12+01:00'

    MultiplesInstructionsOrder:
      description: |
        An order represent one or more payments, today or in the future, to a
        unique beneficiary or multiples beneficiaries. An order is associated
        to a unique payment initiation, as a consequence it is associated to
        a unique authentication from the PSU bank.
      type: object
      properties:
        user_reference:
          $ref: '#/components/schemas/UserReference'
        bic:
          $ref: '#/components/schemas/InputPayerBic'
        instant_payment:
          $ref: '#/components/schemas/InstantPaymentType'
        sensitive_data:
          $ref: '#/components/schemas/SensitiveData'
        email:
          $ref: '#/components/schemas/PayerEMail'
        start_date:
          $ref: "#/components/schemas/StartDate"
        start_date_processing_direction:
          $ref: "#/components/schemas/DateUpdateDirection"
        frequency:
          $ref: '#/components/schemas/Frequency'
        end_date:
          $ref: "#/components/schemas/EndDate"
        payer:
          $ref: '#/components/schemas/Payer'
        redirect_url:
          $ref: '#/components/schemas/RedirectURL'
        instructions:
          type: array
          items:
            $ref: '#/components/schemas/InstructionItemCreate'
      required:
        - instructions
        - redirect_url

    SingleInstructionOrder:
      description: |
        An order represent one or more payments, today or in the future, to a
        unique beneficiary or multiples beneficiaries. An order is associated
        to a unique payment initiation, as a consequence it is associated to
        a unique authentication from the PSU bank.
      type: object
      properties:
        user_reference:
          $ref: '#/components/schemas/UserReference'
        bic:
          $ref: '#/components/schemas/InputPayerBic'
        instant_payment:
          $ref: '#/components/schemas/InstantPaymentType'
        sensitive_data:
          $ref: '#/components/schemas/SensitiveData'
        email:
          $ref: '#/components/schemas/PayerEMail'
        start_date:
          $ref: "#/components/schemas/StartDate"
        start_date_processing_direction:
          $ref: "#/components/schemas/DateUpdateDirection"
        frequency:
          $ref: '#/components/schemas/Frequency'
        end_date:
          $ref: "#/components/schemas/EndDate"
        payer:
          $ref: '#/components/schemas/Payer'
        redirect_url:
          $ref: '#/components/schemas/RedirectURL'
        allof:
          $ref: '#/components/schemas/InstructionItemCreate'
      required:
        - redirect_url

    OrderItemUpdate:
      description: |
        An order represent one or more payments, today or in the future, to a
        unique beneficiary or multiples beneficiaries. An order is associated
        to a unique payment initiation, as a consequence it is associated to
        a unique authentication from the PSU bank.
      type: object
      properties:
        order_status:
          $ref: '#/components/schemas/OrderStatus'
        bic:
          $ref: '#/components/schemas/PayerBic'
        email:
          $ref: '#/components/schemas/PayerEMail'
        payer:
          $ref: '#/components/schemas/Payer'
        selected_capability:
          $ref: '#/components/schemas/PaymentCapability'

    InstructionItem:
      description: |
        Represent a single or standing order payment instruction. Resulting
        instructed payment transmited to payer bank will be represented through
        `payments` content.
      type: object
      properties:
        amount:
          $ref: "#/components/schemas/AmountValue"
        currency:
          $ref: "#/components/schemas/CurrencyCode"
        beneficiary:
          $ref: '#/components/schemas/Beneficiary'
        label:
          $ref: '#/components/schemas/Label'
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentItem'
      required:
        - amount
        - currency
        - beneficiary
        - label
      example:
        amount: '123.45'
        currency: 'EUR'
        start_date: '2020-01-24T08:46:34+01:00'
        beneficiary:
          schema: 'SEPA'
          iban: 'FR7612345987650123456789014'
          name: 'Jean Dupond'
        label: 'Payment from John Dupont to Jean Dupond'
        payments:
          - payment_status: 'SUBMITTED'
            amount: '123.45'
            currency: 'EUR'
            execution_date: '2020-01-28T00:00:00+01:00'
            creation_date: '2020-01-27T12:23:12+01:00'

    InstructionItemCreate:
      description: |
        Represent a single or standing order payment instruction. Resulting
        instructed payment transmited to payer bank will be represented through
        `payments` content.
      type: object
      properties:
        amount:
          $ref: "#/components/schemas/AmountValue"
        currency:
          $ref: "#/components/schemas/CurrencyCode"
        beneficiary:
          $ref: '#/components/schemas/Beneficiary'
        label:
          $ref: '#/components/schemas/Label'
      required:
        - amount
        - currency
        - beneficiary
        - label

    PaymentItem:
      description: |
        A payment represent a money transfer from a payer account to a
        beneficiary account. Payment is created when instruction was
        transmitted to the payer bank.
      type: object
      properties:
        status:
          $ref: '#/components/schemas/PaymentStatus'
        amount:
          $ref: "#/components/schemas/AmountValue"
        currency:
          $ref: "#/components/schemas/CurrencyCode"
        execution_date:
          description: |
            Payment instruction date shared with payer bank.
          type: string
          format: date-time
          example: '2020-01-28T00:00:00+01:00'
        creation_date:
          $ref: '#/components/schemas/CreationDate'
      required:
        - status
        - amount
        - currency
        - execution_date
        - creation_date
      example:
        payment_status: 'SUBMITTED'
        amount: '123.45'
        currency: 'EUR'
        execution_date: '2020-01-28T00:00:00+01:00'
        creation_date: '2020-01-27T12:23:12+01:00'

    AliasItemCreate:
      description: |
        An alias represent a stored account identification.
      type: object
      properties:
        user_reference:
          $ref: '#/components/schemas/UserReference'
        label:
          description: |
            Name identifying the account.
          type: string
          pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
        account:
          $ref: '#/components/schemas/AliasAccount'
        bic:
          $ref: '#/components/schemas/PayerBic'
      required:
        - user_reference
        - account

    AliasItemUpdate:
      description: |
        An alias represent a stored account identification.
      type: object
      properties:
        label:
          description: |
            New name identifying the account.
          type: string
          pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
      required:
        - label

    AliasItem:
      description: |
        An alias represent a stored account identification.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/AliasId'
        user_reference:
          $ref: '#/components/schemas/UserReference'
        label:
          description: |
            Name identifying the account.
          type: string
          pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
        account:
          $ref: '#/components/schemas/AliasAccount'
        bic:
          $ref: '#/components/schemas/PayerBic'
      required:
        - id
        - user_reference
        - label
        - account

    OrderHistoryItem:
      description: |
        Order status change event.
      type: object
      properties:
        order_status:
          $ref: '#/components/schemas/OrderStatus'
        change_date:
          $ref: '#/components/schemas/ChangeDate'
      required:
        - order_status
        - change_date

    OrderId:
      description: |
        Universally Unique IDentifier for `Order`.
      type: string
      maxLength: 36
      example: '53fd4a76-a95d-11ea-bb37-0242ac130002'

    AliasId:
      description: |
        Universally Unique IDentifier for `Alias`.
      type: string
      maxLength: 36
      example: 'c4311507-13a3-407c-82c8-b965a0967f5c'

    ResourceId:
      description: |
        Universally Unique IDentifier for a resource.
      type: string
      maxLength: 36
      example: 'c1a4866a-1362-11eb-adc1-0242ac120002'

    ResourceType:
      description: |
        Define payment schema:
        - `ORDERS`: Order.
      type: string
      enum:
        - ORDERS
      example: 'ORDERS'

    InputPayerBic:
      description: |
        Payer bank identifier code allocated to a financial institution by the ISO 9362 Registration
        Authority as described in ISO 9362 "Banking - Banking telecommunication
        messages - Business identification code (BIC)". If no value is transmited, if transmited
        value is invalid or referenced bank not supported, order creation will fail.
      type: string
      pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      example: 'AXABFRPP'

    PayerBic:
      description: |
        Bank identifier code allocated to a financial institution by the ISO 9362 Registration
        Authority as described in ISO 9362 "Banking - Banking telecommunication
        messages - Business identification code (BIC)".
      type: string
      pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      example: 'AXABFRPP'

    BeneficiaryBic:
      deprecated: true
      description: |
        Field not used anymore. Will be removed in a future version.
        Beneficiary bank identifier code allocated to a financial institution by the ISO 9362
        Registration Authority as described in ISO 9362 "Banking - Banking telecommunication
        messages - Business identification code (BIC)". Value is required or not depending on
        the payment context.
      type: string
      pattern: '^[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}$'
      example: 'AXABFRPP'

    PayerEMail:
      description: |
        Payer email used to send payment notifications.
        > A valid email is required when using Oxlin agreement. Because parameter
        > is not mandatory, in such case user will be asked to type his email
        > during payment flow.
      type: string
      format: email
      example: 'payer@email.com'

    StartDate:
      description: |
        For single or multiples payments, instruction date, for a standing order,
        start date:
        - now if undefined,
        - will be requalified to now if the payer bank doesn't support instruction date,
        - will be changed to the oldest possible date supported by payer bank if transmited
        date exceed maximum bank value.
        As a consequence, when using that field you have to check how it have be updated or not after
        payment was authorized.
        ISO 8601 extended format is used.
      type: string
      format: date-time

    EndDate:
      description: |
        End date for standing order, infinite if undefined. ISO 8601 extended
        format is used.
      type: string
      format: date-time

    CreationDate:
      description: |
        Object creation date and time. ISO 8601 format is used.
      type: string
      format: date-time
      example: '2019-12-12T13:34:45+01:00'

    ChangeDate:
      description: |
        Object change date and time. ISO 8601 format is used.
      type: string
      format: date-time
      example: '2019-12-12T13:34:45+01:00'

    Label:
      description: |
        Text transmitted to beneficiary bank.
      type: string
      pattern: '^[a-zA-Z0-9\- ?:().,+]{1,50}$'
      example: 'Payment initiation label'

    AliasAccount:
      oneOf:
        - $ref: '#/components/schemas/SEPAPayerAccountItem'
        - $ref: '#/components/schemas/FPSAccountItem'
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPAPayerAccountItem'
          FPS : '#/components/schemas/FPSAccountItem'

    Payer:
      oneOf:
        - $ref: '#/components/schemas/SEPAPayerAccountItem'
        - $ref: '#/components/schemas/FPSAccountItem'
        - $ref: '#/components/schemas/AliasReferenceItem'
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPAPayerAccountItem'
          FPS : '#/components/schemas/FPSAccountItem'
          ALIAS: '#/components/schemas/AliasReferenceItem'

    Beneficiary:
      description: Beneficiary account for instructed payments.
      oneOf:
        - $ref: '#/components/schemas/SEPABeneficiaryAccountItem'
        - $ref: '#/components/schemas/FPSAccountItem'
        - $ref: '#/components/schemas/AliasReferenceItem'
      discriminator:
        propertyName: schema
        mapping:
          SEPA: '#/components/schemas/SEPABeneficiaryAccountItem'
          FPS : '#/components/schemas/FPSAccountItem'
          ALIAS: '#/components/schemas/AliasReferenceItem'

    AccountItem:
      description: |
        Common structure fo all accounts identification item.
      type: object
      properties:
        schema:
          $ref: '#/components/schemas/PaymentSchema'
      discriminator:
        propertyName: schema
      required:
        - schema

    FPSAccountItem:
      description: |
        Represent a Faster Payment payer or beneficiary account.
      allOf: # Combines the main `AccountItem` schema with `FPS` specific properties
        - $ref: '#/components/schemas/AccountItem'
        - type: object
          properties:
            name:
              description: |
                Name of account holder.
              type: string
            sort_code:
              description: |
                Sort code of payer account: six digits only, no whitespace or punctuation
              type: string
            account_number:
              description: |
                Number of account: eight digits only, no whitespace or punctuation
              type: string
          required:
            - name
            - sort_code
            - account_number
          example:
            name: 'John Dupont'
            sort_code: '102030'
            account_number: '88881234'

    SEPAPayerAccountItem:
      description: |
        Represent a SEPA payer account.
      allOf: # Combines the main `AccountItem` schema with `SEPA` specific properties
        - $ref: '#/components/schemas/AccountItem'
        - type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBANPayer'
          required:
            - iban
          example:
            iban: 'FR7612345987650123456789014'

    SEPABeneficiaryAccountItem:
      description: |
        Represent a SEPA beneficiary account.
      allOf: # Combines the main `AccountItem` schema with `SEPA` specific properties
        - $ref: '#/components/schemas/AccountItem'
        - type: object
          properties:
            iban:
              $ref: '#/components/schemas/IBANBeneficiary'
            name:
              description: |
                Name identifing beneficiary.
              type: string
              pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
            complementary_name:
              description: |
                Free beneficiary complementary name you can use to enrich beneficiary name.
                That value will be displayed in addition to the name but won't be transmitted to the payer bank.
              type: string
              pattern: '^[a-zA-Z0-9 ,-]{1,140}$'
            bic:
              $ref: '#/components/schemas/BeneficiaryBic'
          required:
            - iban
            - name
          example:
            iban: 'FR7612345987650123456789014'
            name: 'Jean Dupond'

    AliasReferenceItem:
      description: |
        Reference an account alias.
      allOf: # Combines the main `AccountItem` schema with `SEPA` specific properties
        - $ref: '#/components/schemas/AccountItem'
        - type: object
          properties:
            alias_id:
              $ref: '#/components/schemas/AliasId'
          required:
            - alias_id

    IBANBeneficiary:
      description: |
        International Bank Account Number (IBAN) - identification used
        internationally by financial institutions to uniquely identify the
        account of a customer.

        > For payment using `Sandbox Mode`, you have to use
        > `FR8530003000307599775722N09` as `beneficiary.iban` and any value
        > as `beneficiary.name`. When bank will be chosen, bank emulation page
        > will give you following choices:
        > - `SUBMITTED` will emulate a payment authorised but not yet executed by the bank.
        > - `REJECTED` will emulate a payment refused by the bank.
        > - `EXECUTED` will emulate a payment immediately executed by the bank.
        > - `SUBMITTED and EXECUTED (with delay)` will emulate a real payment flow
        > where the bank authorise it in a first time and execute it with a
        > 2 minutes delay in a second time.

        > Using Oxlin agreements, only declared beneficiaries or payer IABN can
        > be used depending on the contract you've suscribed. If your beneficiary
        > is rejected, check if you've declared it when opening your Oxlin Payments
        > contract. Contact Oxlin support otherwise.
      type: string
      pattern: '^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$'
      example: 'FR7612345987650123456789014'

    IBANPayer:
      description: |
        International Bank Account Number (IBAN) - identification used
        internationally by financial institutions to uniquely identify the
        account of a customer.

        > Using Oxlin agreements, only declared beneficiaries or payer IBAN can
        > be used depending on the contract you've suscribed. If your payer
        > is rejected, check if you've declared when opening your Oxlin Payments
        > contract. Contact Oxlin support otherwise.
      type: string
      pattern: '^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$'
      example: 'FR7612345987650123456789014'

    PaymentSchema:
      description: |
        Define payment schema:
        - `SEPA`: SEPA payment.
        - `FPS`: Faster Payment, UK instant payment schema.
        - `ALIAS`: An alias representing registered account .

        > `ALIAS` value is only available in a context you can use an `ALIAS`,
        > as a consequence  it can't be valid when defining an `ALIAS`.
      type: string
      enum:
        - SEPA
        - FPS
        - ALIAS
      example: 'SEPA'

    PaymentCapability:
      description: |
        Describe type of payment.
          - `SINGLE_PAYMENT`: Single unique payment.
          - `SINGLE_INSTANT_PAYMENT`: Single immediate payment.
          - `STANDING_ORDERS`: Standing orders is a recurring payment with an immutable
          recurring amount.
          - `BATCH_PAYMENTS`: Batch payment is a payment from a unique payer to multiple
          beneficiaries.
      type: string
      enum:
        - SINGLE_PAYMENT
        - SINGLE_INSTANT_PAYMENT
        - STANDING_ORDERS
        - BATCH_PAYMENTS

    AppToAppSupport:
      description: |
        Operating system type supporting application to application authentication flow.
          - `ANDROID`: App to App flow is supported on Android devices.
          - `IOS`: App to App flow is supported on iOS devices.
      type: string
      enum:
        - ANDROID
        - IOS

    CountryCode:
      description: |
        Bank supported market ISO-3166 Alpha-2 country code.
      type: string

    InstantPaymentType:
      description: |
        Define expectation according instant payment:
        - `EXPECTED`: only instant payment can be offered to initialize a payment.
        - `USER_CHOICE`: debtor user can choose in the case the bank support instant payment.
        - `NO`: only non instant payment can be offered to initialize a payment.
      type: string
      enum:
        - EXPECTED
        - USER_CHOICE
        - NO
      default: NO
      example: 'EXPECTED'

    SensitiveData:
      description: |
        Define if Oxlin Payments API return sensitive data:
        - `ALL`: all available data are returned with customer agreement.
        - `NONE`: no sensitive data are returned, payer and beneficiary IBAN are masked.
      type: string
      enum:
        - ALL
        - NONE
      default: ALL
      example: 'ALL'

    OrderStatus:
      description: |
        Define order status:
        - `NEW`: Initial state, order initialized, PSU consent not done.
        - `AUTHORIZED`: Intermediary state, PSU consent was granted, payment is being processed: at least one payment is not in a final state.
        - `FAILED`: Final state, order initialisation failed.
        - `REJECTED`: Final state, PSU consent was refused, no payment will be processed.
        - `CLOSED`: Final state, PSU consent was grant, all payments were processed.
        - `EXPIRED`: Final state, an `order` in status `NEW` expires automaticaly after 30 days.
      type: string
      enum:
        - NEW
        - AUTHORIZED
        - FAILED
        - REJECTED
        - CLOSED
        - EXPIRED
      example: 'AUTHORIZED'

    PaymentStatus:
      description: |
        Define instructed payment status:
        - `SUBMITTED`: Intermediary state, payment was transmitted to the bank
        but not yet executed.
        - `EXECUTED`: Final state, payment was executed.
        - `CANCELLED`: Final state, payment was cancelled.
        - `REJECTED`: Final state, payment was rejected.
      type: string
      enum:
        - SUBMITTED
        - EXECUTED
        - CANCELLED
        - REJECTED
      example: 'SUBMITTED'

    Frequency:
      description: |
        Standing orders frequency:
        - `DAILY`: Daily.
        - `WEEKLY`: Weekly.
        - `EVERY_TWO_WEEKS`: Every two weeks.
        - `MONTHLY`: Monthly.
        - `EVERY_TWO_MONTHS`: Every two months.
        - `QUARTERLY`: Quarterly.
        - `SEMI_ANNUAL`: Semi annual.
        - `YEAR`: Annual.
      type: string
      enum:
        - DAILY
        - WEEKLY
        - EVERY_TWO_WEEKS
        - MOUNTHLY
        - EVERY_TWO_MONTHS
        - QUATERLY
        - SEMI_ANNUAL
        - YEAR
      example: 'DAILY'

    DateUpdateDirection:
      description: |
        Define how to update the date when the bank limit it for instance refusing
        a Target 2 calendar date :
        - `NONE`: don’t update the date (reject the date if it is not supported by the bank).
        - `BOTH`: find a new date before or after the given date (keep closest).
      type: string
      enum:
        - NONE
        - BOTH
      default: BOTH
      example: 'NONE'

    CurrencyCode:
      description: |
        Specifies the currency of the amount.

        A code allocated to a currency by a Maintenance Agency under
        an international identification scheme, as described in the
        latest edition of the international standard ISO 4217 "Codes
        for the representation of currencies and funds".
      type: string
      pattern: '^[A-Z]{3,3}$'
      example: 'EUR'

    AmountValue:
      description: |
        The amount given with fractional digits, where fractions must be
        compliant to the currency definition. Up to 14 significant figures.
        Negative amounts are signed by minus. The decimal separator is a dot.

        Valid representations for amount with up to two decimals are:
          - 1056
          - 5768.2
          - -1.50
          - 5877.78
      type: string
      pattern: '^-?[0-9]{1,14}(\.[0-9]{1,3})?$'
      example: '5877.78'

    RedirectURL:
      description: |
        The URL where the user should be redirected after authorising the
        payment. We will append the order_id parameter to the URL when
        redirecting the user to: `GET https://your.redirect.url?order_id=XXXXXX`
        with `XXXXXX` the reference of the concerned `order`. To know status
        of the order, to get the up to date object and manage actions on your
        system you need to either call:
        - `GET /v1/running/orders/XXXXXX`: during the realtime
        authentication flow with the payer when you need to take a live
        decision. That method will work during a limited time after
        authentication was done.
        - `GET /v1/reporting/orders/XXXXXX`: in all other cases when status
        information have no impact on realtime decision.

        Note the URL is not limited to `http` or `https` scheme name. If requested,
        you can use any scheme name such as a mobile application specific scheme name.
      allOf:
      - $ref: '#/components/schemas/URL'

    AuthURL:
      description: |
        The URL your user have to open in order to realize authorisation for
        the order. Refer to `GET /authorize/{order_id}` for details about how to
        to override language or personalise screens.
      allOf:
      - $ref: '#/components/schemas/URL'

    CallbackURL:
      description: |
        The URL called to notify your system.
      allOf:
      - $ref: '#/components/schemas/URL'

    GenericLink:
      description: |
        Hypertext reference.
      type: object
      properties:
        href:
          allOf:
          - $ref: '#/components/schemas/URL'
      required:
        - href
      example:
        - href: 'https://domain/context/resource'

    UserReference:
      description: |
        Unique user reference.
      type: string
      maxLength: 36
      example: 'User567498s'

    URL:
      type: string
      maxLength: 512

  #####################################################
  # Registration
  #####################################################

    RegistrationItemCreate:
      description: |
        A registration represent a natural or legal person we want to declare
        in the system. We can associate documents, accounts... to the registration
        in order to realize legal verification depending on the use case.
      type: object
      properties:
        person:
          $ref: '#/components/schemas/Person'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      required:
        - person
        - accounts

    RegistrationItemUpdate:
      description: |
        A registration represent a natural or legal person we want to declare
        in the system. We can associate documents, accounts... to the registration
        in order to realize legal verification depending on the use case.
      type: object
      properties:
        person:
          $ref: '#/components/schemas/Person'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'

    RegistrationItem:
      description: |
        A registration represent a natural or legal person we want to declare
        in the system. We can associate documents, accounts... to the registration
        in order to realize legal verification depending on the use case.
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RegistrationId'
        creation_date:
          $ref: '#/components/schemas/CreationDate'
        service_level:
          $ref: '#/components/schemas/ServiceLevel'
        status:
          $ref: '#/components/schemas/VerificationStatus'
        person:
          $ref: '#/components/schemas/Person'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
      required:
        - id
        - service_level
        - status
        - person
        - accounts

    Person:
      description: Beneficiary account for instructed payments.
      oneOf:
        - $ref: '#/components/schemas/NaturalPerson'
        - $ref: '#/components/schemas/Company'
        - $ref: '#/components/schemas/RegulatedEntity'
        - $ref: '#/components/schemas/Association'
      discriminator:
        propertyName: type
        mapping:
          NATURAL_PERSON: '#/components/schemas/NaturalPerson'
          COMPANY : '#/components/schemas/Company'
          REGULATED_ENTITY: '#/components/schemas/RegulatedEntity'
          ASSOCIATION : '#/components/schemas/Association'

    LocationItem:
      description: |
        Locate the URL .
      type: object
      properties:
        location:
          $ref: '#/components/schemas/Location'
      required:
        - location


    NaturalPerson:
      description: |
        describe a natural person.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PersonType'
        name:
          $ref: '#/components/schemas/NaturalPersonName'
        surname:
          $ref: '#/components/schemas/NaturalPersonSurname'
        birth_date:
          $ref: '#/components/schemas/NaturalPersonBirthDate'
        birth_place:
          $ref: '#/components/schemas/NaturalPersonBirthPlace'
        id_proof:
          type: array
          items:
            $ref: '#/components/schemas/IdProof'
      required:
        - type
        - name
        - surname
        - birth_date
        - birth_place

    Company:
      description: |
        Describe a company.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PersonType'
        name:
          $ref: '#/components/schemas/CompanyName'
        legal_form:
          $ref: '#/components/schemas/CompanyLegalForm'
        national_identification:
          $ref: '#/components/schemas/CompanyNationalIdentification'
        id_proof:
          type: array
          items:
            $ref: '#/components/schemas/IdProof'
        beneficiaries:
          type: array
          items:
            $ref: '#/components/schemas/NaturalPerson'
      required:
        - type
        - name
        - legal_form
        - national_identification
        - beneficiaries

    RegulatedEntity:
      description: |
        Describe a regulated entity.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PersonType'
        name:
          $ref: '#/components/schemas/RegulatedEntityName'
        supervisory_authority:
          $ref: '#/components/schemas/RegulatedEntitySupervisoryAuthority'
        registration_number:
          $ref: '#/components/schemas/RegulatedEntityRegistrationNumber'
        id_proof:
          type: array
          items:
            $ref: '#/components/schemas/IdProof'
      required:
        - type
        - name
        - supervisory_authority
        - registration_number

    Association:
      description: |
        Describe an association.
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PersonType'
        name:
          $ref: '#/components/schemas/AssociationName'
        address:
          $ref: '#/components/schemas/PostalAddress'
        registration_number:
          $ref: '#/components/schemas/AssociationRegistrationNumber'
        id_proof:
          type: array
          items:
            $ref: '#/components/schemas/IdProof'
      required:
        - type
        - name
        - address
        - registration_number

    RegistrationId:
      description: |
        Universally Unique IDentifier for `Registers`.
      type: string
      maxLength: 36
      example: '7e3a5bda-143d-11eb-adc1-0242ac120002'

    PersonType:
      description: |
        Registration person type:
        - `NATURAL_PERSON`: A natural person.
        - `COMPANY`: A company.
        - `REGULATED_ENTITY`: A regulated entity.
        - `ASSOCIATION`: An association.
      type: string
      enum:
        - NATURAL_PERSON
        - COMPANY
        - REGULATED_ENTITY
        - ASSOCIATION
      example: 'NATURAL_PERSON'

    NaturalPersonName:
      description: |
        Name of person.
      type: string
      example: 'Guy'

    NaturalPersonSurname:
      description: |
        Surname of person.
      type: string
      example: 'Mauve'

    NaturalPersonBirthDate:
      description: |
        Person birth date.
      type: string
      format: date
      example: '1978-09-13'

    NaturalPersonBirthPlace:
      description: |
        Place of birth of person.
      type: string
      example: 'Paris'

    CompanyName:
      description: |
        Name of the company.
      type: string
      example: 'World Corp'

    CompanyLegalForm:
      description: |
        Registration person type:
        - `SA`: SA.
        - `SARL`: SARL.
        - `EURL`: EURL.
        - `SAS`: SAS.
        - `SASU`: SASU.
        - `SCP`: SCP.
        - `SELARL`: SELARL.
        - `SNC`: SNC.
      type: string
      enum:
        - SA
        - SARL
        - EURL
        - SAS
        - SASU
        - SCP
        - SELARL
        - SNC
      example: 'SARL'

    CompanyNationalIdentification:
      description: |
        National identifier for the company emited by the host country (SIREN in France).
      type: string
      example: '439826121'

    RegulatedEntityName:
      description: |
        Name of the regulated entity.
      type: string
      example: 'The bank'

    RegulatedEntitySupervisoryAuthority:
      description: |
        Name of the regulated entity supervisory authority.
      type: string
      example: 'The bank'

    RegulatedEntityRegistrationNumber:
      description: |
        Registration number of the regulated entity at the supervisory authority.
      type: string
      example: 'The bank'

    AssociationName:
      description: |
        Name of the association.
      type: string
      example: 'The association'

    AssociationRegistrationNumber:
      description: |
        Registration number of the association.
      type: string
      example: 'The association'

    PostalAddress:
      description: |
        Postal address.
      type: object
      properties:
        street:
          description: |
           Street name and number.
          type: string
        city:
          description: |
           City name.
          type: string
        state:
          description: |
           State name.
          type: string
        zipcode:
          description: |
           Zip code.
          type: integer
          minimum: 10000
          maximum: 99999
        country:
          description: |
           Country.
          type: string
      required:
        - street
        - city
        - zipcode
        - country

    Account:
      description: |
        Describe an account.
      type: object
      properties:
        description:
          description: |
            User understandable description of the account. In an account list,
            all accounts needs a different description.
          type: string
        identification:
          description: |
            Identification of the account (IBAN in the case of SEPA account identification).
          type: string
        verification_status:
          $ref: '#/components/schemas/VerificationStatus'
        supported_types:
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
        document_id:
          $ref: '#/components/schemas/DocumentId'
        type:
          $ref: '#/components/schemas/DocumentType'
      required:
        - description

    IdProof:
      description: |
        Universally Unique IDentifier for `Registers`.
      type: object
      properties:
        description:
          description: |
            User understandable description of the expected identification proof. In an
            identification proof list, all identification proof needs a different description.
          type: string
        verification_status:
          $ref: '#/components/schemas/VerificationStatus'
        supported_types:
          type: array
          items:
            $ref: '#/components/schemas/DocumentType'
        document_id:
          $ref: '#/components/schemas/DocumentId'
        type:
          $ref: '#/components/schemas/DocumentType'
      required:
        - description
        - verification_status
        - document_id
        - supported_types

    ServiceLevel:
      description: |
        Registration person type:
        - `FULL`: Full access to services capabilities.
        - `PARTIAL`: Service capabilities restricted (number of transactions, maximum amount...)
        based on risk management policy.
        - `NONE`: No service available.
      type: string
      enum:
        - FULL
        - PARTIAL
        - NONE
      example: 'FULL'

    VerificationStatus:
      description: |
        Registration person type:
        - `PENDING`: Waiting for additional content (document, information).
        - `CHECKING`: Checking transmitted content.
        - `CHECKED`: Transmitted content validated.
        - `REJECTED`: transmited content was rejected (inconsistent or unusable
        because can’t be analysed).
      type: string
      enum:
        - PENDING
        - CHECKING
        - CHECKED
        - REJECTED
      example: 'PENDING'

    DocumentType:
      description: |
        Registration person type:
        - `ID`: National identification card used to identify a natural person.
        - `PASSPORT`: Passport used to identify a natural person.
        - `TAX_DECLARATION`: Tax declaration used to identify a natural person.
        - `PAYSLIP`: Payslip used to identify a natural person.
        - `BANK_STATEMENT`: Bank statement used to ckeck account identification.
        - `BANK_CONNECTION`: Bank connection used to check account identification.
      type: string
      enum:
        - ID
        - PASSPORT
        - TAX_DECLARATION
        - PAYSLIP
        - BANK_STATEMENT
        - BANK_CONNECTION
        - KBIS
        - COMPANY_STATUS
      example: 'ID'

    DocumentId:
      description: |
        Universally Unique IDentifier for a natural or legal person.
      type: string
      maxLength: 36
      example: '360551d0-1537-11eb-adc1-0242ac120002'

    Location:
      description: |
        Location where to browse the content.
      type: string
      format: uri
      example: 'https://domain.com/context?param=value'

  #####################################################
  # Pagination
  #####################################################

    Page:
      description: |
        Pagination status when applicable.
      type: object
      properties:
        size:
          description: |
            Number of elements described in the page.
          type: number
        total_elements:
          description: |
            Total number of elements described in all pages.
          type: number
        total_pages:
          description: |
            Total number of pages.
          type: number
        number:
          description: |
            Index of current page.
          type: number
      required:
        - size
        - total_elements
        - total_pages
        - number
      example:
        size: '100'
        total_elements: '1215'
        total_pages: '13'
        number: '7'

  #####################################################
  # Error management
  #####################################################

    ErrorModel:
      description: |
        Generic error report structure.
      type: object
      properties:
        error:
          description: |
            Error code (can be used to manage error on the client).
          type: string
          enum:
          - BANK_ERROR
          - FORMAT_ERROR
          - BAD_PARAMETER
          - INTERNAL_ERROR
          - RESOURCE_UNKNOWN
          - NO
          - invalid_request
          - invalid_client
        error_description:
          description: |
            Human readable english text that describes the error (can be used in
            logs).
          type: string
          maxLength: 512
        id:
          description: |
            Identifies the resource (when applicable).
          type: string
          maxLength: 140
      required:
        - error
        - error_description
      example:
        error: 'PARAMETER_MISSING'
        error_description: "Missing request header 'X-FWD-Request-ID' for method parameter of type String"
        id: '/v3/order/1234567/'

  #####################################################
  # Predefined Headers
  #####################################################
  headers:

    X-FWD-Request-ID:
      description: |
        ID of the request used for support, unique for each call, as determined
        by the initiating party. As a consequence, you have to generate a
        unique value each time you call any API endpoint, even for two calls
        made in two different days. Best way to achieve ths is to use the UUID
        generator provided by your development framework.
      required: true
      example: '99391c7e-ad88-49ec-a2ad-99ddcb1f7721'
      schema:
        type: string
        format: uuid

    Location:
      description: |
        Location where to browse the content.
      required: true
      example: 'https://domain.com/context?param=value'
      schema:
        type: string
        format: uri

  #####################################################
  # Predefined Parameters
  #####################################################
  parameters:

    X-FWD-Request-ID:
      name: X-FWD-Request-ID
      in: header
      description: |
        ID of the request, unique to the call, as determined by the initiating
        party and transmitted to the ASPSP.
      required: true
      example: '99391c7e-ad88-49ec-a2ad-99ddcb1f7721'
      schema:
        type: string
        format: uuid

    BearerAuthorization:
      name: Authorization
      in: header
      description: |
        Client credential OAuth2 authorization bearer. Composed by `Bearer` followed after
        a space by the access token retrieved using `/token` endpoint.
      required: true
      example: 'Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiI3OTI4ZDExZGIxYTc4Nzg0NDFiOSIsImlzcyI6Imh0dHBzOi8vc2FuZGJveC1hdXRoLm94bGluLmlvIiwic3ViIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiYXVkIjoiYjUwZTAyODItMjJlZi00ODUxLWJlZDgtOTZlMzc5MmM1OWI5IiwiZXhwIjoxNTk0MTk3ODE0LCJpYXQiOjE1OTQxOTQyMTQsInNjb3BlIjoidXNlcnNfY3JlYXRlIHByb2ZpbGUgb3BlbmlkIn0.QFhD4VxSV1kzoBmjbRK5gi1r1Mf5hP6XbuTA8jsE7EQ8tdihTYAmpjyCDat2l8gyssinXMFlUOEaT0pnE_D1svDQWj-AGjOqj3_fmGJw1FAMaHfGvXCKBh3CTmNpCsd0fiQr6ocjI12DFYxVyK1fSFic-ix24kcEE_e7Z8AADI0jz_1z3Ls1rEMsqxvGk9pyZLJvum5xMWS9ZEWUBhjEZjSDlta_d9H8C5rF3GCW5NnDDyUDP0PZ1oQmR6ZIBY6rlASpq6n_VaRXR96koK00BZTLlwDwt8VUOQqDktIUc6h8MxRv4UFQmHYkOyIHZREsECwqPIlmU1hRzXH6qHqNtTIwJG0u9ccdioBTQzgnbYoLSGbCFgP1OUS95f2BbiQ633t89PfPV9Eioah5AaisuV4vudAsoUYAVnb04LAMpagI6Ym8bbp-b2_SuPBedtvtjBCxgZI7fnkw1JFGT5Io3ZNMn93AhAMXVdqxSqPR3lswB_2I3EK7fasLLFnJYcTZdgAqXvOEDUlI25cRmPIE4kik8c2Qz2V_oYsdFCWdW9acQ40Rq56JD2fJWPm0jYlncBmPJ2gSrinA-j--jyatnYoy7kBcGxfr_SG3vAwS03L7z-Aiowbdl9Bjvn3UXPqZFDc8tGSOLhBLD7JQxtIswlXo43huDTCya86tBgNfHm4'
      schema:
        type: string

    BasicAuthorization:
      name: Authorization
      in: header
      description: |
        Basic HTTP authorization composed by `Basic` and followed after a space by `credentials`, where
        `credentials` is the Base64 encoding of client_id and client_password joined by a single colon.
      required: true
      example: 'Basic lifiGPGOIGpiufOIUGPIGpiuGOIgoiJHPOIGihIUGOPIHoig'
      schema:
        type: string

    ClientIdParam:
      name: client_id
      in: query
      description: |
        Client identifier of the owner of referenced `orders`.
      required: true
      example: 'c93a95fc-602c-4a63-8df5-06e1c2a06253'
      schema:
        type: string

    OrderIdParam:
      name: order_id
      in: path
      description: |
        Unique identifier of an order.
      required: true
      example: '14d51b74-175a-11eb-adc1-0242ac120002'
      schema:
        $ref: '#/components/schemas/OrderId'

    AliasIdParam:
      name: alias_id
      in: path
      description: |
        Unique identifier of an alias.
      required: true
      example: 'a58390d9-4672-46d1-8cca-d6fc4ebc652e'
      schema:
        $ref: '#/components/schemas/AliasId'

    RegistrationIdParam:
      name: registration_id
      in: path
      description: |
        Unique identifier of a registration.
      required: true
      example: '0ea0e04e-175a-11eb-adc1-0242ac120002'
      schema:
        $ref: '#/components/schemas/RegistrationId'

    DocumentIdParam:
      name: document_id
      in: path
      description: |
        Unique identifier of a document.
      required: true
      example: '08482428-175a-11eb-adc1-0242ac120002'
      schema:
        $ref: '#/components/schemas/DocumentId'

    ResourceIdParam:
      name: resource_id
      in: path
      description: |
        Unique identifier of a resource.
      required: true
      example: '34b4b62a-1363-11eb-adc1-0242ac120002'
      schema:
        $ref: '#/components/schemas/ResourceId'

    ResourceTypeParam:
      name: resource_type
      in: path
      description: |
        Type of a resource.
      required: true
      example: 'ORDERS'
      schema:
        $ref: '#/components/schemas/ResourceType'

    LanguageDeprecated:
      deprecated: true
      name: lng
      in: query
      description: |
        Replaced by `locale`. Browser language to use in form:
        - language-code_language-variant
        - language-code

        Valid values samples:
        - `en`
        - `en_EN`, `en_GB`, `en_US`
        - `fr`
        - `fr_FR`
      required: false
      example: en_EN
      schema:
        type: string

    Language:
      name: locale
      in: query
      description: |
        Browser language to use in form:
        - language-code_language-variant
        - language-code
        Browser language to use with ISO-639 two letters language code optional
        followed by _ and the two letters ISO-3166 country code (override
        browser language detection):
        - language-code_country_code
        - language-code
        Valid values samples:
        - `en`
        - `en_EN`, `en_GB`, `en_US`
        - `fr`
        - `fr_FR`
      required: false
      example: en_EN
      schema:
        type: string

    Font:
      name: font
      in: query
      description: |
        Font to use in page (CSS representation).
      required: false
      example: italic small-caps bold 12px/30px Georgia, serif
      schema:
        type: string

    ElementsFont:
      name: elements_font
      in: query
      description: |
        Font to use for primary elements (CSS representation).
      required: false
      example: italic small-caps bold 12px/30px Georgia, serif
      schema:
        type: string

    FontColor:
      name: font_color
      in: query
      description: |
        Font color to use in page (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    FontSecondaryColor:
      name: font_secondary_color
      in: query
      description: |
        Font secondary color to use in page for buttons (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    BackgroundColor:
      name: background_color
      in: query
      description: |
        Background color (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    ElementsFontColor:
      name: elements_font_color
      in: query
      description: |
        Font color to use for primary elements (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    SecondaryElementsFontColor:
      name: secondary_elements_font_color
      in: query
      description: |
        Font color to use for secondary elements(CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    ForegroundColorDeprecated:
      deprecated: true
      name: foreground_color
      in: query
      description: |
        Replaced by `elements_color`. Foreground color (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    ElementsColor:
      name: elements_color
      in: query
      description: |
        Primary elements color to use (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    SecondaryElementsColor:
      name: secondary_elements_color
      in: query
      description: |
        Secondary elements color to use (CSS representation).
      required: false
      example: Blue
      schema:
        type: string

    Light:
      name: light
      in: query
      description: |
        Depending on regulation status and constraints, when true, we will hide
        payment summary.
      required: false
      schema:
        type: boolean
        default: false

    DisplayBorder:
      name: display_border
      in: query
      description: |
        When false, page is rendered without any border.
      required: false
      schema:
        type: boolean
        default: true

    AskForAlias:
      name: ask_for_alias
      in: query
      description: |
        When set to true in association with a valid value for
        `orders.user_reference`, payer is asked to register is
        account just before redirecting him to his bank
        authentication flow.
      required: false
      schema:
        type: boolean
        default: true

    AskForIBAN:
      name: ask_for_iban
      in: query
      description: |
        When set to true, payer can directly type its payment account IBAN.
      required: false
      schema:
        type: boolean
        default: false

    DisplayQRCode:
      name: display_qr_code
      in: query
      description: |
        When set to true, if the bank support app to app flow and if the payment page is
        not displayed using a mobile phone, we will display a QR code giving a way to optimize
        payment flow opening the bank application.
      required: false
      schema:
        type: boolean
        default: true

    ButtonRadius:
      name: button_radius
      in: query
      description: |
        Buttons radius value in `px`.
      required: false
      schema:
        type: number
        default: 30

    FavoriteProviders:
      name: favorite_providers
      in: query
      description: |
        Define a list of favorites providers that will be displayed at the top of the list.
      required: false
      example: AGRIFRP1ACF,SIBLFRPP,CMCIFRPA
      schema:
        type: array
        items:
          $ref: '#/components/schemas/PayerBic'

    Countries:
      name: countries
      in: query
      description: |
        Restricted list of bank countries the user is asked to connect to. Filter
        is composed by a list of ISO-3166 Alpha-2 countries descriptor.
        If undefined, all available banks will be available.
      required: false
      example: fr, pt
      schema:
        type: array
        items:
          $ref: '#/components/schemas/CountryCode'

    Title:
      name: title
      in: query
      description: |
        Override widget displayed title.
      required: false
      example: New title
      schema:
        type: string

    TermsHeader:
      name: terms_header
      in: query
      description: |
        Terms and conditions page header customized value. Use `%MAIL%` text
        if you need to integrate user mail.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Vous serez redirigé vers votre banque en ligne pour vous authentifier
        et valider votre paiement. Une fois le paiement réalisé vous recevrez
        une confirmation par email à l'adresse %MAIL%
      schema:
        type: string
        maxLength: 128

    TermsFooter:
      name: terms_footer
      in: query
      description: |
        Terms and conditions page footer customized value.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Oxlin établissement de paiement agréé par l’ACPR - Banque de France
        sous le numéro 16928.
      schema:
        type: string
        maxLength: 128

    TermsBody:
      name: terms_body
      in: query
      description: |
        Terms and conditions page body customized value using markdown syntax.
        To link static terms and conditions page, use
        `[link description](https://link.destination)`.
        > Customization not available if you are using Oxlin agreement.

        > When using your agreement, if not set we won't display terms page. As
        > a consequence, you won't have access to folowing capabilities:
        > - Ask user to register IBAN.
        > - Display a QR Code on non mobile device if AppToApp flow is
        > supported by the bank.
      required: false
      example: |
        De transmettre votre IBAN à Oxlin.%20%20%0ALes [conditions générales d’Oxlin Payments](https://pay.oxlin.io/v1/terms?locale=fr).
      schema:
        type: string
        maxLength: 512

    InstantPaymentHeader:
      name: instant_payment_header
      in: query
      description: |
        Instant payment feature page header customized value using markdown syntax.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Choisissez le type de virement
      schema:
        type: string
        maxLength: 512

    InstantPaymentFooter:
      name: instant_payment_footer
      in: query
      description: |
        Instant payment feature page footer customized value using markdown syntax.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Le virement instantané peut vous être facturé par votre banque.
      schema:
        type: string
        maxLength: 512

    ProvidersHeader:
      name: providers_header
      in: query
      description: |
        Provider search page header customized value.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Rechercher votre banque :
      schema:
        type: string
        maxLength: 64

    ProvidersSearchHint:
      name: providers_search_hint
      in: query
      description: |
        Provider search page input placeholder customized value.
        > Customization not available if you are using Oxlin agreement.
      required: false
      example: |
        Rechercher…
      schema:
        type: string
        maxLength: 64

    DisplayHeader:
      name: display_header
      in: query
      description: |
        When false, page is rendered without header including back arrow.
      required: false
      schema:
        type: boolean
        default: true

    ItemBorderColor:
      name: item_border_color
      in: query
      description: |
        Items border color using (CSS representation), no border if undefined.
      required: false
      example: Blue
      schema:
        type: string

    ItemBorderRadius:
      name: item_border_radius
      in: query
      description: |
        Item border radius value in `px`.
      required: false
      schema:
        type: number
        default: 0

    ItemArrowColor:
      name: item_arrow_color
      in: query
      description: |
        Items arrow color using (CSS representation), no arrow if undefined.
      required: false
      example: Blue
      schema:
        type: string

    ButtonArrowColor:
      name: button_arrow_color
      in: query
      description: |
        Button arrow color using (CSS representation), no arrow if undefined.
      required: false
      example: Blue
      schema:
        type: string

    ButtonSize:
      name: button_size
      in: query
      description: |
        Button size:
        - `SMALL`: Button size is small.
        - `LARGE`: Button size is large.
      required: false
      example: LARGE
      schema:
        type: string
        enum:
          - SMALL
          - LARGE
        default: LARGE

    ButtonAlignment:
      name: button_alignment
      in: query
      description: |
        Button size:
        - `LEFT_TOP`: horizontal alignment left, vertical alignement top.
        - `CENTER_TOP`: horizontal alignment center, vertical alignement top.
        - `RIGHT_TOP`: horizontal alignment right, vertical alignement top.
        - `LEFT_BOTTOM`: horizontal alignment left, vertical alignement bottom.
        - `CENTER_BOTTOM`: horizontal alignment center, vertical alignement bottom.
        - `RIGHT_BOTTOM`: horizontal alignment right, vertical alignement bottom.
      required: false
      example: CENTER_BOTTOM
      schema:
        type: string
        enum:
          - LEFT_TOP
          - CENTER_TOP
          - RIGHT_TOP
          - LEFT_BOTTOM
          - CENTER_BOTTOM
          - RIGHT_BOTTOM
        default: CENTER_BOTTOM

    CancelURL:
      name: cancel_url
      in: query
      description: |
        When set, widget will display a cancel link redirecting to that URL.
      required: false
      schema:
        allOf:
        - $ref: '#/components/schemas/URL'

    OrderStatusParam:
      name: order_status
      in: query
      description: |
        Orders status list.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/OrderStatus'

    PageParam:
      name: page
      in: query
      description:  |
        Page number in the pagination.
      required: false
      example: '7'
      schema:
        type: number
        x-constraint:
          positive: true

    LimitParam:
      name: limit
      in: query
      description:  |
        Max number of items to retrieve (limited to 500).
      required: false
      example: '20'
      schema:
        type: number
        default: 100
        maximum: 500
        x-constraint:
          positive: true

    ToCreationDateParam:
      name: date_to
      in: query
      description: |
        Inclusive maximal creation date.
        ISO 8601 format is used. Default value when not set will be
        current date-time.
      required: false
      schema:
        type: string
        format: date-time
        example: '2019-12-12T13:34:45+01:00'

    FromCreationDateParam:
      name: date_from
      in: query
      description: |
        Inclusive minimal creation date.
        ISO 8601 format is used. Default value when not set will be
        the value giving maximum history size.
      required: false
      schema:
        type: string
        format: date-time
        example: '2019-12-12T13:34:45+01:00'

    FromExecutionDateParam:
      name: execution_date_from
      in: query
      description: |
        Inclusive minimal execution date of a payment instruction.
        ISO 8601 format is used. Default value when not set will be
        the value giving maximum history size.
      required: false
      schema:
        type: string
        format: date-time
        example: '2019-12-12T13:34:45+01:00'

    PaymentCapabilitiesParam:
      name: payment_capabilities
      in: query
      description: |
        Payment capabilities list. OR condition is used when multiple values are set.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/PaymentCapability'

    AppToAppSupportParam:
      name: app_to_app_support
      in: query
      description: |
        AppToApp support list. AND condition is used when multiple values are set.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/AppToAppSupport'

    CountryCodeParam:
      name: country_codes
      in: query
      description: |
        Provider countries market supported.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/CountryCode'

    ServiceLevelParam:
      name: service_level
      in: query
      description: |
        Service level status list.
      required: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ServiceLevel'

    PersonTypeParam:
      name: type
      in: query
      description: |
        Type of a registration.
      required: false
      example: 'NATURAL_PERSON'
      schema:
        $ref: '#/components/schemas/PersonType'

    PersonNameSurnameParam:
      name: name
      in: query
      description: |
        Name of the person to look for. Concatenation of name and
        surname for natural person.
      required: false
      schema:
        type: string
        example: 'John Doe'

    UserReferenceParam:
      name: user_reference
      in: query
      description:  |
        Unique identifier of a user.
      required: false
      schema:
        $ref: '#/components/schemas/UserReference'

    UserReferenceRequiredParam:
      name: user_reference
      in: query
      description:  |
        Unique identifier of a user.
      required: true
      schema:
        $ref: '#/components/schemas/UserReference'

  #####################################################
  # Predefined responses
  #####################################################
  responses:

    '400':
      description: |
        Invalid parameters, they don't respect schema or parameter value
        aren't acceptable according current state.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'

    '401':
      description: |
        Unauthorized, authentication failure.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'

    '403':
      description: |
        Forbidden, authentication successful but access to resource is not
        allowed.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'

    '404':
      description: |
        Not found, no request available.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'

    '405':
      description: |
        Method Not Allowed.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'

    '415':
      description: |
        Unsupported media type.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'

    '500':
      description: |
        Internal server error.
      headers:
        X-FWD-Request-ID:
          $ref: '#/components/headers/X-FWD-Request-ID'
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/ErrorModel'
